
adc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000096c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000b4c  00000000  00000000  000009c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000004e8  00000000  00000000  0000150c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 91 04 	call	0x922	; 0x922 <main>
  64:	0c 94 b4 04 	jmp	0x968	; 0x968 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_u8setPortDir>:
#include "DIO_Reg.h"
#include "../../Libs/bitmath.h"

/*PORT level*/
u8 DIO_u8setPortDir(u8 Copy_u8port , u8 Copy_u8dir)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <DIO_u8setPortDir+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <DIO_u8setPortDir+0x8>
  74:	0f 92       	push	r0
  76:	cd b7       	in	r28, 0x3d	; 61
  78:	de b7       	in	r29, 0x3e	; 62
  7a:	8a 83       	std	Y+2, r24	; 0x02
  7c:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8errStatus = RT_OK ;
  7e:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8port)
  80:	8a 81       	ldd	r24, Y+2	; 0x02
  82:	28 2f       	mov	r18, r24
  84:	30 e0       	ldi	r19, 0x00	; 0
  86:	3d 83       	std	Y+5, r19	; 0x05
  88:	2c 83       	std	Y+4, r18	; 0x04
  8a:	8c 81       	ldd	r24, Y+4	; 0x04
  8c:	9d 81       	ldd	r25, Y+5	; 0x05
  8e:	81 30       	cpi	r24, 0x01	; 1
  90:	91 05       	cpc	r25, r1
  92:	d1 f0       	breq	.+52     	; 0xc8 <DIO_u8setPortDir+0x5c>
  94:	2c 81       	ldd	r18, Y+4	; 0x04
  96:	3d 81       	ldd	r19, Y+5	; 0x05
  98:	22 30       	cpi	r18, 0x02	; 2
  9a:	31 05       	cpc	r19, r1
  9c:	2c f4       	brge	.+10     	; 0xa8 <DIO_u8setPortDir+0x3c>
  9e:	8c 81       	ldd	r24, Y+4	; 0x04
  a0:	9d 81       	ldd	r25, Y+5	; 0x05
  a2:	00 97       	sbiw	r24, 0x00	; 0
  a4:	61 f0       	breq	.+24     	; 0xbe <DIO_u8setPortDir+0x52>
  a6:	1f c0       	rjmp	.+62     	; 0xe6 <DIO_u8setPortDir+0x7a>
  a8:	2c 81       	ldd	r18, Y+4	; 0x04
  aa:	3d 81       	ldd	r19, Y+5	; 0x05
  ac:	22 30       	cpi	r18, 0x02	; 2
  ae:	31 05       	cpc	r19, r1
  b0:	81 f0       	breq	.+32     	; 0xd2 <DIO_u8setPortDir+0x66>
  b2:	8c 81       	ldd	r24, Y+4	; 0x04
  b4:	9d 81       	ldd	r25, Y+5	; 0x05
  b6:	83 30       	cpi	r24, 0x03	; 3
  b8:	91 05       	cpc	r25, r1
  ba:	81 f0       	breq	.+32     	; 0xdc <DIO_u8setPortDir+0x70>
  bc:	14 c0       	rjmp	.+40     	; 0xe6 <DIO_u8setPortDir+0x7a>
	{
	case PORT_A:
		DDRA_REG=Copy_u8dir;
  be:	ea e3       	ldi	r30, 0x3A	; 58
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	8b 81       	ldd	r24, Y+3	; 0x03
  c4:	80 83       	st	Z, r24
  c6:	11 c0       	rjmp	.+34     	; 0xea <DIO_u8setPortDir+0x7e>
		break;
	case PORT_B:
		DDRB_REG=Copy_u8dir;
  c8:	e7 e3       	ldi	r30, 0x37	; 55
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	8b 81       	ldd	r24, Y+3	; 0x03
  ce:	80 83       	st	Z, r24
  d0:	0c c0       	rjmp	.+24     	; 0xea <DIO_u8setPortDir+0x7e>
		break;
	case PORT_C:
		DDRC_REG=Copy_u8dir;
  d2:	e4 e3       	ldi	r30, 0x34	; 52
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	8b 81       	ldd	r24, Y+3	; 0x03
  d8:	80 83       	st	Z, r24
  da:	07 c0       	rjmp	.+14     	; 0xea <DIO_u8setPortDir+0x7e>
		break;
	case PORT_D:
		DDRD_REG=Copy_u8dir;
  dc:	e1 e3       	ldi	r30, 0x31	; 49
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	8b 81       	ldd	r24, Y+3	; 0x03
  e2:	80 83       	st	Z, r24
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_u8setPortDir+0x7e>
		break;
	default:
		local_u8errStatus = RT_NOK ;
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8errStatus ;
  ea:	89 81       	ldd	r24, Y+1	; 0x01
}
  ec:	0f 90       	pop	r0
  ee:	0f 90       	pop	r0
  f0:	0f 90       	pop	r0
  f2:	0f 90       	pop	r0
  f4:	0f 90       	pop	r0
  f6:	cf 91       	pop	r28
  f8:	df 91       	pop	r29
  fa:	08 95       	ret

000000fc <DIO_u8setPortVal>:

u8 DIO_u8setPortVal(u8 Copy_u8port , u8 Copy_u8dval)
{
  fc:	df 93       	push	r29
  fe:	cf 93       	push	r28
 100:	00 d0       	rcall	.+0      	; 0x102 <DIO_u8setPortVal+0x6>
 102:	00 d0       	rcall	.+0      	; 0x104 <DIO_u8setPortVal+0x8>
 104:	0f 92       	push	r0
 106:	cd b7       	in	r28, 0x3d	; 61
 108:	de b7       	in	r29, 0x3e	; 62
 10a:	8a 83       	std	Y+2, r24	; 0x02
 10c:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8errStatus = RT_OK ;
 10e:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8port)
 110:	8a 81       	ldd	r24, Y+2	; 0x02
 112:	28 2f       	mov	r18, r24
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	3d 83       	std	Y+5, r19	; 0x05
 118:	2c 83       	std	Y+4, r18	; 0x04
 11a:	8c 81       	ldd	r24, Y+4	; 0x04
 11c:	9d 81       	ldd	r25, Y+5	; 0x05
 11e:	81 30       	cpi	r24, 0x01	; 1
 120:	91 05       	cpc	r25, r1
 122:	d1 f0       	breq	.+52     	; 0x158 <DIO_u8setPortVal+0x5c>
 124:	2c 81       	ldd	r18, Y+4	; 0x04
 126:	3d 81       	ldd	r19, Y+5	; 0x05
 128:	22 30       	cpi	r18, 0x02	; 2
 12a:	31 05       	cpc	r19, r1
 12c:	2c f4       	brge	.+10     	; 0x138 <DIO_u8setPortVal+0x3c>
 12e:	8c 81       	ldd	r24, Y+4	; 0x04
 130:	9d 81       	ldd	r25, Y+5	; 0x05
 132:	00 97       	sbiw	r24, 0x00	; 0
 134:	61 f0       	breq	.+24     	; 0x14e <DIO_u8setPortVal+0x52>
 136:	1f c0       	rjmp	.+62     	; 0x176 <DIO_u8setPortVal+0x7a>
 138:	2c 81       	ldd	r18, Y+4	; 0x04
 13a:	3d 81       	ldd	r19, Y+5	; 0x05
 13c:	22 30       	cpi	r18, 0x02	; 2
 13e:	31 05       	cpc	r19, r1
 140:	81 f0       	breq	.+32     	; 0x162 <DIO_u8setPortVal+0x66>
 142:	8c 81       	ldd	r24, Y+4	; 0x04
 144:	9d 81       	ldd	r25, Y+5	; 0x05
 146:	83 30       	cpi	r24, 0x03	; 3
 148:	91 05       	cpc	r25, r1
 14a:	81 f0       	breq	.+32     	; 0x16c <DIO_u8setPortVal+0x70>
 14c:	14 c0       	rjmp	.+40     	; 0x176 <DIO_u8setPortVal+0x7a>
	{
	case PORT_A:
		PORTA_REG=Copy_u8dval;
 14e:	eb e3       	ldi	r30, 0x3B	; 59
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	8b 81       	ldd	r24, Y+3	; 0x03
 154:	80 83       	st	Z, r24
 156:	11 c0       	rjmp	.+34     	; 0x17a <DIO_u8setPortVal+0x7e>
		break;
	case PORT_B:
		PORTB_REG=Copy_u8dval;
 158:	e8 e3       	ldi	r30, 0x38	; 56
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	8b 81       	ldd	r24, Y+3	; 0x03
 15e:	80 83       	st	Z, r24
 160:	0c c0       	rjmp	.+24     	; 0x17a <DIO_u8setPortVal+0x7e>
		break;
	case PORT_C:
		PORTC_REG=Copy_u8dval;
 162:	e5 e3       	ldi	r30, 0x35	; 53
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	8b 81       	ldd	r24, Y+3	; 0x03
 168:	80 83       	st	Z, r24
 16a:	07 c0       	rjmp	.+14     	; 0x17a <DIO_u8setPortVal+0x7e>
		break;
	case PORT_D:
		PORTD_REG=Copy_u8dval;
 16c:	e2 e3       	ldi	r30, 0x32	; 50
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	8b 81       	ldd	r24, Y+3	; 0x03
 172:	80 83       	st	Z, r24
 174:	02 c0       	rjmp	.+4      	; 0x17a <DIO_u8setPortVal+0x7e>
		break;
	default:
		local_u8errStatus = RT_NOK ;
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8errStatus ;
 17a:	89 81       	ldd	r24, Y+1	; 0x01
}
 17c:	0f 90       	pop	r0
 17e:	0f 90       	pop	r0
 180:	0f 90       	pop	r0
 182:	0f 90       	pop	r0
 184:	0f 90       	pop	r0
 186:	cf 91       	pop	r28
 188:	df 91       	pop	r29
 18a:	08 95       	ret

0000018c <DIO_u8getPortVal>:

u8 DIO_u8getPortVal(u8 Copy_u8port , u8* Copy_u8pval)
{
 18c:	df 93       	push	r29
 18e:	cf 93       	push	r28
 190:	00 d0       	rcall	.+0      	; 0x192 <DIO_u8getPortVal+0x6>
 192:	00 d0       	rcall	.+0      	; 0x194 <DIO_u8getPortVal+0x8>
 194:	00 d0       	rcall	.+0      	; 0x196 <DIO_u8getPortVal+0xa>
 196:	cd b7       	in	r28, 0x3d	; 61
 198:	de b7       	in	r29, 0x3e	; 62
 19a:	8a 83       	std	Y+2, r24	; 0x02
 19c:	7c 83       	std	Y+4, r23	; 0x04
 19e:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8errStatus = RT_OK ;
 1a0:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8port)
 1a2:	8a 81       	ldd	r24, Y+2	; 0x02
 1a4:	28 2f       	mov	r18, r24
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	3e 83       	std	Y+6, r19	; 0x06
 1aa:	2d 83       	std	Y+5, r18	; 0x05
 1ac:	8d 81       	ldd	r24, Y+5	; 0x05
 1ae:	9e 81       	ldd	r25, Y+6	; 0x06
 1b0:	81 30       	cpi	r24, 0x01	; 1
 1b2:	91 05       	cpc	r25, r1
 1b4:	e1 f0       	breq	.+56     	; 0x1ee <DIO_u8getPortVal+0x62>
 1b6:	2d 81       	ldd	r18, Y+5	; 0x05
 1b8:	3e 81       	ldd	r19, Y+6	; 0x06
 1ba:	22 30       	cpi	r18, 0x02	; 2
 1bc:	31 05       	cpc	r19, r1
 1be:	2c f4       	brge	.+10     	; 0x1ca <DIO_u8getPortVal+0x3e>
 1c0:	8d 81       	ldd	r24, Y+5	; 0x05
 1c2:	9e 81       	ldd	r25, Y+6	; 0x06
 1c4:	00 97       	sbiw	r24, 0x00	; 0
 1c6:	61 f0       	breq	.+24     	; 0x1e0 <DIO_u8getPortVal+0x54>
 1c8:	27 c0       	rjmp	.+78     	; 0x218 <DIO_u8getPortVal+0x8c>
 1ca:	2d 81       	ldd	r18, Y+5	; 0x05
 1cc:	3e 81       	ldd	r19, Y+6	; 0x06
 1ce:	22 30       	cpi	r18, 0x02	; 2
 1d0:	31 05       	cpc	r19, r1
 1d2:	a1 f0       	breq	.+40     	; 0x1fc <DIO_u8getPortVal+0x70>
 1d4:	8d 81       	ldd	r24, Y+5	; 0x05
 1d6:	9e 81       	ldd	r25, Y+6	; 0x06
 1d8:	83 30       	cpi	r24, 0x03	; 3
 1da:	91 05       	cpc	r25, r1
 1dc:	b1 f0       	breq	.+44     	; 0x20a <DIO_u8getPortVal+0x7e>
 1de:	1c c0       	rjmp	.+56     	; 0x218 <DIO_u8getPortVal+0x8c>
	{
	case PORT_A:
		*Copy_u8pval=PINA_REG;
 1e0:	e9 e3       	ldi	r30, 0x39	; 57
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	80 81       	ld	r24, Z
 1e6:	eb 81       	ldd	r30, Y+3	; 0x03
 1e8:	fc 81       	ldd	r31, Y+4	; 0x04
 1ea:	80 83       	st	Z, r24
 1ec:	17 c0       	rjmp	.+46     	; 0x21c <DIO_u8getPortVal+0x90>
		break;
	case PORT_B:
		*Copy_u8pval=PINB_REG;
 1ee:	e6 e3       	ldi	r30, 0x36	; 54
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	80 81       	ld	r24, Z
 1f4:	eb 81       	ldd	r30, Y+3	; 0x03
 1f6:	fc 81       	ldd	r31, Y+4	; 0x04
 1f8:	80 83       	st	Z, r24
 1fa:	10 c0       	rjmp	.+32     	; 0x21c <DIO_u8getPortVal+0x90>
		break;
	case PORT_C:
		*Copy_u8pval=PINC_REG;
 1fc:	e3 e3       	ldi	r30, 0x33	; 51
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	eb 81       	ldd	r30, Y+3	; 0x03
 204:	fc 81       	ldd	r31, Y+4	; 0x04
 206:	80 83       	st	Z, r24
 208:	09 c0       	rjmp	.+18     	; 0x21c <DIO_u8getPortVal+0x90>
		break;
	case PORT_D:
		*Copy_u8pval=PIND_REG;
 20a:	e0 e3       	ldi	r30, 0x30	; 48
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	80 81       	ld	r24, Z
 210:	eb 81       	ldd	r30, Y+3	; 0x03
 212:	fc 81       	ldd	r31, Y+4	; 0x04
 214:	80 83       	st	Z, r24
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_u8getPortVal+0x90>
		break;
	default:
		local_u8errStatus = RT_NOK ;
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8errStatus ;
 21c:	89 81       	ldd	r24, Y+1	; 0x01
}
 21e:	26 96       	adiw	r28, 0x06	; 6
 220:	0f b6       	in	r0, 0x3f	; 63
 222:	f8 94       	cli
 224:	de bf       	out	0x3e, r29	; 62
 226:	0f be       	out	0x3f, r0	; 63
 228:	cd bf       	out	0x3d, r28	; 61
 22a:	cf 91       	pop	r28
 22c:	df 91       	pop	r29
 22e:	08 95       	ret

00000230 <DIO_u8setPinDir>:
/*PIN level*/
u8 DIO_u8setPinDir(u8 Copy_u8port , u8 Copy_u8pin , u8 Copy_u8dir)
{
 230:	df 93       	push	r29
 232:	cf 93       	push	r28
 234:	cd b7       	in	r28, 0x3d	; 61
 236:	de b7       	in	r29, 0x3e	; 62
 238:	28 97       	sbiw	r28, 0x08	; 8
 23a:	0f b6       	in	r0, 0x3f	; 63
 23c:	f8 94       	cli
 23e:	de bf       	out	0x3e, r29	; 62
 240:	0f be       	out	0x3f, r0	; 63
 242:	cd bf       	out	0x3d, r28	; 61
 244:	8a 83       	std	Y+2, r24	; 0x02
 246:	6b 83       	std	Y+3, r22	; 0x03
 248:	4c 83       	std	Y+4, r20	; 0x04
	u8 local_u8errStatus = RT_OK ;
 24a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8pin >= PIN_0 && Copy_u8pin <= PIN_7 )
 24c:	8b 81       	ldd	r24, Y+3	; 0x03
 24e:	88 30       	cpi	r24, 0x08	; 8
 250:	08 f0       	brcs	.+2      	; 0x254 <DIO_u8setPinDir+0x24>
 252:	f4 c0       	rjmp	.+488    	; 0x43c <DIO_u8setPinDir+0x20c>
	{
		if(Copy_u8dir == INPUT)
 254:	8c 81       	ldd	r24, Y+4	; 0x04
 256:	88 23       	and	r24, r24
 258:	09 f0       	breq	.+2      	; 0x25c <DIO_u8setPinDir+0x2c>
 25a:	77 c0       	rjmp	.+238    	; 0x34a <DIO_u8setPinDir+0x11a>
		{
			switch(Copy_u8port)
 25c:	8a 81       	ldd	r24, Y+2	; 0x02
 25e:	28 2f       	mov	r18, r24
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	38 87       	std	Y+8, r19	; 0x08
 264:	2f 83       	std	Y+7, r18	; 0x07
 266:	8f 81       	ldd	r24, Y+7	; 0x07
 268:	98 85       	ldd	r25, Y+8	; 0x08
 26a:	81 30       	cpi	r24, 0x01	; 1
 26c:	91 05       	cpc	r25, r1
 26e:	59 f1       	breq	.+86     	; 0x2c6 <DIO_u8setPinDir+0x96>
 270:	2f 81       	ldd	r18, Y+7	; 0x07
 272:	38 85       	ldd	r19, Y+8	; 0x08
 274:	22 30       	cpi	r18, 0x02	; 2
 276:	31 05       	cpc	r19, r1
 278:	2c f4       	brge	.+10     	; 0x284 <DIO_u8setPinDir+0x54>
 27a:	8f 81       	ldd	r24, Y+7	; 0x07
 27c:	98 85       	ldd	r25, Y+8	; 0x08
 27e:	00 97       	sbiw	r24, 0x00	; 0
 280:	69 f0       	breq	.+26     	; 0x29c <DIO_u8setPinDir+0x6c>
 282:	60 c0       	rjmp	.+192    	; 0x344 <DIO_u8setPinDir+0x114>
 284:	2f 81       	ldd	r18, Y+7	; 0x07
 286:	38 85       	ldd	r19, Y+8	; 0x08
 288:	22 30       	cpi	r18, 0x02	; 2
 28a:	31 05       	cpc	r19, r1
 28c:	89 f1       	breq	.+98     	; 0x2f0 <DIO_u8setPinDir+0xc0>
 28e:	8f 81       	ldd	r24, Y+7	; 0x07
 290:	98 85       	ldd	r25, Y+8	; 0x08
 292:	83 30       	cpi	r24, 0x03	; 3
 294:	91 05       	cpc	r25, r1
 296:	09 f4       	brne	.+2      	; 0x29a <DIO_u8setPinDir+0x6a>
 298:	40 c0       	rjmp	.+128    	; 0x31a <DIO_u8setPinDir+0xea>
 29a:	54 c0       	rjmp	.+168    	; 0x344 <DIO_u8setPinDir+0x114>
			{
			case PORT_A:
				CLR_BIT(DDRA_REG,Copy_u8pin);
 29c:	aa e3       	ldi	r26, 0x3A	; 58
 29e:	b0 e0       	ldi	r27, 0x00	; 0
 2a0:	ea e3       	ldi	r30, 0x3A	; 58
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	80 81       	ld	r24, Z
 2a6:	48 2f       	mov	r20, r24
 2a8:	8b 81       	ldd	r24, Y+3	; 0x03
 2aa:	28 2f       	mov	r18, r24
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	02 2e       	mov	r0, r18
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <DIO_u8setPinDir+0x8a>
 2b6:	88 0f       	add	r24, r24
 2b8:	99 1f       	adc	r25, r25
 2ba:	0a 94       	dec	r0
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <DIO_u8setPinDir+0x86>
 2be:	80 95       	com	r24
 2c0:	84 23       	and	r24, r20
 2c2:	8c 93       	st	X, r24
 2c4:	bd c0       	rjmp	.+378    	; 0x440 <DIO_u8setPinDir+0x210>
				break;
			case PORT_B:
				CLR_BIT(DDRB_REG,Copy_u8pin);
 2c6:	a7 e3       	ldi	r26, 0x37	; 55
 2c8:	b0 e0       	ldi	r27, 0x00	; 0
 2ca:	e7 e3       	ldi	r30, 0x37	; 55
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	80 81       	ld	r24, Z
 2d0:	48 2f       	mov	r20, r24
 2d2:	8b 81       	ldd	r24, Y+3	; 0x03
 2d4:	28 2f       	mov	r18, r24
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	02 2e       	mov	r0, r18
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <DIO_u8setPinDir+0xb4>
 2e0:	88 0f       	add	r24, r24
 2e2:	99 1f       	adc	r25, r25
 2e4:	0a 94       	dec	r0
 2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <DIO_u8setPinDir+0xb0>
 2e8:	80 95       	com	r24
 2ea:	84 23       	and	r24, r20
 2ec:	8c 93       	st	X, r24
 2ee:	a8 c0       	rjmp	.+336    	; 0x440 <DIO_u8setPinDir+0x210>
				break;
			case PORT_C:
				CLR_BIT(DDRC_REG,Copy_u8pin);
 2f0:	a4 e3       	ldi	r26, 0x34	; 52
 2f2:	b0 e0       	ldi	r27, 0x00	; 0
 2f4:	e4 e3       	ldi	r30, 0x34	; 52
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	80 81       	ld	r24, Z
 2fa:	48 2f       	mov	r20, r24
 2fc:	8b 81       	ldd	r24, Y+3	; 0x03
 2fe:	28 2f       	mov	r18, r24
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	02 2e       	mov	r0, r18
 308:	02 c0       	rjmp	.+4      	; 0x30e <DIO_u8setPinDir+0xde>
 30a:	88 0f       	add	r24, r24
 30c:	99 1f       	adc	r25, r25
 30e:	0a 94       	dec	r0
 310:	e2 f7       	brpl	.-8      	; 0x30a <DIO_u8setPinDir+0xda>
 312:	80 95       	com	r24
 314:	84 23       	and	r24, r20
 316:	8c 93       	st	X, r24
 318:	93 c0       	rjmp	.+294    	; 0x440 <DIO_u8setPinDir+0x210>
				break;
			case PORT_D:
				CLR_BIT(DDRD_REG,Copy_u8pin);
 31a:	a1 e3       	ldi	r26, 0x31	; 49
 31c:	b0 e0       	ldi	r27, 0x00	; 0
 31e:	e1 e3       	ldi	r30, 0x31	; 49
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	80 81       	ld	r24, Z
 324:	48 2f       	mov	r20, r24
 326:	8b 81       	ldd	r24, Y+3	; 0x03
 328:	28 2f       	mov	r18, r24
 32a:	30 e0       	ldi	r19, 0x00	; 0
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	02 2e       	mov	r0, r18
 332:	02 c0       	rjmp	.+4      	; 0x338 <DIO_u8setPinDir+0x108>
 334:	88 0f       	add	r24, r24
 336:	99 1f       	adc	r25, r25
 338:	0a 94       	dec	r0
 33a:	e2 f7       	brpl	.-8      	; 0x334 <DIO_u8setPinDir+0x104>
 33c:	80 95       	com	r24
 33e:	84 23       	and	r24, r20
 340:	8c 93       	st	X, r24
 342:	7e c0       	rjmp	.+252    	; 0x440 <DIO_u8setPinDir+0x210>
				break;
			default:
				local_u8errStatus = RT_NOK ;
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	89 83       	std	Y+1, r24	; 0x01
 348:	7b c0       	rjmp	.+246    	; 0x440 <DIO_u8setPinDir+0x210>
			}
		}
		else if(Copy_u8dir == OUTPUT)
 34a:	8c 81       	ldd	r24, Y+4	; 0x04
 34c:	81 30       	cpi	r24, 0x01	; 1
 34e:	09 f0       	breq	.+2      	; 0x352 <DIO_u8setPinDir+0x122>
 350:	72 c0       	rjmp	.+228    	; 0x436 <DIO_u8setPinDir+0x206>
		{
			switch(Copy_u8port)
 352:	8a 81       	ldd	r24, Y+2	; 0x02
 354:	28 2f       	mov	r18, r24
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	3e 83       	std	Y+6, r19	; 0x06
 35a:	2d 83       	std	Y+5, r18	; 0x05
 35c:	8d 81       	ldd	r24, Y+5	; 0x05
 35e:	9e 81       	ldd	r25, Y+6	; 0x06
 360:	81 30       	cpi	r24, 0x01	; 1
 362:	91 05       	cpc	r25, r1
 364:	49 f1       	breq	.+82     	; 0x3b8 <DIO_u8setPinDir+0x188>
 366:	2d 81       	ldd	r18, Y+5	; 0x05
 368:	3e 81       	ldd	r19, Y+6	; 0x06
 36a:	22 30       	cpi	r18, 0x02	; 2
 36c:	31 05       	cpc	r19, r1
 36e:	2c f4       	brge	.+10     	; 0x37a <DIO_u8setPinDir+0x14a>
 370:	8d 81       	ldd	r24, Y+5	; 0x05
 372:	9e 81       	ldd	r25, Y+6	; 0x06
 374:	00 97       	sbiw	r24, 0x00	; 0
 376:	61 f0       	breq	.+24     	; 0x390 <DIO_u8setPinDir+0x160>
 378:	5b c0       	rjmp	.+182    	; 0x430 <DIO_u8setPinDir+0x200>
 37a:	2d 81       	ldd	r18, Y+5	; 0x05
 37c:	3e 81       	ldd	r19, Y+6	; 0x06
 37e:	22 30       	cpi	r18, 0x02	; 2
 380:	31 05       	cpc	r19, r1
 382:	71 f1       	breq	.+92     	; 0x3e0 <DIO_u8setPinDir+0x1b0>
 384:	8d 81       	ldd	r24, Y+5	; 0x05
 386:	9e 81       	ldd	r25, Y+6	; 0x06
 388:	83 30       	cpi	r24, 0x03	; 3
 38a:	91 05       	cpc	r25, r1
 38c:	e9 f1       	breq	.+122    	; 0x408 <DIO_u8setPinDir+0x1d8>
 38e:	50 c0       	rjmp	.+160    	; 0x430 <DIO_u8setPinDir+0x200>
			{
			case PORT_A:
				SET_BIT(DDRA_REG,Copy_u8pin);
 390:	aa e3       	ldi	r26, 0x3A	; 58
 392:	b0 e0       	ldi	r27, 0x00	; 0
 394:	ea e3       	ldi	r30, 0x3A	; 58
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	80 81       	ld	r24, Z
 39a:	48 2f       	mov	r20, r24
 39c:	8b 81       	ldd	r24, Y+3	; 0x03
 39e:	28 2f       	mov	r18, r24
 3a0:	30 e0       	ldi	r19, 0x00	; 0
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	02 2e       	mov	r0, r18
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <DIO_u8setPinDir+0x17e>
 3aa:	88 0f       	add	r24, r24
 3ac:	99 1f       	adc	r25, r25
 3ae:	0a 94       	dec	r0
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <DIO_u8setPinDir+0x17a>
 3b2:	84 2b       	or	r24, r20
 3b4:	8c 93       	st	X, r24
 3b6:	44 c0       	rjmp	.+136    	; 0x440 <DIO_u8setPinDir+0x210>
				break;
			case PORT_B:
				SET_BIT(DDRB_REG,Copy_u8pin);
 3b8:	a7 e3       	ldi	r26, 0x37	; 55
 3ba:	b0 e0       	ldi	r27, 0x00	; 0
 3bc:	e7 e3       	ldi	r30, 0x37	; 55
 3be:	f0 e0       	ldi	r31, 0x00	; 0
 3c0:	80 81       	ld	r24, Z
 3c2:	48 2f       	mov	r20, r24
 3c4:	8b 81       	ldd	r24, Y+3	; 0x03
 3c6:	28 2f       	mov	r18, r24
 3c8:	30 e0       	ldi	r19, 0x00	; 0
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	02 2e       	mov	r0, r18
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <DIO_u8setPinDir+0x1a6>
 3d2:	88 0f       	add	r24, r24
 3d4:	99 1f       	adc	r25, r25
 3d6:	0a 94       	dec	r0
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <DIO_u8setPinDir+0x1a2>
 3da:	84 2b       	or	r24, r20
 3dc:	8c 93       	st	X, r24
 3de:	30 c0       	rjmp	.+96     	; 0x440 <DIO_u8setPinDir+0x210>
				break;
			case PORT_C:
				SET_BIT(DDRC_REG,Copy_u8pin);
 3e0:	a4 e3       	ldi	r26, 0x34	; 52
 3e2:	b0 e0       	ldi	r27, 0x00	; 0
 3e4:	e4 e3       	ldi	r30, 0x34	; 52
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	80 81       	ld	r24, Z
 3ea:	48 2f       	mov	r20, r24
 3ec:	8b 81       	ldd	r24, Y+3	; 0x03
 3ee:	28 2f       	mov	r18, r24
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	02 2e       	mov	r0, r18
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <DIO_u8setPinDir+0x1ce>
 3fa:	88 0f       	add	r24, r24
 3fc:	99 1f       	adc	r25, r25
 3fe:	0a 94       	dec	r0
 400:	e2 f7       	brpl	.-8      	; 0x3fa <DIO_u8setPinDir+0x1ca>
 402:	84 2b       	or	r24, r20
 404:	8c 93       	st	X, r24
 406:	1c c0       	rjmp	.+56     	; 0x440 <DIO_u8setPinDir+0x210>
				break;
			case PORT_D:
				SET_BIT(DDRD_REG,Copy_u8pin);
 408:	a1 e3       	ldi	r26, 0x31	; 49
 40a:	b0 e0       	ldi	r27, 0x00	; 0
 40c:	e1 e3       	ldi	r30, 0x31	; 49
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	80 81       	ld	r24, Z
 412:	48 2f       	mov	r20, r24
 414:	8b 81       	ldd	r24, Y+3	; 0x03
 416:	28 2f       	mov	r18, r24
 418:	30 e0       	ldi	r19, 0x00	; 0
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	02 2e       	mov	r0, r18
 420:	02 c0       	rjmp	.+4      	; 0x426 <DIO_u8setPinDir+0x1f6>
 422:	88 0f       	add	r24, r24
 424:	99 1f       	adc	r25, r25
 426:	0a 94       	dec	r0
 428:	e2 f7       	brpl	.-8      	; 0x422 <DIO_u8setPinDir+0x1f2>
 42a:	84 2b       	or	r24, r20
 42c:	8c 93       	st	X, r24
 42e:	08 c0       	rjmp	.+16     	; 0x440 <DIO_u8setPinDir+0x210>
				break;
			default:
				local_u8errStatus = RT_NOK ;
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	89 83       	std	Y+1, r24	; 0x01
 434:	05 c0       	rjmp	.+10     	; 0x440 <DIO_u8setPinDir+0x210>
			}
		}
		else
		{
			local_u8errStatus = RT_NOK ;
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	89 83       	std	Y+1, r24	; 0x01
 43a:	02 c0       	rjmp	.+4      	; 0x440 <DIO_u8setPinDir+0x210>
		}
	}
	else
	{
		local_u8errStatus = RT_NOK ;
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8errStatus ;
 440:	89 81       	ldd	r24, Y+1	; 0x01
}
 442:	28 96       	adiw	r28, 0x08	; 8
 444:	0f b6       	in	r0, 0x3f	; 63
 446:	f8 94       	cli
 448:	de bf       	out	0x3e, r29	; 62
 44a:	0f be       	out	0x3f, r0	; 63
 44c:	cd bf       	out	0x3d, r28	; 61
 44e:	cf 91       	pop	r28
 450:	df 91       	pop	r29
 452:	08 95       	ret

00000454 <DIO_u8setPinVal>:

u8 DIO_u8setPinVal(u8 Copy_u8port , u8 Copy_u8pin , u8 Copy_u8val)
{
 454:	df 93       	push	r29
 456:	cf 93       	push	r28
 458:	cd b7       	in	r28, 0x3d	; 61
 45a:	de b7       	in	r29, 0x3e	; 62
 45c:	28 97       	sbiw	r28, 0x08	; 8
 45e:	0f b6       	in	r0, 0x3f	; 63
 460:	f8 94       	cli
 462:	de bf       	out	0x3e, r29	; 62
 464:	0f be       	out	0x3f, r0	; 63
 466:	cd bf       	out	0x3d, r28	; 61
 468:	8a 83       	std	Y+2, r24	; 0x02
 46a:	6b 83       	std	Y+3, r22	; 0x03
 46c:	4c 83       	std	Y+4, r20	; 0x04
	u8 local_u8errStatus = RT_OK ;
 46e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8pin >= PIN_0 && Copy_u8pin <= PIN_7 )
 470:	8b 81       	ldd	r24, Y+3	; 0x03
 472:	88 30       	cpi	r24, 0x08	; 8
 474:	08 f0       	brcs	.+2      	; 0x478 <DIO_u8setPinVal+0x24>
 476:	f4 c0       	rjmp	.+488    	; 0x660 <DIO_u8setPinVal+0x20c>
	{
		if(Copy_u8val == LOW)
 478:	8c 81       	ldd	r24, Y+4	; 0x04
 47a:	88 23       	and	r24, r24
 47c:	09 f0       	breq	.+2      	; 0x480 <DIO_u8setPinVal+0x2c>
 47e:	77 c0       	rjmp	.+238    	; 0x56e <DIO_u8setPinVal+0x11a>
		{
			switch(Copy_u8port)
 480:	8a 81       	ldd	r24, Y+2	; 0x02
 482:	28 2f       	mov	r18, r24
 484:	30 e0       	ldi	r19, 0x00	; 0
 486:	38 87       	std	Y+8, r19	; 0x08
 488:	2f 83       	std	Y+7, r18	; 0x07
 48a:	8f 81       	ldd	r24, Y+7	; 0x07
 48c:	98 85       	ldd	r25, Y+8	; 0x08
 48e:	81 30       	cpi	r24, 0x01	; 1
 490:	91 05       	cpc	r25, r1
 492:	59 f1       	breq	.+86     	; 0x4ea <DIO_u8setPinVal+0x96>
 494:	2f 81       	ldd	r18, Y+7	; 0x07
 496:	38 85       	ldd	r19, Y+8	; 0x08
 498:	22 30       	cpi	r18, 0x02	; 2
 49a:	31 05       	cpc	r19, r1
 49c:	2c f4       	brge	.+10     	; 0x4a8 <DIO_u8setPinVal+0x54>
 49e:	8f 81       	ldd	r24, Y+7	; 0x07
 4a0:	98 85       	ldd	r25, Y+8	; 0x08
 4a2:	00 97       	sbiw	r24, 0x00	; 0
 4a4:	69 f0       	breq	.+26     	; 0x4c0 <DIO_u8setPinVal+0x6c>
 4a6:	60 c0       	rjmp	.+192    	; 0x568 <DIO_u8setPinVal+0x114>
 4a8:	2f 81       	ldd	r18, Y+7	; 0x07
 4aa:	38 85       	ldd	r19, Y+8	; 0x08
 4ac:	22 30       	cpi	r18, 0x02	; 2
 4ae:	31 05       	cpc	r19, r1
 4b0:	89 f1       	breq	.+98     	; 0x514 <DIO_u8setPinVal+0xc0>
 4b2:	8f 81       	ldd	r24, Y+7	; 0x07
 4b4:	98 85       	ldd	r25, Y+8	; 0x08
 4b6:	83 30       	cpi	r24, 0x03	; 3
 4b8:	91 05       	cpc	r25, r1
 4ba:	09 f4       	brne	.+2      	; 0x4be <DIO_u8setPinVal+0x6a>
 4bc:	40 c0       	rjmp	.+128    	; 0x53e <DIO_u8setPinVal+0xea>
 4be:	54 c0       	rjmp	.+168    	; 0x568 <DIO_u8setPinVal+0x114>
			{
			case PORT_A:
				CLR_BIT(PORTA_REG,Copy_u8pin);
 4c0:	ab e3       	ldi	r26, 0x3B	; 59
 4c2:	b0 e0       	ldi	r27, 0x00	; 0
 4c4:	eb e3       	ldi	r30, 0x3B	; 59
 4c6:	f0 e0       	ldi	r31, 0x00	; 0
 4c8:	80 81       	ld	r24, Z
 4ca:	48 2f       	mov	r20, r24
 4cc:	8b 81       	ldd	r24, Y+3	; 0x03
 4ce:	28 2f       	mov	r18, r24
 4d0:	30 e0       	ldi	r19, 0x00	; 0
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	02 2e       	mov	r0, r18
 4d8:	02 c0       	rjmp	.+4      	; 0x4de <DIO_u8setPinVal+0x8a>
 4da:	88 0f       	add	r24, r24
 4dc:	99 1f       	adc	r25, r25
 4de:	0a 94       	dec	r0
 4e0:	e2 f7       	brpl	.-8      	; 0x4da <DIO_u8setPinVal+0x86>
 4e2:	80 95       	com	r24
 4e4:	84 23       	and	r24, r20
 4e6:	8c 93       	st	X, r24
 4e8:	bd c0       	rjmp	.+378    	; 0x664 <DIO_u8setPinVal+0x210>
				break;
			case PORT_B:
				CLR_BIT(PORTB_REG,Copy_u8pin);
 4ea:	a8 e3       	ldi	r26, 0x38	; 56
 4ec:	b0 e0       	ldi	r27, 0x00	; 0
 4ee:	e8 e3       	ldi	r30, 0x38	; 56
 4f0:	f0 e0       	ldi	r31, 0x00	; 0
 4f2:	80 81       	ld	r24, Z
 4f4:	48 2f       	mov	r20, r24
 4f6:	8b 81       	ldd	r24, Y+3	; 0x03
 4f8:	28 2f       	mov	r18, r24
 4fa:	30 e0       	ldi	r19, 0x00	; 0
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	02 2e       	mov	r0, r18
 502:	02 c0       	rjmp	.+4      	; 0x508 <DIO_u8setPinVal+0xb4>
 504:	88 0f       	add	r24, r24
 506:	99 1f       	adc	r25, r25
 508:	0a 94       	dec	r0
 50a:	e2 f7       	brpl	.-8      	; 0x504 <DIO_u8setPinVal+0xb0>
 50c:	80 95       	com	r24
 50e:	84 23       	and	r24, r20
 510:	8c 93       	st	X, r24
 512:	a8 c0       	rjmp	.+336    	; 0x664 <DIO_u8setPinVal+0x210>
				break;
			case PORT_C:
				CLR_BIT(PORTC_REG,Copy_u8pin);
 514:	a5 e3       	ldi	r26, 0x35	; 53
 516:	b0 e0       	ldi	r27, 0x00	; 0
 518:	e5 e3       	ldi	r30, 0x35	; 53
 51a:	f0 e0       	ldi	r31, 0x00	; 0
 51c:	80 81       	ld	r24, Z
 51e:	48 2f       	mov	r20, r24
 520:	8b 81       	ldd	r24, Y+3	; 0x03
 522:	28 2f       	mov	r18, r24
 524:	30 e0       	ldi	r19, 0x00	; 0
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	02 2e       	mov	r0, r18
 52c:	02 c0       	rjmp	.+4      	; 0x532 <DIO_u8setPinVal+0xde>
 52e:	88 0f       	add	r24, r24
 530:	99 1f       	adc	r25, r25
 532:	0a 94       	dec	r0
 534:	e2 f7       	brpl	.-8      	; 0x52e <DIO_u8setPinVal+0xda>
 536:	80 95       	com	r24
 538:	84 23       	and	r24, r20
 53a:	8c 93       	st	X, r24
 53c:	93 c0       	rjmp	.+294    	; 0x664 <DIO_u8setPinVal+0x210>
				break;
			case PORT_D:
				CLR_BIT(PORTD_REG,Copy_u8pin);
 53e:	a2 e3       	ldi	r26, 0x32	; 50
 540:	b0 e0       	ldi	r27, 0x00	; 0
 542:	e2 e3       	ldi	r30, 0x32	; 50
 544:	f0 e0       	ldi	r31, 0x00	; 0
 546:	80 81       	ld	r24, Z
 548:	48 2f       	mov	r20, r24
 54a:	8b 81       	ldd	r24, Y+3	; 0x03
 54c:	28 2f       	mov	r18, r24
 54e:	30 e0       	ldi	r19, 0x00	; 0
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	02 2e       	mov	r0, r18
 556:	02 c0       	rjmp	.+4      	; 0x55c <DIO_u8setPinVal+0x108>
 558:	88 0f       	add	r24, r24
 55a:	99 1f       	adc	r25, r25
 55c:	0a 94       	dec	r0
 55e:	e2 f7       	brpl	.-8      	; 0x558 <DIO_u8setPinVal+0x104>
 560:	80 95       	com	r24
 562:	84 23       	and	r24, r20
 564:	8c 93       	st	X, r24
 566:	7e c0       	rjmp	.+252    	; 0x664 <DIO_u8setPinVal+0x210>
				break;
			default:
				local_u8errStatus = RT_NOK ;
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	89 83       	std	Y+1, r24	; 0x01
 56c:	7b c0       	rjmp	.+246    	; 0x664 <DIO_u8setPinVal+0x210>
			}
		}
		else if(Copy_u8val == HIGH)
 56e:	8c 81       	ldd	r24, Y+4	; 0x04
 570:	81 30       	cpi	r24, 0x01	; 1
 572:	09 f0       	breq	.+2      	; 0x576 <DIO_u8setPinVal+0x122>
 574:	72 c0       	rjmp	.+228    	; 0x65a <DIO_u8setPinVal+0x206>
		{
			switch(Copy_u8port)
 576:	8a 81       	ldd	r24, Y+2	; 0x02
 578:	28 2f       	mov	r18, r24
 57a:	30 e0       	ldi	r19, 0x00	; 0
 57c:	3e 83       	std	Y+6, r19	; 0x06
 57e:	2d 83       	std	Y+5, r18	; 0x05
 580:	8d 81       	ldd	r24, Y+5	; 0x05
 582:	9e 81       	ldd	r25, Y+6	; 0x06
 584:	81 30       	cpi	r24, 0x01	; 1
 586:	91 05       	cpc	r25, r1
 588:	49 f1       	breq	.+82     	; 0x5dc <DIO_u8setPinVal+0x188>
 58a:	2d 81       	ldd	r18, Y+5	; 0x05
 58c:	3e 81       	ldd	r19, Y+6	; 0x06
 58e:	22 30       	cpi	r18, 0x02	; 2
 590:	31 05       	cpc	r19, r1
 592:	2c f4       	brge	.+10     	; 0x59e <DIO_u8setPinVal+0x14a>
 594:	8d 81       	ldd	r24, Y+5	; 0x05
 596:	9e 81       	ldd	r25, Y+6	; 0x06
 598:	00 97       	sbiw	r24, 0x00	; 0
 59a:	61 f0       	breq	.+24     	; 0x5b4 <DIO_u8setPinVal+0x160>
 59c:	5b c0       	rjmp	.+182    	; 0x654 <DIO_u8setPinVal+0x200>
 59e:	2d 81       	ldd	r18, Y+5	; 0x05
 5a0:	3e 81       	ldd	r19, Y+6	; 0x06
 5a2:	22 30       	cpi	r18, 0x02	; 2
 5a4:	31 05       	cpc	r19, r1
 5a6:	71 f1       	breq	.+92     	; 0x604 <DIO_u8setPinVal+0x1b0>
 5a8:	8d 81       	ldd	r24, Y+5	; 0x05
 5aa:	9e 81       	ldd	r25, Y+6	; 0x06
 5ac:	83 30       	cpi	r24, 0x03	; 3
 5ae:	91 05       	cpc	r25, r1
 5b0:	e9 f1       	breq	.+122    	; 0x62c <DIO_u8setPinVal+0x1d8>
 5b2:	50 c0       	rjmp	.+160    	; 0x654 <DIO_u8setPinVal+0x200>
			{
			case PORT_A:
				SET_BIT(PORTA_REG,Copy_u8pin);
 5b4:	ab e3       	ldi	r26, 0x3B	; 59
 5b6:	b0 e0       	ldi	r27, 0x00	; 0
 5b8:	eb e3       	ldi	r30, 0x3B	; 59
 5ba:	f0 e0       	ldi	r31, 0x00	; 0
 5bc:	80 81       	ld	r24, Z
 5be:	48 2f       	mov	r20, r24
 5c0:	8b 81       	ldd	r24, Y+3	; 0x03
 5c2:	28 2f       	mov	r18, r24
 5c4:	30 e0       	ldi	r19, 0x00	; 0
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	02 2e       	mov	r0, r18
 5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <DIO_u8setPinVal+0x17e>
 5ce:	88 0f       	add	r24, r24
 5d0:	99 1f       	adc	r25, r25
 5d2:	0a 94       	dec	r0
 5d4:	e2 f7       	brpl	.-8      	; 0x5ce <DIO_u8setPinVal+0x17a>
 5d6:	84 2b       	or	r24, r20
 5d8:	8c 93       	st	X, r24
 5da:	44 c0       	rjmp	.+136    	; 0x664 <DIO_u8setPinVal+0x210>
				break;
			case PORT_B:
				SET_BIT(PORTB_REG,Copy_u8pin);
 5dc:	a8 e3       	ldi	r26, 0x38	; 56
 5de:	b0 e0       	ldi	r27, 0x00	; 0
 5e0:	e8 e3       	ldi	r30, 0x38	; 56
 5e2:	f0 e0       	ldi	r31, 0x00	; 0
 5e4:	80 81       	ld	r24, Z
 5e6:	48 2f       	mov	r20, r24
 5e8:	8b 81       	ldd	r24, Y+3	; 0x03
 5ea:	28 2f       	mov	r18, r24
 5ec:	30 e0       	ldi	r19, 0x00	; 0
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	02 2e       	mov	r0, r18
 5f4:	02 c0       	rjmp	.+4      	; 0x5fa <DIO_u8setPinVal+0x1a6>
 5f6:	88 0f       	add	r24, r24
 5f8:	99 1f       	adc	r25, r25
 5fa:	0a 94       	dec	r0
 5fc:	e2 f7       	brpl	.-8      	; 0x5f6 <DIO_u8setPinVal+0x1a2>
 5fe:	84 2b       	or	r24, r20
 600:	8c 93       	st	X, r24
 602:	30 c0       	rjmp	.+96     	; 0x664 <DIO_u8setPinVal+0x210>
				break;
			case PORT_C:
				SET_BIT(PORTC_REG,Copy_u8pin);
 604:	a5 e3       	ldi	r26, 0x35	; 53
 606:	b0 e0       	ldi	r27, 0x00	; 0
 608:	e5 e3       	ldi	r30, 0x35	; 53
 60a:	f0 e0       	ldi	r31, 0x00	; 0
 60c:	80 81       	ld	r24, Z
 60e:	48 2f       	mov	r20, r24
 610:	8b 81       	ldd	r24, Y+3	; 0x03
 612:	28 2f       	mov	r18, r24
 614:	30 e0       	ldi	r19, 0x00	; 0
 616:	81 e0       	ldi	r24, 0x01	; 1
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	02 2e       	mov	r0, r18
 61c:	02 c0       	rjmp	.+4      	; 0x622 <DIO_u8setPinVal+0x1ce>
 61e:	88 0f       	add	r24, r24
 620:	99 1f       	adc	r25, r25
 622:	0a 94       	dec	r0
 624:	e2 f7       	brpl	.-8      	; 0x61e <DIO_u8setPinVal+0x1ca>
 626:	84 2b       	or	r24, r20
 628:	8c 93       	st	X, r24
 62a:	1c c0       	rjmp	.+56     	; 0x664 <DIO_u8setPinVal+0x210>
				break;
			case PORT_D:
				SET_BIT(PORTD_REG,Copy_u8pin);
 62c:	a2 e3       	ldi	r26, 0x32	; 50
 62e:	b0 e0       	ldi	r27, 0x00	; 0
 630:	e2 e3       	ldi	r30, 0x32	; 50
 632:	f0 e0       	ldi	r31, 0x00	; 0
 634:	80 81       	ld	r24, Z
 636:	48 2f       	mov	r20, r24
 638:	8b 81       	ldd	r24, Y+3	; 0x03
 63a:	28 2f       	mov	r18, r24
 63c:	30 e0       	ldi	r19, 0x00	; 0
 63e:	81 e0       	ldi	r24, 0x01	; 1
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	02 2e       	mov	r0, r18
 644:	02 c0       	rjmp	.+4      	; 0x64a <DIO_u8setPinVal+0x1f6>
 646:	88 0f       	add	r24, r24
 648:	99 1f       	adc	r25, r25
 64a:	0a 94       	dec	r0
 64c:	e2 f7       	brpl	.-8      	; 0x646 <DIO_u8setPinVal+0x1f2>
 64e:	84 2b       	or	r24, r20
 650:	8c 93       	st	X, r24
 652:	08 c0       	rjmp	.+16     	; 0x664 <DIO_u8setPinVal+0x210>
				break;
			default:
				local_u8errStatus = RT_NOK ;
 654:	81 e0       	ldi	r24, 0x01	; 1
 656:	89 83       	std	Y+1, r24	; 0x01
 658:	05 c0       	rjmp	.+10     	; 0x664 <DIO_u8setPinVal+0x210>
			}
		}
		else
		{
			local_u8errStatus = RT_NOK ;
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	89 83       	std	Y+1, r24	; 0x01
 65e:	02 c0       	rjmp	.+4      	; 0x664 <DIO_u8setPinVal+0x210>
		}
	}
	else
	{
		local_u8errStatus = RT_NOK ;
 660:	81 e0       	ldi	r24, 0x01	; 1
 662:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8errStatus ;
 664:	89 81       	ldd	r24, Y+1	; 0x01
}
 666:	28 96       	adiw	r28, 0x08	; 8
 668:	0f b6       	in	r0, 0x3f	; 63
 66a:	f8 94       	cli
 66c:	de bf       	out	0x3e, r29	; 62
 66e:	0f be       	out	0x3f, r0	; 63
 670:	cd bf       	out	0x3d, r28	; 61
 672:	cf 91       	pop	r28
 674:	df 91       	pop	r29
 676:	08 95       	ret

00000678 <DIO_u8getPinVal>:

u8 DIO_u8getPinVal(u8 Copy_u8port , u8 Copy_u8pin , u8* Copy_u8pval)
{
 678:	df 93       	push	r29
 67a:	cf 93       	push	r28
 67c:	cd b7       	in	r28, 0x3d	; 61
 67e:	de b7       	in	r29, 0x3e	; 62
 680:	27 97       	sbiw	r28, 0x07	; 7
 682:	0f b6       	in	r0, 0x3f	; 63
 684:	f8 94       	cli
 686:	de bf       	out	0x3e, r29	; 62
 688:	0f be       	out	0x3f, r0	; 63
 68a:	cd bf       	out	0x3d, r28	; 61
 68c:	8a 83       	std	Y+2, r24	; 0x02
 68e:	6b 83       	std	Y+3, r22	; 0x03
 690:	5d 83       	std	Y+5, r21	; 0x05
 692:	4c 83       	std	Y+4, r20	; 0x04
	u8 local_u8errStatus = RT_OK ;
 694:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8pin <= PIN_7 )
 696:	8b 81       	ldd	r24, Y+3	; 0x03
 698:	88 30       	cpi	r24, 0x08	; 8
 69a:	08 f0       	brcs	.+2      	; 0x69e <DIO_u8getPinVal+0x26>
 69c:	a5 c0       	rjmp	.+330    	; 0x7e8 <DIO_u8getPinVal+0x170>
	{
		switch(Copy_u8port)
 69e:	8a 81       	ldd	r24, Y+2	; 0x02
 6a0:	28 2f       	mov	r18, r24
 6a2:	30 e0       	ldi	r19, 0x00	; 0
 6a4:	3f 83       	std	Y+7, r19	; 0x07
 6a6:	2e 83       	std	Y+6, r18	; 0x06
 6a8:	4e 81       	ldd	r20, Y+6	; 0x06
 6aa:	5f 81       	ldd	r21, Y+7	; 0x07
 6ac:	41 30       	cpi	r20, 0x01	; 1
 6ae:	51 05       	cpc	r21, r1
 6b0:	c1 f1       	breq	.+112    	; 0x722 <DIO_u8getPinVal+0xaa>
 6b2:	8e 81       	ldd	r24, Y+6	; 0x06
 6b4:	9f 81       	ldd	r25, Y+7	; 0x07
 6b6:	82 30       	cpi	r24, 0x02	; 2
 6b8:	91 05       	cpc	r25, r1
 6ba:	34 f4       	brge	.+12     	; 0x6c8 <DIO_u8getPinVal+0x50>
 6bc:	2e 81       	ldd	r18, Y+6	; 0x06
 6be:	3f 81       	ldd	r19, Y+7	; 0x07
 6c0:	21 15       	cp	r18, r1
 6c2:	31 05       	cpc	r19, r1
 6c4:	71 f0       	breq	.+28     	; 0x6e2 <DIO_u8getPinVal+0x6a>
 6c6:	8d c0       	rjmp	.+282    	; 0x7e2 <DIO_u8getPinVal+0x16a>
 6c8:	4e 81       	ldd	r20, Y+6	; 0x06
 6ca:	5f 81       	ldd	r21, Y+7	; 0x07
 6cc:	42 30       	cpi	r20, 0x02	; 2
 6ce:	51 05       	cpc	r21, r1
 6d0:	09 f4       	brne	.+2      	; 0x6d4 <DIO_u8getPinVal+0x5c>
 6d2:	47 c0       	rjmp	.+142    	; 0x762 <DIO_u8getPinVal+0xea>
 6d4:	8e 81       	ldd	r24, Y+6	; 0x06
 6d6:	9f 81       	ldd	r25, Y+7	; 0x07
 6d8:	83 30       	cpi	r24, 0x03	; 3
 6da:	91 05       	cpc	r25, r1
 6dc:	09 f4       	brne	.+2      	; 0x6e0 <DIO_u8getPinVal+0x68>
 6de:	61 c0       	rjmp	.+194    	; 0x7a2 <DIO_u8getPinVal+0x12a>
 6e0:	80 c0       	rjmp	.+256    	; 0x7e2 <DIO_u8getPinVal+0x16a>
		{
		case PORT_A:
			*Copy_u8pval=GET_BIT(PINA_REG,Copy_u8pin);
 6e2:	e9 e3       	ldi	r30, 0x39	; 57
 6e4:	f0 e0       	ldi	r31, 0x00	; 0
 6e6:	80 81       	ld	r24, Z
 6e8:	48 2f       	mov	r20, r24
 6ea:	50 e0       	ldi	r21, 0x00	; 0
 6ec:	8b 81       	ldd	r24, Y+3	; 0x03
 6ee:	28 2f       	mov	r18, r24
 6f0:	30 e0       	ldi	r19, 0x00	; 0
 6f2:	81 e0       	ldi	r24, 0x01	; 1
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	02 c0       	rjmp	.+4      	; 0x6fc <DIO_u8getPinVal+0x84>
 6f8:	88 0f       	add	r24, r24
 6fa:	99 1f       	adc	r25, r25
 6fc:	2a 95       	dec	r18
 6fe:	e2 f7       	brpl	.-8      	; 0x6f8 <DIO_u8getPinVal+0x80>
 700:	9a 01       	movw	r18, r20
 702:	28 23       	and	r18, r24
 704:	39 23       	and	r19, r25
 706:	8b 81       	ldd	r24, Y+3	; 0x03
 708:	88 2f       	mov	r24, r24
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	a9 01       	movw	r20, r18
 70e:	02 c0       	rjmp	.+4      	; 0x714 <DIO_u8getPinVal+0x9c>
 710:	55 95       	asr	r21
 712:	47 95       	ror	r20
 714:	8a 95       	dec	r24
 716:	e2 f7       	brpl	.-8      	; 0x710 <DIO_u8getPinVal+0x98>
 718:	ca 01       	movw	r24, r20
 71a:	ec 81       	ldd	r30, Y+4	; 0x04
 71c:	fd 81       	ldd	r31, Y+5	; 0x05
 71e:	80 83       	st	Z, r24
 720:	65 c0       	rjmp	.+202    	; 0x7ec <DIO_u8getPinVal+0x174>
			break;
		case PORT_B:
			*Copy_u8pval=GET_BIT(PINB_REG,Copy_u8pin);
 722:	e6 e3       	ldi	r30, 0x36	; 54
 724:	f0 e0       	ldi	r31, 0x00	; 0
 726:	80 81       	ld	r24, Z
 728:	48 2f       	mov	r20, r24
 72a:	50 e0       	ldi	r21, 0x00	; 0
 72c:	8b 81       	ldd	r24, Y+3	; 0x03
 72e:	28 2f       	mov	r18, r24
 730:	30 e0       	ldi	r19, 0x00	; 0
 732:	81 e0       	ldi	r24, 0x01	; 1
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	02 c0       	rjmp	.+4      	; 0x73c <DIO_u8getPinVal+0xc4>
 738:	88 0f       	add	r24, r24
 73a:	99 1f       	adc	r25, r25
 73c:	2a 95       	dec	r18
 73e:	e2 f7       	brpl	.-8      	; 0x738 <DIO_u8getPinVal+0xc0>
 740:	9a 01       	movw	r18, r20
 742:	28 23       	and	r18, r24
 744:	39 23       	and	r19, r25
 746:	8b 81       	ldd	r24, Y+3	; 0x03
 748:	88 2f       	mov	r24, r24
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	a9 01       	movw	r20, r18
 74e:	02 c0       	rjmp	.+4      	; 0x754 <DIO_u8getPinVal+0xdc>
 750:	55 95       	asr	r21
 752:	47 95       	ror	r20
 754:	8a 95       	dec	r24
 756:	e2 f7       	brpl	.-8      	; 0x750 <DIO_u8getPinVal+0xd8>
 758:	ca 01       	movw	r24, r20
 75a:	ec 81       	ldd	r30, Y+4	; 0x04
 75c:	fd 81       	ldd	r31, Y+5	; 0x05
 75e:	80 83       	st	Z, r24
 760:	45 c0       	rjmp	.+138    	; 0x7ec <DIO_u8getPinVal+0x174>
			break;
		case PORT_C:
			*Copy_u8pval=GET_BIT(PINC_REG,Copy_u8pin);
 762:	e3 e3       	ldi	r30, 0x33	; 51
 764:	f0 e0       	ldi	r31, 0x00	; 0
 766:	80 81       	ld	r24, Z
 768:	48 2f       	mov	r20, r24
 76a:	50 e0       	ldi	r21, 0x00	; 0
 76c:	8b 81       	ldd	r24, Y+3	; 0x03
 76e:	28 2f       	mov	r18, r24
 770:	30 e0       	ldi	r19, 0x00	; 0
 772:	81 e0       	ldi	r24, 0x01	; 1
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	02 c0       	rjmp	.+4      	; 0x77c <DIO_u8getPinVal+0x104>
 778:	88 0f       	add	r24, r24
 77a:	99 1f       	adc	r25, r25
 77c:	2a 95       	dec	r18
 77e:	e2 f7       	brpl	.-8      	; 0x778 <DIO_u8getPinVal+0x100>
 780:	9a 01       	movw	r18, r20
 782:	28 23       	and	r18, r24
 784:	39 23       	and	r19, r25
 786:	8b 81       	ldd	r24, Y+3	; 0x03
 788:	88 2f       	mov	r24, r24
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	a9 01       	movw	r20, r18
 78e:	02 c0       	rjmp	.+4      	; 0x794 <DIO_u8getPinVal+0x11c>
 790:	55 95       	asr	r21
 792:	47 95       	ror	r20
 794:	8a 95       	dec	r24
 796:	e2 f7       	brpl	.-8      	; 0x790 <DIO_u8getPinVal+0x118>
 798:	ca 01       	movw	r24, r20
 79a:	ec 81       	ldd	r30, Y+4	; 0x04
 79c:	fd 81       	ldd	r31, Y+5	; 0x05
 79e:	80 83       	st	Z, r24
 7a0:	25 c0       	rjmp	.+74     	; 0x7ec <DIO_u8getPinVal+0x174>
			break;
		case PORT_D:
			*Copy_u8pval=GET_BIT(PIND_REG,Copy_u8pin);
 7a2:	e0 e3       	ldi	r30, 0x30	; 48
 7a4:	f0 e0       	ldi	r31, 0x00	; 0
 7a6:	80 81       	ld	r24, Z
 7a8:	48 2f       	mov	r20, r24
 7aa:	50 e0       	ldi	r21, 0x00	; 0
 7ac:	8b 81       	ldd	r24, Y+3	; 0x03
 7ae:	28 2f       	mov	r18, r24
 7b0:	30 e0       	ldi	r19, 0x00	; 0
 7b2:	81 e0       	ldi	r24, 0x01	; 1
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	02 c0       	rjmp	.+4      	; 0x7bc <DIO_u8getPinVal+0x144>
 7b8:	88 0f       	add	r24, r24
 7ba:	99 1f       	adc	r25, r25
 7bc:	2a 95       	dec	r18
 7be:	e2 f7       	brpl	.-8      	; 0x7b8 <DIO_u8getPinVal+0x140>
 7c0:	9a 01       	movw	r18, r20
 7c2:	28 23       	and	r18, r24
 7c4:	39 23       	and	r19, r25
 7c6:	8b 81       	ldd	r24, Y+3	; 0x03
 7c8:	88 2f       	mov	r24, r24
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	a9 01       	movw	r20, r18
 7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <DIO_u8getPinVal+0x15c>
 7d0:	55 95       	asr	r21
 7d2:	47 95       	ror	r20
 7d4:	8a 95       	dec	r24
 7d6:	e2 f7       	brpl	.-8      	; 0x7d0 <DIO_u8getPinVal+0x158>
 7d8:	ca 01       	movw	r24, r20
 7da:	ec 81       	ldd	r30, Y+4	; 0x04
 7dc:	fd 81       	ldd	r31, Y+5	; 0x05
 7de:	80 83       	st	Z, r24
 7e0:	05 c0       	rjmp	.+10     	; 0x7ec <DIO_u8getPinVal+0x174>
			break;
		default:
			local_u8errStatus = RT_NOK ;
 7e2:	81 e0       	ldi	r24, 0x01	; 1
 7e4:	89 83       	std	Y+1, r24	; 0x01
 7e6:	02 c0       	rjmp	.+4      	; 0x7ec <DIO_u8getPinVal+0x174>
		}
	}
	else
	{
		local_u8errStatus = RT_NOK ;
 7e8:	81 e0       	ldi	r24, 0x01	; 1
 7ea:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8errStatus ;
 7ec:	89 81       	ldd	r24, Y+1	; 0x01
}
 7ee:	27 96       	adiw	r28, 0x07	; 7
 7f0:	0f b6       	in	r0, 0x3f	; 63
 7f2:	f8 94       	cli
 7f4:	de bf       	out	0x3e, r29	; 62
 7f6:	0f be       	out	0x3f, r0	; 63
 7f8:	cd bf       	out	0x3d, r28	; 61
 7fa:	cf 91       	pop	r28
 7fc:	df 91       	pop	r29
 7fe:	08 95       	ret

00000800 <ADC_vidADCInit>:
#include "../MCAL/DIO/DIO_int.h"
#include "../Libs/bitmath.h"


void ADC_vidADCInit(void)
{
 800:	df 93       	push	r29
 802:	cf 93       	push	r28
 804:	cd b7       	in	r28, 0x3d	; 61
 806:	de b7       	in	r29, 0x3e	; 62
	/*ENABLE*/
	SET_BIT(ADCSRA_REG, 7);
 808:	a6 e2       	ldi	r26, 0x26	; 38
 80a:	b0 e0       	ldi	r27, 0x00	; 0
 80c:	e6 e2       	ldi	r30, 0x26	; 38
 80e:	f0 e0       	ldi	r31, 0x00	; 0
 810:	80 81       	ld	r24, Z
 812:	80 68       	ori	r24, 0x80	; 128
 814:	8c 93       	st	X, r24

	/*VRef*/
	SET_BIT(ADMUX_REG, 6);
 816:	a7 e2       	ldi	r26, 0x27	; 39
 818:	b0 e0       	ldi	r27, 0x00	; 0
 81a:	e7 e2       	ldi	r30, 0x27	; 39
 81c:	f0 e0       	ldi	r31, 0x00	; 0
 81e:	80 81       	ld	r24, Z
 820:	80 64       	ori	r24, 0x40	; 64
 822:	8c 93       	st	X, r24
	CLR_BIT(ADMUX_REG, 7);
 824:	a7 e2       	ldi	r26, 0x27	; 39
 826:	b0 e0       	ldi	r27, 0x00	; 0
 828:	e7 e2       	ldi	r30, 0x27	; 39
 82a:	f0 e0       	ldi	r31, 0x00	; 0
 82c:	80 81       	ld	r24, Z
 82e:	8f 77       	andi	r24, 0x7F	; 127
 830:	8c 93       	st	X, r24

	/*Res = 10 bit*/
	CLR_BIT(ADMUX_REG, 5);
 832:	a7 e2       	ldi	r26, 0x27	; 39
 834:	b0 e0       	ldi	r27, 0x00	; 0
 836:	e7 e2       	ldi	r30, 0x27	; 39
 838:	f0 e0       	ldi	r31, 0x00	; 0
 83a:	80 81       	ld	r24, Z
 83c:	8f 7d       	andi	r24, 0xDF	; 223
 83e:	8c 93       	st	X, r24

	/*Single Conv*/
	CLR_BIT(ADCSRA_REG, 5);
 840:	a6 e2       	ldi	r26, 0x26	; 38
 842:	b0 e0       	ldi	r27, 0x00	; 0
 844:	e6 e2       	ldi	r30, 0x26	; 38
 846:	f0 e0       	ldi	r31, 0x00	; 0
 848:	80 81       	ld	r24, Z
 84a:	8f 7d       	andi	r24, 0xDF	; 223
 84c:	8c 93       	st	X, r24

	/*Prescalar*/
	SET_BIT(ADCSRA_REG, 0);
 84e:	a6 e2       	ldi	r26, 0x26	; 38
 850:	b0 e0       	ldi	r27, 0x00	; 0
 852:	e6 e2       	ldi	r30, 0x26	; 38
 854:	f0 e0       	ldi	r31, 0x00	; 0
 856:	80 81       	ld	r24, Z
 858:	81 60       	ori	r24, 0x01	; 1
 85a:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA_REG, 1);
 85c:	a6 e2       	ldi	r26, 0x26	; 38
 85e:	b0 e0       	ldi	r27, 0x00	; 0
 860:	e6 e2       	ldi	r30, 0x26	; 38
 862:	f0 e0       	ldi	r31, 0x00	; 0
 864:	80 81       	ld	r24, Z
 866:	8d 7f       	andi	r24, 0xFD	; 253
 868:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG, 2);
 86a:	a6 e2       	ldi	r26, 0x26	; 38
 86c:	b0 e0       	ldi	r27, 0x00	; 0
 86e:	e6 e2       	ldi	r30, 0x26	; 38
 870:	f0 e0       	ldi	r31, 0x00	; 0
 872:	80 81       	ld	r24, Z
 874:	84 60       	ori	r24, 0x04	; 4
 876:	8c 93       	st	X, r24
}
 878:	cf 91       	pop	r28
 87a:	df 91       	pop	r29
 87c:	08 95       	ret

0000087e <ADC_u8ADCRead>:



u16 ADC_u8ADCRead(u8 copy_u8Channel)
{
 87e:	df 93       	push	r29
 880:	cf 93       	push	r28
 882:	00 d0       	rcall	.+0      	; 0x884 <ADC_u8ADCRead+0x6>
 884:	0f 92       	push	r0
 886:	cd b7       	in	r28, 0x3d	; 61
 888:	de b7       	in	r29, 0x3e	; 62
 88a:	8b 83       	std	Y+3, r24	; 0x03
	u16 local_u16DigitalRead;
	ADMUX_REG &= 0b11100000;
 88c:	a7 e2       	ldi	r26, 0x27	; 39
 88e:	b0 e0       	ldi	r27, 0x00	; 0
 890:	e7 e2       	ldi	r30, 0x27	; 39
 892:	f0 e0       	ldi	r31, 0x00	; 0
 894:	80 81       	ld	r24, Z
 896:	80 7e       	andi	r24, 0xE0	; 224
 898:	8c 93       	st	X, r24
	ADMUX_REG |= copy_u8Channel;
 89a:	a7 e2       	ldi	r26, 0x27	; 39
 89c:	b0 e0       	ldi	r27, 0x00	; 0
 89e:	e7 e2       	ldi	r30, 0x27	; 39
 8a0:	f0 e0       	ldi	r31, 0x00	; 0
 8a2:	90 81       	ld	r25, Z
 8a4:	8b 81       	ldd	r24, Y+3	; 0x03
 8a6:	89 2b       	or	r24, r25
 8a8:	8c 93       	st	X, r24

	SET_BIT(ADCSRA_REG, 6);
 8aa:	a6 e2       	ldi	r26, 0x26	; 38
 8ac:	b0 e0       	ldi	r27, 0x00	; 0
 8ae:	e6 e2       	ldi	r30, 0x26	; 38
 8b0:	f0 e0       	ldi	r31, 0x00	; 0
 8b2:	80 81       	ld	r24, Z
 8b4:	80 64       	ori	r24, 0x40	; 64
 8b6:	8c 93       	st	X, r24

	while(GET_BIT(ADCSRA_REG, 4)==0);
 8b8:	e6 e2       	ldi	r30, 0x26	; 38
 8ba:	f0 e0       	ldi	r31, 0x00	; 0
 8bc:	80 81       	ld	r24, Z
 8be:	88 2f       	mov	r24, r24
 8c0:	90 e0       	ldi	r25, 0x00	; 0
 8c2:	80 71       	andi	r24, 0x10	; 16
 8c4:	90 70       	andi	r25, 0x00	; 0
 8c6:	95 95       	asr	r25
 8c8:	87 95       	ror	r24
 8ca:	95 95       	asr	r25
 8cc:	87 95       	ror	r24
 8ce:	95 95       	asr	r25
 8d0:	87 95       	ror	r24
 8d2:	95 95       	asr	r25
 8d4:	87 95       	ror	r24
 8d6:	00 97       	sbiw	r24, 0x00	; 0
 8d8:	79 f3       	breq	.-34     	; 0x8b8 <ADC_u8ADCRead+0x3a>

	SET_BIT(ADCSRA_REG, 4);
 8da:	a6 e2       	ldi	r26, 0x26	; 38
 8dc:	b0 e0       	ldi	r27, 0x00	; 0
 8de:	e6 e2       	ldi	r30, 0x26	; 38
 8e0:	f0 e0       	ldi	r31, 0x00	; 0
 8e2:	80 81       	ld	r24, Z
 8e4:	80 61       	ori	r24, 0x10	; 16
 8e6:	8c 93       	st	X, r24

	local_u16DigitalRead = ADCL_REG;
 8e8:	e4 e2       	ldi	r30, 0x24	; 36
 8ea:	f0 e0       	ldi	r31, 0x00	; 0
 8ec:	80 81       	ld	r24, Z
 8ee:	88 2f       	mov	r24, r24
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	9a 83       	std	Y+2, r25	; 0x02
 8f4:	89 83       	std	Y+1, r24	; 0x01
	local_u16DigitalRead |= ADCH_REG<<8;
 8f6:	e5 e2       	ldi	r30, 0x25	; 37
 8f8:	f0 e0       	ldi	r31, 0x00	; 0
 8fa:	80 81       	ld	r24, Z
 8fc:	88 2f       	mov	r24, r24
 8fe:	90 e0       	ldi	r25, 0x00	; 0
 900:	98 2f       	mov	r25, r24
 902:	88 27       	eor	r24, r24
 904:	9c 01       	movw	r18, r24
 906:	89 81       	ldd	r24, Y+1	; 0x01
 908:	9a 81       	ldd	r25, Y+2	; 0x02
 90a:	82 2b       	or	r24, r18
 90c:	93 2b       	or	r25, r19
 90e:	9a 83       	std	Y+2, r25	; 0x02
 910:	89 83       	std	Y+1, r24	; 0x01

	return local_u16DigitalRead;
 912:	89 81       	ldd	r24, Y+1	; 0x01
 914:	9a 81       	ldd	r25, Y+2	; 0x02
}
 916:	0f 90       	pop	r0
 918:	0f 90       	pop	r0
 91a:	0f 90       	pop	r0
 91c:	cf 91       	pop	r28
 91e:	df 91       	pop	r29
 920:	08 95       	ret

00000922 <main>:
 */
#include "ADC_int.h"
#include "../MCAL/DIO/DIO_int.h"

void main(void)
{
 922:	df 93       	push	r29
 924:	cf 93       	push	r28
 926:	00 d0       	rcall	.+0      	; 0x928 <main+0x6>
 928:	cd b7       	in	r28, 0x3d	; 61
 92a:	de b7       	in	r29, 0x3e	; 62
	u16 digital;
	ADC_vidADCInit();
 92c:	0e 94 00 04 	call	0x800	; 0x800 <ADC_vidADCInit>
	DIO_u8setPinDir(PORT_D, PIN_5, OUTPUT);
 930:	83 e0       	ldi	r24, 0x03	; 3
 932:	65 e0       	ldi	r22, 0x05	; 5
 934:	41 e0       	ldi	r20, 0x01	; 1
 936:	0e 94 18 01 	call	0x230	; 0x230 <DIO_u8setPinDir>

	while(1)
	{
		digital = ADC_u8ADCRead(0);
 93a:	80 e0       	ldi	r24, 0x00	; 0
 93c:	0e 94 3f 04 	call	0x87e	; 0x87e <ADC_u8ADCRead>
 940:	9a 83       	std	Y+2, r25	; 0x02
 942:	89 83       	std	Y+1, r24	; 0x01

//		digital >>= 2;

		if(digital >= 512)
 944:	89 81       	ldd	r24, Y+1	; 0x01
 946:	9a 81       	ldd	r25, Y+2	; 0x02
 948:	22 e0       	ldi	r18, 0x02	; 2
 94a:	80 30       	cpi	r24, 0x00	; 0
 94c:	92 07       	cpc	r25, r18
 94e:	30 f0       	brcs	.+12     	; 0x95c <main+0x3a>
		{
			DIO_u8setPinVal(PORT_D, PIN_5, HIGH);
 950:	83 e0       	ldi	r24, 0x03	; 3
 952:	65 e0       	ldi	r22, 0x05	; 5
 954:	41 e0       	ldi	r20, 0x01	; 1
 956:	0e 94 2a 02 	call	0x454	; 0x454 <DIO_u8setPinVal>
 95a:	ef cf       	rjmp	.-34     	; 0x93a <main+0x18>

		}

		else
		{
			DIO_u8setPinVal(PORT_D, PIN_5, LOW);
 95c:	83 e0       	ldi	r24, 0x03	; 3
 95e:	65 e0       	ldi	r22, 0x05	; 5
 960:	40 e0       	ldi	r20, 0x00	; 0
 962:	0e 94 2a 02 	call	0x454	; 0x454 <DIO_u8setPinVal>
 966:	e9 cf       	rjmp	.-46     	; 0x93a <main+0x18>

00000968 <_exit>:
 968:	f8 94       	cli

0000096a <__stop_program>:
 96a:	ff cf       	rjmp	.-2      	; 0x96a <__stop_program>
