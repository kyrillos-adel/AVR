
safeLock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003fb4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001a2  00800060  00003fb4  00004048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800202  00800202  000041ea  2**0
                  ALLOC
  3 .stab         0000384c  00000000  00000000  000041ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001237  00000000  00000000  00007a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00008c6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f5  00000000  00000000  00008e0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002216  00000000  00000000  00009004  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000012b8  00000000  00000000  0000b21a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001136  00000000  00000000  0000c4d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000d608  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002d2  00000000  00000000  0000d7c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000095a  00000000  00000000  0000da9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e3f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 eb       	ldi	r30, 0xB4	; 180
      68:	ff e3       	ldi	r31, 0x3F	; 63
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 30       	cpi	r26, 0x02	; 2
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a2 e0       	ldi	r26, 0x02	; 2
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 30       	cpi	r26, 0x0C	; 12
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 32 1f 	call	0x3e64	; 0x3e64 <main>
      8a:	0c 94 d8 1f 	jmp	0x3fb0	; 0x3fb0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a1 1f 	jmp	0x3f42	; 0x3f42 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 ee       	ldi	r26, 0xE7	; 231
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 bd 1f 	jmp	0x3f7a	; 0x3f7a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ad 1f 	jmp	0x3f5a	; 0x3f5a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c9 1f 	jmp	0x3f92	; 0x3f92 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ad 1f 	jmp	0x3f5a	; 0x3f5a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c9 1f 	jmp	0x3f92	; 0x3f92 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a1 1f 	jmp	0x3f42	; 0x3f42 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 ee       	ldi	r24, 0xE7	; 231
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 bd 1f 	jmp	0x3f7a	; 0x3f7a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ad 1f 	jmp	0x3f5a	; 0x3f5a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 70 06 	call	0xce0	; 0xce0 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c9 1f 	jmp	0x3f92	; 0x3f92 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ad 1f 	jmp	0x3f5a	; 0x3f5a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 70 06 	call	0xce0	; 0xce0 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c9 1f 	jmp	0x3f92	; 0x3f92 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ad 1f 	jmp	0x3f5a	; 0x3f5a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 70 06 	call	0xce0	; 0xce0 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c9 1f 	jmp	0x3f92	; 0x3f92 <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 aa 1f 	jmp	0x3f54	; 0x3f54 <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 c6 1f 	jmp	0x3f8c	; 0x3f8c <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 b1 1f 	jmp	0x3f62	; 0x3f62 <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 cd 1f 	jmp	0x3f9a	; 0x3f9a <__epilogue_restores__+0x20>

000008b6 <__floatunsisf>:
     8b6:	a8 e0       	ldi	r26, 0x08	; 8
     8b8:	b0 e0       	ldi	r27, 0x00	; 0
     8ba:	e1 e6       	ldi	r30, 0x61	; 97
     8bc:	f4 e0       	ldi	r31, 0x04	; 4
     8be:	0c 94 a9 1f 	jmp	0x3f52	; 0x3f52 <__prologue_saves__+0x10>
     8c2:	7b 01       	movw	r14, r22
     8c4:	8c 01       	movw	r16, r24
     8c6:	61 15       	cp	r22, r1
     8c8:	71 05       	cpc	r23, r1
     8ca:	81 05       	cpc	r24, r1
     8cc:	91 05       	cpc	r25, r1
     8ce:	19 f4       	brne	.+6      	; 0x8d6 <__floatunsisf+0x20>
     8d0:	82 e0       	ldi	r24, 0x02	; 2
     8d2:	89 83       	std	Y+1, r24	; 0x01
     8d4:	60 c0       	rjmp	.+192    	; 0x996 <__floatunsisf+0xe0>
     8d6:	83 e0       	ldi	r24, 0x03	; 3
     8d8:	89 83       	std	Y+1, r24	; 0x01
     8da:	8e e1       	ldi	r24, 0x1E	; 30
     8dc:	c8 2e       	mov	r12, r24
     8de:	d1 2c       	mov	r13, r1
     8e0:	dc 82       	std	Y+4, r13	; 0x04
     8e2:	cb 82       	std	Y+3, r12	; 0x03
     8e4:	ed 82       	std	Y+5, r14	; 0x05
     8e6:	fe 82       	std	Y+6, r15	; 0x06
     8e8:	0f 83       	std	Y+7, r16	; 0x07
     8ea:	18 87       	std	Y+8, r17	; 0x08
     8ec:	c8 01       	movw	r24, r16
     8ee:	b7 01       	movw	r22, r14
     8f0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__clzsi2>
     8f4:	fc 01       	movw	r30, r24
     8f6:	31 97       	sbiw	r30, 0x01	; 1
     8f8:	f7 ff       	sbrs	r31, 7
     8fa:	3b c0       	rjmp	.+118    	; 0x972 <__floatunsisf+0xbc>
     8fc:	22 27       	eor	r18, r18
     8fe:	33 27       	eor	r19, r19
     900:	2e 1b       	sub	r18, r30
     902:	3f 0b       	sbc	r19, r31
     904:	57 01       	movw	r10, r14
     906:	68 01       	movw	r12, r16
     908:	02 2e       	mov	r0, r18
     90a:	04 c0       	rjmp	.+8      	; 0x914 <__floatunsisf+0x5e>
     90c:	d6 94       	lsr	r13
     90e:	c7 94       	ror	r12
     910:	b7 94       	ror	r11
     912:	a7 94       	ror	r10
     914:	0a 94       	dec	r0
     916:	d2 f7       	brpl	.-12     	; 0x90c <__floatunsisf+0x56>
     918:	40 e0       	ldi	r20, 0x00	; 0
     91a:	50 e0       	ldi	r21, 0x00	; 0
     91c:	60 e0       	ldi	r22, 0x00	; 0
     91e:	70 e0       	ldi	r23, 0x00	; 0
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	a0 e0       	ldi	r26, 0x00	; 0
     926:	b0 e0       	ldi	r27, 0x00	; 0
     928:	04 c0       	rjmp	.+8      	; 0x932 <__floatunsisf+0x7c>
     92a:	88 0f       	add	r24, r24
     92c:	99 1f       	adc	r25, r25
     92e:	aa 1f       	adc	r26, r26
     930:	bb 1f       	adc	r27, r27
     932:	2a 95       	dec	r18
     934:	d2 f7       	brpl	.-12     	; 0x92a <__floatunsisf+0x74>
     936:	01 97       	sbiw	r24, 0x01	; 1
     938:	a1 09       	sbc	r26, r1
     93a:	b1 09       	sbc	r27, r1
     93c:	8e 21       	and	r24, r14
     93e:	9f 21       	and	r25, r15
     940:	a0 23       	and	r26, r16
     942:	b1 23       	and	r27, r17
     944:	00 97       	sbiw	r24, 0x00	; 0
     946:	a1 05       	cpc	r26, r1
     948:	b1 05       	cpc	r27, r1
     94a:	21 f0       	breq	.+8      	; 0x954 <__floatunsisf+0x9e>
     94c:	41 e0       	ldi	r20, 0x01	; 1
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	60 e0       	ldi	r22, 0x00	; 0
     952:	70 e0       	ldi	r23, 0x00	; 0
     954:	4a 29       	or	r20, r10
     956:	5b 29       	or	r21, r11
     958:	6c 29       	or	r22, r12
     95a:	7d 29       	or	r23, r13
     95c:	4d 83       	std	Y+5, r20	; 0x05
     95e:	5e 83       	std	Y+6, r21	; 0x06
     960:	6f 83       	std	Y+7, r22	; 0x07
     962:	78 87       	std	Y+8, r23	; 0x08
     964:	8e e1       	ldi	r24, 0x1E	; 30
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	8e 1b       	sub	r24, r30
     96a:	9f 0b       	sbc	r25, r31
     96c:	9c 83       	std	Y+4, r25	; 0x04
     96e:	8b 83       	std	Y+3, r24	; 0x03
     970:	12 c0       	rjmp	.+36     	; 0x996 <__floatunsisf+0xe0>
     972:	30 97       	sbiw	r30, 0x00	; 0
     974:	81 f0       	breq	.+32     	; 0x996 <__floatunsisf+0xe0>
     976:	0e 2e       	mov	r0, r30
     978:	04 c0       	rjmp	.+8      	; 0x982 <__floatunsisf+0xcc>
     97a:	ee 0c       	add	r14, r14
     97c:	ff 1c       	adc	r15, r15
     97e:	00 1f       	adc	r16, r16
     980:	11 1f       	adc	r17, r17
     982:	0a 94       	dec	r0
     984:	d2 f7       	brpl	.-12     	; 0x97a <__floatunsisf+0xc4>
     986:	ed 82       	std	Y+5, r14	; 0x05
     988:	fe 82       	std	Y+6, r15	; 0x06
     98a:	0f 83       	std	Y+7, r16	; 0x07
     98c:	18 87       	std	Y+8, r17	; 0x08
     98e:	ce 1a       	sub	r12, r30
     990:	df 0a       	sbc	r13, r31
     992:	dc 82       	std	Y+4, r13	; 0x04
     994:	cb 82       	std	Y+3, r12	; 0x03
     996:	1a 82       	std	Y+2, r1	; 0x02
     998:	ce 01       	movw	r24, r28
     99a:	01 96       	adiw	r24, 0x01	; 1
     99c:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     9a0:	28 96       	adiw	r28, 0x08	; 8
     9a2:	ea e0       	ldi	r30, 0x0A	; 10
     9a4:	0c 94 c5 1f 	jmp	0x3f8a	; 0x3f8a <__epilogue_restores__+0x10>

000009a8 <__clzsi2>:
     9a8:	ef 92       	push	r14
     9aa:	ff 92       	push	r15
     9ac:	0f 93       	push	r16
     9ae:	1f 93       	push	r17
     9b0:	7b 01       	movw	r14, r22
     9b2:	8c 01       	movw	r16, r24
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	e8 16       	cp	r14, r24
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	f8 06       	cpc	r15, r24
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	08 07       	cpc	r16, r24
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	18 07       	cpc	r17, r24
     9c4:	88 f4       	brcc	.+34     	; 0x9e8 <__clzsi2+0x40>
     9c6:	8f ef       	ldi	r24, 0xFF	; 255
     9c8:	e8 16       	cp	r14, r24
     9ca:	f1 04       	cpc	r15, r1
     9cc:	01 05       	cpc	r16, r1
     9ce:	11 05       	cpc	r17, r1
     9d0:	31 f0       	breq	.+12     	; 0x9de <__clzsi2+0x36>
     9d2:	28 f0       	brcs	.+10     	; 0x9de <__clzsi2+0x36>
     9d4:	88 e0       	ldi	r24, 0x08	; 8
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	a0 e0       	ldi	r26, 0x00	; 0
     9da:	b0 e0       	ldi	r27, 0x00	; 0
     9dc:	17 c0       	rjmp	.+46     	; 0xa0c <__clzsi2+0x64>
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	12 c0       	rjmp	.+36     	; 0xa0c <__clzsi2+0x64>
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	e8 16       	cp	r14, r24
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	f8 06       	cpc	r15, r24
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	08 07       	cpc	r16, r24
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	18 07       	cpc	r17, r24
     9f8:	28 f0       	brcs	.+10     	; 0xa04 <__clzsi2+0x5c>
     9fa:	88 e1       	ldi	r24, 0x18	; 24
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	a0 e0       	ldi	r26, 0x00	; 0
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	04 c0       	rjmp	.+8      	; 0xa0c <__clzsi2+0x64>
     a04:	80 e1       	ldi	r24, 0x10	; 16
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	a0 e0       	ldi	r26, 0x00	; 0
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	20 e2       	ldi	r18, 0x20	; 32
     a0e:	30 e0       	ldi	r19, 0x00	; 0
     a10:	40 e0       	ldi	r20, 0x00	; 0
     a12:	50 e0       	ldi	r21, 0x00	; 0
     a14:	28 1b       	sub	r18, r24
     a16:	39 0b       	sbc	r19, r25
     a18:	4a 0b       	sbc	r20, r26
     a1a:	5b 0b       	sbc	r21, r27
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__clzsi2+0x7e>
     a1e:	16 95       	lsr	r17
     a20:	07 95       	ror	r16
     a22:	f7 94       	ror	r15
     a24:	e7 94       	ror	r14
     a26:	8a 95       	dec	r24
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__clzsi2+0x76>
     a2a:	f7 01       	movw	r30, r14
     a2c:	e1 51       	subi	r30, 0x11	; 17
     a2e:	ff 4f       	sbci	r31, 0xFF	; 255
     a30:	80 81       	ld	r24, Z
     a32:	28 1b       	sub	r18, r24
     a34:	31 09       	sbc	r19, r1
     a36:	41 09       	sbc	r20, r1
     a38:	51 09       	sbc	r21, r1
     a3a:	c9 01       	movw	r24, r18
     a3c:	1f 91       	pop	r17
     a3e:	0f 91       	pop	r16
     a40:	ff 90       	pop	r15
     a42:	ef 90       	pop	r14
     a44:	08 95       	ret

00000a46 <__pack_f>:
     a46:	df 92       	push	r13
     a48:	ef 92       	push	r14
     a4a:	ff 92       	push	r15
     a4c:	0f 93       	push	r16
     a4e:	1f 93       	push	r17
     a50:	fc 01       	movw	r30, r24
     a52:	e4 80       	ldd	r14, Z+4	; 0x04
     a54:	f5 80       	ldd	r15, Z+5	; 0x05
     a56:	06 81       	ldd	r16, Z+6	; 0x06
     a58:	17 81       	ldd	r17, Z+7	; 0x07
     a5a:	d1 80       	ldd	r13, Z+1	; 0x01
     a5c:	80 81       	ld	r24, Z
     a5e:	82 30       	cpi	r24, 0x02	; 2
     a60:	48 f4       	brcc	.+18     	; 0xa74 <__pack_f+0x2e>
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	a0 e1       	ldi	r26, 0x10	; 16
     a68:	b0 e0       	ldi	r27, 0x00	; 0
     a6a:	e8 2a       	or	r14, r24
     a6c:	f9 2a       	or	r15, r25
     a6e:	0a 2b       	or	r16, r26
     a70:	1b 2b       	or	r17, r27
     a72:	a5 c0       	rjmp	.+330    	; 0xbbe <__pack_f+0x178>
     a74:	84 30       	cpi	r24, 0x04	; 4
     a76:	09 f4       	brne	.+2      	; 0xa7a <__pack_f+0x34>
     a78:	9f c0       	rjmp	.+318    	; 0xbb8 <__pack_f+0x172>
     a7a:	82 30       	cpi	r24, 0x02	; 2
     a7c:	21 f4       	brne	.+8      	; 0xa86 <__pack_f+0x40>
     a7e:	ee 24       	eor	r14, r14
     a80:	ff 24       	eor	r15, r15
     a82:	87 01       	movw	r16, r14
     a84:	05 c0       	rjmp	.+10     	; 0xa90 <__pack_f+0x4a>
     a86:	e1 14       	cp	r14, r1
     a88:	f1 04       	cpc	r15, r1
     a8a:	01 05       	cpc	r16, r1
     a8c:	11 05       	cpc	r17, r1
     a8e:	19 f4       	brne	.+6      	; 0xa96 <__pack_f+0x50>
     a90:	e0 e0       	ldi	r30, 0x00	; 0
     a92:	f0 e0       	ldi	r31, 0x00	; 0
     a94:	96 c0       	rjmp	.+300    	; 0xbc2 <__pack_f+0x17c>
     a96:	62 81       	ldd	r22, Z+2	; 0x02
     a98:	73 81       	ldd	r23, Z+3	; 0x03
     a9a:	9f ef       	ldi	r25, 0xFF	; 255
     a9c:	62 38       	cpi	r22, 0x82	; 130
     a9e:	79 07       	cpc	r23, r25
     aa0:	0c f0       	brlt	.+2      	; 0xaa4 <__pack_f+0x5e>
     aa2:	5b c0       	rjmp	.+182    	; 0xb5a <__pack_f+0x114>
     aa4:	22 e8       	ldi	r18, 0x82	; 130
     aa6:	3f ef       	ldi	r19, 0xFF	; 255
     aa8:	26 1b       	sub	r18, r22
     aaa:	37 0b       	sbc	r19, r23
     aac:	2a 31       	cpi	r18, 0x1A	; 26
     aae:	31 05       	cpc	r19, r1
     ab0:	2c f0       	brlt	.+10     	; 0xabc <__pack_f+0x76>
     ab2:	20 e0       	ldi	r18, 0x00	; 0
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	40 e0       	ldi	r20, 0x00	; 0
     ab8:	50 e0       	ldi	r21, 0x00	; 0
     aba:	2a c0       	rjmp	.+84     	; 0xb10 <__pack_f+0xca>
     abc:	b8 01       	movw	r22, r16
     abe:	a7 01       	movw	r20, r14
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__pack_f+0x86>
     ac4:	76 95       	lsr	r23
     ac6:	67 95       	ror	r22
     ac8:	57 95       	ror	r21
     aca:	47 95       	ror	r20
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__pack_f+0x7e>
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	04 c0       	rjmp	.+8      	; 0xae2 <__pack_f+0x9c>
     ada:	88 0f       	add	r24, r24
     adc:	99 1f       	adc	r25, r25
     ade:	aa 1f       	adc	r26, r26
     ae0:	bb 1f       	adc	r27, r27
     ae2:	2a 95       	dec	r18
     ae4:	d2 f7       	brpl	.-12     	; 0xada <__pack_f+0x94>
     ae6:	01 97       	sbiw	r24, 0x01	; 1
     ae8:	a1 09       	sbc	r26, r1
     aea:	b1 09       	sbc	r27, r1
     aec:	8e 21       	and	r24, r14
     aee:	9f 21       	and	r25, r15
     af0:	a0 23       	and	r26, r16
     af2:	b1 23       	and	r27, r17
     af4:	00 97       	sbiw	r24, 0x00	; 0
     af6:	a1 05       	cpc	r26, r1
     af8:	b1 05       	cpc	r27, r1
     afa:	21 f0       	breq	.+8      	; 0xb04 <__pack_f+0xbe>
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	a0 e0       	ldi	r26, 0x00	; 0
     b02:	b0 e0       	ldi	r27, 0x00	; 0
     b04:	9a 01       	movw	r18, r20
     b06:	ab 01       	movw	r20, r22
     b08:	28 2b       	or	r18, r24
     b0a:	39 2b       	or	r19, r25
     b0c:	4a 2b       	or	r20, r26
     b0e:	5b 2b       	or	r21, r27
     b10:	da 01       	movw	r26, r20
     b12:	c9 01       	movw	r24, r18
     b14:	8f 77       	andi	r24, 0x7F	; 127
     b16:	90 70       	andi	r25, 0x00	; 0
     b18:	a0 70       	andi	r26, 0x00	; 0
     b1a:	b0 70       	andi	r27, 0x00	; 0
     b1c:	80 34       	cpi	r24, 0x40	; 64
     b1e:	91 05       	cpc	r25, r1
     b20:	a1 05       	cpc	r26, r1
     b22:	b1 05       	cpc	r27, r1
     b24:	39 f4       	brne	.+14     	; 0xb34 <__pack_f+0xee>
     b26:	27 ff       	sbrs	r18, 7
     b28:	09 c0       	rjmp	.+18     	; 0xb3c <__pack_f+0xf6>
     b2a:	20 5c       	subi	r18, 0xC0	; 192
     b2c:	3f 4f       	sbci	r19, 0xFF	; 255
     b2e:	4f 4f       	sbci	r20, 0xFF	; 255
     b30:	5f 4f       	sbci	r21, 0xFF	; 255
     b32:	04 c0       	rjmp	.+8      	; 0xb3c <__pack_f+0xf6>
     b34:	21 5c       	subi	r18, 0xC1	; 193
     b36:	3f 4f       	sbci	r19, 0xFF	; 255
     b38:	4f 4f       	sbci	r20, 0xFF	; 255
     b3a:	5f 4f       	sbci	r21, 0xFF	; 255
     b3c:	e0 e0       	ldi	r30, 0x00	; 0
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	20 30       	cpi	r18, 0x00	; 0
     b42:	a0 e0       	ldi	r26, 0x00	; 0
     b44:	3a 07       	cpc	r19, r26
     b46:	a0 e0       	ldi	r26, 0x00	; 0
     b48:	4a 07       	cpc	r20, r26
     b4a:	a0 e4       	ldi	r26, 0x40	; 64
     b4c:	5a 07       	cpc	r21, r26
     b4e:	10 f0       	brcs	.+4      	; 0xb54 <__pack_f+0x10e>
     b50:	e1 e0       	ldi	r30, 0x01	; 1
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	79 01       	movw	r14, r18
     b56:	8a 01       	movw	r16, r20
     b58:	27 c0       	rjmp	.+78     	; 0xba8 <__pack_f+0x162>
     b5a:	60 38       	cpi	r22, 0x80	; 128
     b5c:	71 05       	cpc	r23, r1
     b5e:	64 f5       	brge	.+88     	; 0xbb8 <__pack_f+0x172>
     b60:	fb 01       	movw	r30, r22
     b62:	e1 58       	subi	r30, 0x81	; 129
     b64:	ff 4f       	sbci	r31, 0xFF	; 255
     b66:	d8 01       	movw	r26, r16
     b68:	c7 01       	movw	r24, r14
     b6a:	8f 77       	andi	r24, 0x7F	; 127
     b6c:	90 70       	andi	r25, 0x00	; 0
     b6e:	a0 70       	andi	r26, 0x00	; 0
     b70:	b0 70       	andi	r27, 0x00	; 0
     b72:	80 34       	cpi	r24, 0x40	; 64
     b74:	91 05       	cpc	r25, r1
     b76:	a1 05       	cpc	r26, r1
     b78:	b1 05       	cpc	r27, r1
     b7a:	39 f4       	brne	.+14     	; 0xb8a <__pack_f+0x144>
     b7c:	e7 fe       	sbrs	r14, 7
     b7e:	0d c0       	rjmp	.+26     	; 0xb9a <__pack_f+0x154>
     b80:	80 e4       	ldi	r24, 0x40	; 64
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	a0 e0       	ldi	r26, 0x00	; 0
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	04 c0       	rjmp	.+8      	; 0xb92 <__pack_f+0x14c>
     b8a:	8f e3       	ldi	r24, 0x3F	; 63
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	a0 e0       	ldi	r26, 0x00	; 0
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	e8 0e       	add	r14, r24
     b94:	f9 1e       	adc	r15, r25
     b96:	0a 1f       	adc	r16, r26
     b98:	1b 1f       	adc	r17, r27
     b9a:	17 ff       	sbrs	r17, 7
     b9c:	05 c0       	rjmp	.+10     	; 0xba8 <__pack_f+0x162>
     b9e:	16 95       	lsr	r17
     ba0:	07 95       	ror	r16
     ba2:	f7 94       	ror	r15
     ba4:	e7 94       	ror	r14
     ba6:	31 96       	adiw	r30, 0x01	; 1
     ba8:	87 e0       	ldi	r24, 0x07	; 7
     baa:	16 95       	lsr	r17
     bac:	07 95       	ror	r16
     bae:	f7 94       	ror	r15
     bb0:	e7 94       	ror	r14
     bb2:	8a 95       	dec	r24
     bb4:	d1 f7       	brne	.-12     	; 0xbaa <__pack_f+0x164>
     bb6:	05 c0       	rjmp	.+10     	; 0xbc2 <__pack_f+0x17c>
     bb8:	ee 24       	eor	r14, r14
     bba:	ff 24       	eor	r15, r15
     bbc:	87 01       	movw	r16, r14
     bbe:	ef ef       	ldi	r30, 0xFF	; 255
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	6e 2f       	mov	r22, r30
     bc4:	67 95       	ror	r22
     bc6:	66 27       	eor	r22, r22
     bc8:	67 95       	ror	r22
     bca:	90 2f       	mov	r25, r16
     bcc:	9f 77       	andi	r25, 0x7F	; 127
     bce:	d7 94       	ror	r13
     bd0:	dd 24       	eor	r13, r13
     bd2:	d7 94       	ror	r13
     bd4:	8e 2f       	mov	r24, r30
     bd6:	86 95       	lsr	r24
     bd8:	49 2f       	mov	r20, r25
     bda:	46 2b       	or	r20, r22
     bdc:	58 2f       	mov	r21, r24
     bde:	5d 29       	or	r21, r13
     be0:	b7 01       	movw	r22, r14
     be2:	ca 01       	movw	r24, r20
     be4:	1f 91       	pop	r17
     be6:	0f 91       	pop	r16
     be8:	ff 90       	pop	r15
     bea:	ef 90       	pop	r14
     bec:	df 90       	pop	r13
     bee:	08 95       	ret

00000bf0 <__unpack_f>:
     bf0:	fc 01       	movw	r30, r24
     bf2:	db 01       	movw	r26, r22
     bf4:	40 81       	ld	r20, Z
     bf6:	51 81       	ldd	r21, Z+1	; 0x01
     bf8:	22 81       	ldd	r18, Z+2	; 0x02
     bfa:	62 2f       	mov	r22, r18
     bfc:	6f 77       	andi	r22, 0x7F	; 127
     bfe:	70 e0       	ldi	r23, 0x00	; 0
     c00:	22 1f       	adc	r18, r18
     c02:	22 27       	eor	r18, r18
     c04:	22 1f       	adc	r18, r18
     c06:	93 81       	ldd	r25, Z+3	; 0x03
     c08:	89 2f       	mov	r24, r25
     c0a:	88 0f       	add	r24, r24
     c0c:	82 2b       	or	r24, r18
     c0e:	28 2f       	mov	r18, r24
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	99 1f       	adc	r25, r25
     c14:	99 27       	eor	r25, r25
     c16:	99 1f       	adc	r25, r25
     c18:	11 96       	adiw	r26, 0x01	; 1
     c1a:	9c 93       	st	X, r25
     c1c:	11 97       	sbiw	r26, 0x01	; 1
     c1e:	21 15       	cp	r18, r1
     c20:	31 05       	cpc	r19, r1
     c22:	a9 f5       	brne	.+106    	; 0xc8e <__unpack_f+0x9e>
     c24:	41 15       	cp	r20, r1
     c26:	51 05       	cpc	r21, r1
     c28:	61 05       	cpc	r22, r1
     c2a:	71 05       	cpc	r23, r1
     c2c:	11 f4       	brne	.+4      	; 0xc32 <__unpack_f+0x42>
     c2e:	82 e0       	ldi	r24, 0x02	; 2
     c30:	37 c0       	rjmp	.+110    	; 0xca0 <__unpack_f+0xb0>
     c32:	82 e8       	ldi	r24, 0x82	; 130
     c34:	9f ef       	ldi	r25, 0xFF	; 255
     c36:	13 96       	adiw	r26, 0x03	; 3
     c38:	9c 93       	st	X, r25
     c3a:	8e 93       	st	-X, r24
     c3c:	12 97       	sbiw	r26, 0x02	; 2
     c3e:	9a 01       	movw	r18, r20
     c40:	ab 01       	movw	r20, r22
     c42:	67 e0       	ldi	r22, 0x07	; 7
     c44:	22 0f       	add	r18, r18
     c46:	33 1f       	adc	r19, r19
     c48:	44 1f       	adc	r20, r20
     c4a:	55 1f       	adc	r21, r21
     c4c:	6a 95       	dec	r22
     c4e:	d1 f7       	brne	.-12     	; 0xc44 <__unpack_f+0x54>
     c50:	83 e0       	ldi	r24, 0x03	; 3
     c52:	8c 93       	st	X, r24
     c54:	0d c0       	rjmp	.+26     	; 0xc70 <__unpack_f+0x80>
     c56:	22 0f       	add	r18, r18
     c58:	33 1f       	adc	r19, r19
     c5a:	44 1f       	adc	r20, r20
     c5c:	55 1f       	adc	r21, r21
     c5e:	12 96       	adiw	r26, 0x02	; 2
     c60:	8d 91       	ld	r24, X+
     c62:	9c 91       	ld	r25, X
     c64:	13 97       	sbiw	r26, 0x03	; 3
     c66:	01 97       	sbiw	r24, 0x01	; 1
     c68:	13 96       	adiw	r26, 0x03	; 3
     c6a:	9c 93       	st	X, r25
     c6c:	8e 93       	st	-X, r24
     c6e:	12 97       	sbiw	r26, 0x02	; 2
     c70:	20 30       	cpi	r18, 0x00	; 0
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	38 07       	cpc	r19, r24
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	48 07       	cpc	r20, r24
     c7a:	80 e4       	ldi	r24, 0x40	; 64
     c7c:	58 07       	cpc	r21, r24
     c7e:	58 f3       	brcs	.-42     	; 0xc56 <__unpack_f+0x66>
     c80:	14 96       	adiw	r26, 0x04	; 4
     c82:	2d 93       	st	X+, r18
     c84:	3d 93       	st	X+, r19
     c86:	4d 93       	st	X+, r20
     c88:	5c 93       	st	X, r21
     c8a:	17 97       	sbiw	r26, 0x07	; 7
     c8c:	08 95       	ret
     c8e:	2f 3f       	cpi	r18, 0xFF	; 255
     c90:	31 05       	cpc	r19, r1
     c92:	79 f4       	brne	.+30     	; 0xcb2 <__unpack_f+0xc2>
     c94:	41 15       	cp	r20, r1
     c96:	51 05       	cpc	r21, r1
     c98:	61 05       	cpc	r22, r1
     c9a:	71 05       	cpc	r23, r1
     c9c:	19 f4       	brne	.+6      	; 0xca4 <__unpack_f+0xb4>
     c9e:	84 e0       	ldi	r24, 0x04	; 4
     ca0:	8c 93       	st	X, r24
     ca2:	08 95       	ret
     ca4:	64 ff       	sbrs	r22, 4
     ca6:	03 c0       	rjmp	.+6      	; 0xcae <__unpack_f+0xbe>
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	8c 93       	st	X, r24
     cac:	12 c0       	rjmp	.+36     	; 0xcd2 <__unpack_f+0xe2>
     cae:	1c 92       	st	X, r1
     cb0:	10 c0       	rjmp	.+32     	; 0xcd2 <__unpack_f+0xe2>
     cb2:	2f 57       	subi	r18, 0x7F	; 127
     cb4:	30 40       	sbci	r19, 0x00	; 0
     cb6:	13 96       	adiw	r26, 0x03	; 3
     cb8:	3c 93       	st	X, r19
     cba:	2e 93       	st	-X, r18
     cbc:	12 97       	sbiw	r26, 0x02	; 2
     cbe:	83 e0       	ldi	r24, 0x03	; 3
     cc0:	8c 93       	st	X, r24
     cc2:	87 e0       	ldi	r24, 0x07	; 7
     cc4:	44 0f       	add	r20, r20
     cc6:	55 1f       	adc	r21, r21
     cc8:	66 1f       	adc	r22, r22
     cca:	77 1f       	adc	r23, r23
     ccc:	8a 95       	dec	r24
     cce:	d1 f7       	brne	.-12     	; 0xcc4 <__unpack_f+0xd4>
     cd0:	70 64       	ori	r23, 0x40	; 64
     cd2:	14 96       	adiw	r26, 0x04	; 4
     cd4:	4d 93       	st	X+, r20
     cd6:	5d 93       	st	X+, r21
     cd8:	6d 93       	st	X+, r22
     cda:	7c 93       	st	X, r23
     cdc:	17 97       	sbiw	r26, 0x07	; 7
     cde:	08 95       	ret

00000ce0 <__fpcmp_parts_f>:
     ce0:	1f 93       	push	r17
     ce2:	dc 01       	movw	r26, r24
     ce4:	fb 01       	movw	r30, r22
     ce6:	9c 91       	ld	r25, X
     ce8:	92 30       	cpi	r25, 0x02	; 2
     cea:	08 f4       	brcc	.+2      	; 0xcee <__fpcmp_parts_f+0xe>
     cec:	47 c0       	rjmp	.+142    	; 0xd7c <__fpcmp_parts_f+0x9c>
     cee:	80 81       	ld	r24, Z
     cf0:	82 30       	cpi	r24, 0x02	; 2
     cf2:	08 f4       	brcc	.+2      	; 0xcf6 <__fpcmp_parts_f+0x16>
     cf4:	43 c0       	rjmp	.+134    	; 0xd7c <__fpcmp_parts_f+0x9c>
     cf6:	94 30       	cpi	r25, 0x04	; 4
     cf8:	51 f4       	brne	.+20     	; 0xd0e <__fpcmp_parts_f+0x2e>
     cfa:	11 96       	adiw	r26, 0x01	; 1
     cfc:	1c 91       	ld	r17, X
     cfe:	84 30       	cpi	r24, 0x04	; 4
     d00:	99 f5       	brne	.+102    	; 0xd68 <__fpcmp_parts_f+0x88>
     d02:	81 81       	ldd	r24, Z+1	; 0x01
     d04:	68 2f       	mov	r22, r24
     d06:	70 e0       	ldi	r23, 0x00	; 0
     d08:	61 1b       	sub	r22, r17
     d0a:	71 09       	sbc	r23, r1
     d0c:	3f c0       	rjmp	.+126    	; 0xd8c <__fpcmp_parts_f+0xac>
     d0e:	84 30       	cpi	r24, 0x04	; 4
     d10:	21 f0       	breq	.+8      	; 0xd1a <__fpcmp_parts_f+0x3a>
     d12:	92 30       	cpi	r25, 0x02	; 2
     d14:	31 f4       	brne	.+12     	; 0xd22 <__fpcmp_parts_f+0x42>
     d16:	82 30       	cpi	r24, 0x02	; 2
     d18:	b9 f1       	breq	.+110    	; 0xd88 <__fpcmp_parts_f+0xa8>
     d1a:	81 81       	ldd	r24, Z+1	; 0x01
     d1c:	88 23       	and	r24, r24
     d1e:	89 f1       	breq	.+98     	; 0xd82 <__fpcmp_parts_f+0xa2>
     d20:	2d c0       	rjmp	.+90     	; 0xd7c <__fpcmp_parts_f+0x9c>
     d22:	11 96       	adiw	r26, 0x01	; 1
     d24:	1c 91       	ld	r17, X
     d26:	11 97       	sbiw	r26, 0x01	; 1
     d28:	82 30       	cpi	r24, 0x02	; 2
     d2a:	f1 f0       	breq	.+60     	; 0xd68 <__fpcmp_parts_f+0x88>
     d2c:	81 81       	ldd	r24, Z+1	; 0x01
     d2e:	18 17       	cp	r17, r24
     d30:	d9 f4       	brne	.+54     	; 0xd68 <__fpcmp_parts_f+0x88>
     d32:	12 96       	adiw	r26, 0x02	; 2
     d34:	2d 91       	ld	r18, X+
     d36:	3c 91       	ld	r19, X
     d38:	13 97       	sbiw	r26, 0x03	; 3
     d3a:	82 81       	ldd	r24, Z+2	; 0x02
     d3c:	93 81       	ldd	r25, Z+3	; 0x03
     d3e:	82 17       	cp	r24, r18
     d40:	93 07       	cpc	r25, r19
     d42:	94 f0       	brlt	.+36     	; 0xd68 <__fpcmp_parts_f+0x88>
     d44:	28 17       	cp	r18, r24
     d46:	39 07       	cpc	r19, r25
     d48:	bc f0       	brlt	.+46     	; 0xd78 <__fpcmp_parts_f+0x98>
     d4a:	14 96       	adiw	r26, 0x04	; 4
     d4c:	8d 91       	ld	r24, X+
     d4e:	9d 91       	ld	r25, X+
     d50:	0d 90       	ld	r0, X+
     d52:	bc 91       	ld	r27, X
     d54:	a0 2d       	mov	r26, r0
     d56:	24 81       	ldd	r18, Z+4	; 0x04
     d58:	35 81       	ldd	r19, Z+5	; 0x05
     d5a:	46 81       	ldd	r20, Z+6	; 0x06
     d5c:	57 81       	ldd	r21, Z+7	; 0x07
     d5e:	28 17       	cp	r18, r24
     d60:	39 07       	cpc	r19, r25
     d62:	4a 07       	cpc	r20, r26
     d64:	5b 07       	cpc	r21, r27
     d66:	18 f4       	brcc	.+6      	; 0xd6e <__fpcmp_parts_f+0x8e>
     d68:	11 23       	and	r17, r17
     d6a:	41 f0       	breq	.+16     	; 0xd7c <__fpcmp_parts_f+0x9c>
     d6c:	0a c0       	rjmp	.+20     	; 0xd82 <__fpcmp_parts_f+0xa2>
     d6e:	82 17       	cp	r24, r18
     d70:	93 07       	cpc	r25, r19
     d72:	a4 07       	cpc	r26, r20
     d74:	b5 07       	cpc	r27, r21
     d76:	40 f4       	brcc	.+16     	; 0xd88 <__fpcmp_parts_f+0xa8>
     d78:	11 23       	and	r17, r17
     d7a:	19 f0       	breq	.+6      	; 0xd82 <__fpcmp_parts_f+0xa2>
     d7c:	61 e0       	ldi	r22, 0x01	; 1
     d7e:	70 e0       	ldi	r23, 0x00	; 0
     d80:	05 c0       	rjmp	.+10     	; 0xd8c <__fpcmp_parts_f+0xac>
     d82:	6f ef       	ldi	r22, 0xFF	; 255
     d84:	7f ef       	ldi	r23, 0xFF	; 255
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <__fpcmp_parts_f+0xac>
     d88:	60 e0       	ldi	r22, 0x00	; 0
     d8a:	70 e0       	ldi	r23, 0x00	; 0
     d8c:	cb 01       	movw	r24, r22
     d8e:	1f 91       	pop	r17
     d90:	08 95       	ret

00000d92 <DIO_u8setPortDir>:
#include "DIO_Reg.h"
#include "../../Libs/bitmath.h"

/*PORT level*/
u8 DIO_u8setPortDir(u8 Copy_u8port , u8 Copy_u8dir)
{
     d92:	df 93       	push	r29
     d94:	cf 93       	push	r28
     d96:	00 d0       	rcall	.+0      	; 0xd98 <DIO_u8setPortDir+0x6>
     d98:	00 d0       	rcall	.+0      	; 0xd9a <DIO_u8setPortDir+0x8>
     d9a:	0f 92       	push	r0
     d9c:	cd b7       	in	r28, 0x3d	; 61
     d9e:	de b7       	in	r29, 0x3e	; 62
     da0:	8a 83       	std	Y+2, r24	; 0x02
     da2:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8errStatus = RT_OK ;
     da4:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8port)
     da6:	8a 81       	ldd	r24, Y+2	; 0x02
     da8:	28 2f       	mov	r18, r24
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	3d 83       	std	Y+5, r19	; 0x05
     dae:	2c 83       	std	Y+4, r18	; 0x04
     db0:	8c 81       	ldd	r24, Y+4	; 0x04
     db2:	9d 81       	ldd	r25, Y+5	; 0x05
     db4:	81 30       	cpi	r24, 0x01	; 1
     db6:	91 05       	cpc	r25, r1
     db8:	d1 f0       	breq	.+52     	; 0xdee <DIO_u8setPortDir+0x5c>
     dba:	2c 81       	ldd	r18, Y+4	; 0x04
     dbc:	3d 81       	ldd	r19, Y+5	; 0x05
     dbe:	22 30       	cpi	r18, 0x02	; 2
     dc0:	31 05       	cpc	r19, r1
     dc2:	2c f4       	brge	.+10     	; 0xdce <DIO_u8setPortDir+0x3c>
     dc4:	8c 81       	ldd	r24, Y+4	; 0x04
     dc6:	9d 81       	ldd	r25, Y+5	; 0x05
     dc8:	00 97       	sbiw	r24, 0x00	; 0
     dca:	61 f0       	breq	.+24     	; 0xde4 <DIO_u8setPortDir+0x52>
     dcc:	1f c0       	rjmp	.+62     	; 0xe0c <DIO_u8setPortDir+0x7a>
     dce:	2c 81       	ldd	r18, Y+4	; 0x04
     dd0:	3d 81       	ldd	r19, Y+5	; 0x05
     dd2:	22 30       	cpi	r18, 0x02	; 2
     dd4:	31 05       	cpc	r19, r1
     dd6:	81 f0       	breq	.+32     	; 0xdf8 <DIO_u8setPortDir+0x66>
     dd8:	8c 81       	ldd	r24, Y+4	; 0x04
     dda:	9d 81       	ldd	r25, Y+5	; 0x05
     ddc:	83 30       	cpi	r24, 0x03	; 3
     dde:	91 05       	cpc	r25, r1
     de0:	81 f0       	breq	.+32     	; 0xe02 <DIO_u8setPortDir+0x70>
     de2:	14 c0       	rjmp	.+40     	; 0xe0c <DIO_u8setPortDir+0x7a>
	{
	case PORT_A:
		DDRA_REG=Copy_u8dir;
     de4:	ea e3       	ldi	r30, 0x3A	; 58
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	8b 81       	ldd	r24, Y+3	; 0x03
     dea:	80 83       	st	Z, r24
     dec:	11 c0       	rjmp	.+34     	; 0xe10 <DIO_u8setPortDir+0x7e>
		break;
	case PORT_B:
		DDRB_REG=Copy_u8dir;
     dee:	e7 e3       	ldi	r30, 0x37	; 55
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	8b 81       	ldd	r24, Y+3	; 0x03
     df4:	80 83       	st	Z, r24
     df6:	0c c0       	rjmp	.+24     	; 0xe10 <DIO_u8setPortDir+0x7e>
		break;
	case PORT_C:
		DDRC_REG=Copy_u8dir;
     df8:	e4 e3       	ldi	r30, 0x34	; 52
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	8b 81       	ldd	r24, Y+3	; 0x03
     dfe:	80 83       	st	Z, r24
     e00:	07 c0       	rjmp	.+14     	; 0xe10 <DIO_u8setPortDir+0x7e>
		break;
	case PORT_D:
		DDRD_REG=Copy_u8dir;
     e02:	e1 e3       	ldi	r30, 0x31	; 49
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	8b 81       	ldd	r24, Y+3	; 0x03
     e08:	80 83       	st	Z, r24
     e0a:	02 c0       	rjmp	.+4      	; 0xe10 <DIO_u8setPortDir+0x7e>
		break;
	default:
		local_u8errStatus = RT_NOK ;
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8errStatus ;
     e10:	89 81       	ldd	r24, Y+1	; 0x01
}
     e12:	0f 90       	pop	r0
     e14:	0f 90       	pop	r0
     e16:	0f 90       	pop	r0
     e18:	0f 90       	pop	r0
     e1a:	0f 90       	pop	r0
     e1c:	cf 91       	pop	r28
     e1e:	df 91       	pop	r29
     e20:	08 95       	ret

00000e22 <DIO_u8setPortVal>:

u8 DIO_u8setPortVal(u8 Copy_u8port , u8 Copy_u8dval)
{
     e22:	df 93       	push	r29
     e24:	cf 93       	push	r28
     e26:	00 d0       	rcall	.+0      	; 0xe28 <DIO_u8setPortVal+0x6>
     e28:	00 d0       	rcall	.+0      	; 0xe2a <DIO_u8setPortVal+0x8>
     e2a:	0f 92       	push	r0
     e2c:	cd b7       	in	r28, 0x3d	; 61
     e2e:	de b7       	in	r29, 0x3e	; 62
     e30:	8a 83       	std	Y+2, r24	; 0x02
     e32:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8errStatus = RT_OK ;
     e34:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8port)
     e36:	8a 81       	ldd	r24, Y+2	; 0x02
     e38:	28 2f       	mov	r18, r24
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	3d 83       	std	Y+5, r19	; 0x05
     e3e:	2c 83       	std	Y+4, r18	; 0x04
     e40:	8c 81       	ldd	r24, Y+4	; 0x04
     e42:	9d 81       	ldd	r25, Y+5	; 0x05
     e44:	81 30       	cpi	r24, 0x01	; 1
     e46:	91 05       	cpc	r25, r1
     e48:	d1 f0       	breq	.+52     	; 0xe7e <DIO_u8setPortVal+0x5c>
     e4a:	2c 81       	ldd	r18, Y+4	; 0x04
     e4c:	3d 81       	ldd	r19, Y+5	; 0x05
     e4e:	22 30       	cpi	r18, 0x02	; 2
     e50:	31 05       	cpc	r19, r1
     e52:	2c f4       	brge	.+10     	; 0xe5e <DIO_u8setPortVal+0x3c>
     e54:	8c 81       	ldd	r24, Y+4	; 0x04
     e56:	9d 81       	ldd	r25, Y+5	; 0x05
     e58:	00 97       	sbiw	r24, 0x00	; 0
     e5a:	61 f0       	breq	.+24     	; 0xe74 <DIO_u8setPortVal+0x52>
     e5c:	1f c0       	rjmp	.+62     	; 0xe9c <DIO_u8setPortVal+0x7a>
     e5e:	2c 81       	ldd	r18, Y+4	; 0x04
     e60:	3d 81       	ldd	r19, Y+5	; 0x05
     e62:	22 30       	cpi	r18, 0x02	; 2
     e64:	31 05       	cpc	r19, r1
     e66:	81 f0       	breq	.+32     	; 0xe88 <DIO_u8setPortVal+0x66>
     e68:	8c 81       	ldd	r24, Y+4	; 0x04
     e6a:	9d 81       	ldd	r25, Y+5	; 0x05
     e6c:	83 30       	cpi	r24, 0x03	; 3
     e6e:	91 05       	cpc	r25, r1
     e70:	81 f0       	breq	.+32     	; 0xe92 <DIO_u8setPortVal+0x70>
     e72:	14 c0       	rjmp	.+40     	; 0xe9c <DIO_u8setPortVal+0x7a>
	{
	case PORT_A:
		PORTA_REG=Copy_u8dval;
     e74:	eb e3       	ldi	r30, 0x3B	; 59
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	8b 81       	ldd	r24, Y+3	; 0x03
     e7a:	80 83       	st	Z, r24
     e7c:	11 c0       	rjmp	.+34     	; 0xea0 <DIO_u8setPortVal+0x7e>
		break;
	case PORT_B:
		PORTB_REG=Copy_u8dval;
     e7e:	e8 e3       	ldi	r30, 0x38	; 56
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	8b 81       	ldd	r24, Y+3	; 0x03
     e84:	80 83       	st	Z, r24
     e86:	0c c0       	rjmp	.+24     	; 0xea0 <DIO_u8setPortVal+0x7e>
		break;
	case PORT_C:
		PORTC_REG=Copy_u8dval;
     e88:	e5 e3       	ldi	r30, 0x35	; 53
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	80 83       	st	Z, r24
     e90:	07 c0       	rjmp	.+14     	; 0xea0 <DIO_u8setPortVal+0x7e>
		break;
	case PORT_D:
		PORTD_REG=Copy_u8dval;
     e92:	e2 e3       	ldi	r30, 0x32	; 50
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	8b 81       	ldd	r24, Y+3	; 0x03
     e98:	80 83       	st	Z, r24
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <DIO_u8setPortVal+0x7e>
		break;
	default:
		local_u8errStatus = RT_NOK ;
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8errStatus ;
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
}
     ea2:	0f 90       	pop	r0
     ea4:	0f 90       	pop	r0
     ea6:	0f 90       	pop	r0
     ea8:	0f 90       	pop	r0
     eaa:	0f 90       	pop	r0
     eac:	cf 91       	pop	r28
     eae:	df 91       	pop	r29
     eb0:	08 95       	ret

00000eb2 <DIO_u8getPortVal>:

u8 DIO_u8getPortVal(u8 Copy_u8port , u8* Copy_u8pval)
{
     eb2:	df 93       	push	r29
     eb4:	cf 93       	push	r28
     eb6:	00 d0       	rcall	.+0      	; 0xeb8 <DIO_u8getPortVal+0x6>
     eb8:	00 d0       	rcall	.+0      	; 0xeba <DIO_u8getPortVal+0x8>
     eba:	00 d0       	rcall	.+0      	; 0xebc <DIO_u8getPortVal+0xa>
     ebc:	cd b7       	in	r28, 0x3d	; 61
     ebe:	de b7       	in	r29, 0x3e	; 62
     ec0:	8a 83       	std	Y+2, r24	; 0x02
     ec2:	7c 83       	std	Y+4, r23	; 0x04
     ec4:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8errStatus = RT_OK ;
     ec6:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8port)
     ec8:	8a 81       	ldd	r24, Y+2	; 0x02
     eca:	28 2f       	mov	r18, r24
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	3e 83       	std	Y+6, r19	; 0x06
     ed0:	2d 83       	std	Y+5, r18	; 0x05
     ed2:	8d 81       	ldd	r24, Y+5	; 0x05
     ed4:	9e 81       	ldd	r25, Y+6	; 0x06
     ed6:	81 30       	cpi	r24, 0x01	; 1
     ed8:	91 05       	cpc	r25, r1
     eda:	e1 f0       	breq	.+56     	; 0xf14 <DIO_u8getPortVal+0x62>
     edc:	2d 81       	ldd	r18, Y+5	; 0x05
     ede:	3e 81       	ldd	r19, Y+6	; 0x06
     ee0:	22 30       	cpi	r18, 0x02	; 2
     ee2:	31 05       	cpc	r19, r1
     ee4:	2c f4       	brge	.+10     	; 0xef0 <DIO_u8getPortVal+0x3e>
     ee6:	8d 81       	ldd	r24, Y+5	; 0x05
     ee8:	9e 81       	ldd	r25, Y+6	; 0x06
     eea:	00 97       	sbiw	r24, 0x00	; 0
     eec:	61 f0       	breq	.+24     	; 0xf06 <DIO_u8getPortVal+0x54>
     eee:	27 c0       	rjmp	.+78     	; 0xf3e <DIO_u8getPortVal+0x8c>
     ef0:	2d 81       	ldd	r18, Y+5	; 0x05
     ef2:	3e 81       	ldd	r19, Y+6	; 0x06
     ef4:	22 30       	cpi	r18, 0x02	; 2
     ef6:	31 05       	cpc	r19, r1
     ef8:	a1 f0       	breq	.+40     	; 0xf22 <DIO_u8getPortVal+0x70>
     efa:	8d 81       	ldd	r24, Y+5	; 0x05
     efc:	9e 81       	ldd	r25, Y+6	; 0x06
     efe:	83 30       	cpi	r24, 0x03	; 3
     f00:	91 05       	cpc	r25, r1
     f02:	b1 f0       	breq	.+44     	; 0xf30 <DIO_u8getPortVal+0x7e>
     f04:	1c c0       	rjmp	.+56     	; 0xf3e <DIO_u8getPortVal+0x8c>
	{
	case PORT_A:
		*Copy_u8pval=PINA_REG;
     f06:	e9 e3       	ldi	r30, 0x39	; 57
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	eb 81       	ldd	r30, Y+3	; 0x03
     f0e:	fc 81       	ldd	r31, Y+4	; 0x04
     f10:	80 83       	st	Z, r24
     f12:	17 c0       	rjmp	.+46     	; 0xf42 <DIO_u8getPortVal+0x90>
		break;
	case PORT_B:
		*Copy_u8pval=PINB_REG;
     f14:	e6 e3       	ldi	r30, 0x36	; 54
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	eb 81       	ldd	r30, Y+3	; 0x03
     f1c:	fc 81       	ldd	r31, Y+4	; 0x04
     f1e:	80 83       	st	Z, r24
     f20:	10 c0       	rjmp	.+32     	; 0xf42 <DIO_u8getPortVal+0x90>
		break;
	case PORT_C:
		*Copy_u8pval=PINC_REG;
     f22:	e3 e3       	ldi	r30, 0x33	; 51
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	eb 81       	ldd	r30, Y+3	; 0x03
     f2a:	fc 81       	ldd	r31, Y+4	; 0x04
     f2c:	80 83       	st	Z, r24
     f2e:	09 c0       	rjmp	.+18     	; 0xf42 <DIO_u8getPortVal+0x90>
		break;
	case PORT_D:
		*Copy_u8pval=PIND_REG;
     f30:	e0 e3       	ldi	r30, 0x30	; 48
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	eb 81       	ldd	r30, Y+3	; 0x03
     f38:	fc 81       	ldd	r31, Y+4	; 0x04
     f3a:	80 83       	st	Z, r24
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <DIO_u8getPortVal+0x90>
		break;
	default:
		local_u8errStatus = RT_NOK ;
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8errStatus ;
     f42:	89 81       	ldd	r24, Y+1	; 0x01
}
     f44:	26 96       	adiw	r28, 0x06	; 6
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	de bf       	out	0x3e, r29	; 62
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	cd bf       	out	0x3d, r28	; 61
     f50:	cf 91       	pop	r28
     f52:	df 91       	pop	r29
     f54:	08 95       	ret

00000f56 <DIO_u8setPinDir>:
/*PIN level*/
u8 DIO_u8setPinDir(u8 Copy_u8port , u8 Copy_u8pin , u8 Copy_u8dir)
{
     f56:	df 93       	push	r29
     f58:	cf 93       	push	r28
     f5a:	cd b7       	in	r28, 0x3d	; 61
     f5c:	de b7       	in	r29, 0x3e	; 62
     f5e:	28 97       	sbiw	r28, 0x08	; 8
     f60:	0f b6       	in	r0, 0x3f	; 63
     f62:	f8 94       	cli
     f64:	de bf       	out	0x3e, r29	; 62
     f66:	0f be       	out	0x3f, r0	; 63
     f68:	cd bf       	out	0x3d, r28	; 61
     f6a:	8a 83       	std	Y+2, r24	; 0x02
     f6c:	6b 83       	std	Y+3, r22	; 0x03
     f6e:	4c 83       	std	Y+4, r20	; 0x04
	u8 local_u8errStatus = RT_OK ;
     f70:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8pin >= PIN_0 && Copy_u8pin <= PIN_7 )
     f72:	8b 81       	ldd	r24, Y+3	; 0x03
     f74:	88 30       	cpi	r24, 0x08	; 8
     f76:	08 f0       	brcs	.+2      	; 0xf7a <DIO_u8setPinDir+0x24>
     f78:	f4 c0       	rjmp	.+488    	; 0x1162 <DIO_u8setPinDir+0x20c>
	{
		if(Copy_u8dir == INPUT)
     f7a:	8c 81       	ldd	r24, Y+4	; 0x04
     f7c:	88 23       	and	r24, r24
     f7e:	09 f0       	breq	.+2      	; 0xf82 <DIO_u8setPinDir+0x2c>
     f80:	77 c0       	rjmp	.+238    	; 0x1070 <DIO_u8setPinDir+0x11a>
		{
			switch(Copy_u8port)
     f82:	8a 81       	ldd	r24, Y+2	; 0x02
     f84:	28 2f       	mov	r18, r24
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	38 87       	std	Y+8, r19	; 0x08
     f8a:	2f 83       	std	Y+7, r18	; 0x07
     f8c:	8f 81       	ldd	r24, Y+7	; 0x07
     f8e:	98 85       	ldd	r25, Y+8	; 0x08
     f90:	81 30       	cpi	r24, 0x01	; 1
     f92:	91 05       	cpc	r25, r1
     f94:	59 f1       	breq	.+86     	; 0xfec <DIO_u8setPinDir+0x96>
     f96:	2f 81       	ldd	r18, Y+7	; 0x07
     f98:	38 85       	ldd	r19, Y+8	; 0x08
     f9a:	22 30       	cpi	r18, 0x02	; 2
     f9c:	31 05       	cpc	r19, r1
     f9e:	2c f4       	brge	.+10     	; 0xfaa <DIO_u8setPinDir+0x54>
     fa0:	8f 81       	ldd	r24, Y+7	; 0x07
     fa2:	98 85       	ldd	r25, Y+8	; 0x08
     fa4:	00 97       	sbiw	r24, 0x00	; 0
     fa6:	69 f0       	breq	.+26     	; 0xfc2 <DIO_u8setPinDir+0x6c>
     fa8:	60 c0       	rjmp	.+192    	; 0x106a <DIO_u8setPinDir+0x114>
     faa:	2f 81       	ldd	r18, Y+7	; 0x07
     fac:	38 85       	ldd	r19, Y+8	; 0x08
     fae:	22 30       	cpi	r18, 0x02	; 2
     fb0:	31 05       	cpc	r19, r1
     fb2:	89 f1       	breq	.+98     	; 0x1016 <DIO_u8setPinDir+0xc0>
     fb4:	8f 81       	ldd	r24, Y+7	; 0x07
     fb6:	98 85       	ldd	r25, Y+8	; 0x08
     fb8:	83 30       	cpi	r24, 0x03	; 3
     fba:	91 05       	cpc	r25, r1
     fbc:	09 f4       	brne	.+2      	; 0xfc0 <DIO_u8setPinDir+0x6a>
     fbe:	40 c0       	rjmp	.+128    	; 0x1040 <DIO_u8setPinDir+0xea>
     fc0:	54 c0       	rjmp	.+168    	; 0x106a <DIO_u8setPinDir+0x114>
			{
			case PORT_A:
				CLR_BIT(DDRA_REG,Copy_u8pin);
     fc2:	aa e3       	ldi	r26, 0x3A	; 58
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	ea e3       	ldi	r30, 0x3A	; 58
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	48 2f       	mov	r20, r24
     fce:	8b 81       	ldd	r24, Y+3	; 0x03
     fd0:	28 2f       	mov	r18, r24
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	02 2e       	mov	r0, r18
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <DIO_u8setPinDir+0x8a>
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	0a 94       	dec	r0
     fe2:	e2 f7       	brpl	.-8      	; 0xfdc <DIO_u8setPinDir+0x86>
     fe4:	80 95       	com	r24
     fe6:	84 23       	and	r24, r20
     fe8:	8c 93       	st	X, r24
     fea:	bd c0       	rjmp	.+378    	; 0x1166 <DIO_u8setPinDir+0x210>
				break;
			case PORT_B:
				CLR_BIT(DDRB_REG,Copy_u8pin);
     fec:	a7 e3       	ldi	r26, 0x37	; 55
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	e7 e3       	ldi	r30, 0x37	; 55
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	48 2f       	mov	r20, r24
     ff8:	8b 81       	ldd	r24, Y+3	; 0x03
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	02 2e       	mov	r0, r18
    1004:	02 c0       	rjmp	.+4      	; 0x100a <DIO_u8setPinDir+0xb4>
    1006:	88 0f       	add	r24, r24
    1008:	99 1f       	adc	r25, r25
    100a:	0a 94       	dec	r0
    100c:	e2 f7       	brpl	.-8      	; 0x1006 <DIO_u8setPinDir+0xb0>
    100e:	80 95       	com	r24
    1010:	84 23       	and	r24, r20
    1012:	8c 93       	st	X, r24
    1014:	a8 c0       	rjmp	.+336    	; 0x1166 <DIO_u8setPinDir+0x210>
				break;
			case PORT_C:
				CLR_BIT(DDRC_REG,Copy_u8pin);
    1016:	a4 e3       	ldi	r26, 0x34	; 52
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	e4 e3       	ldi	r30, 0x34	; 52
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	48 2f       	mov	r20, r24
    1022:	8b 81       	ldd	r24, Y+3	; 0x03
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	02 2e       	mov	r0, r18
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <DIO_u8setPinDir+0xde>
    1030:	88 0f       	add	r24, r24
    1032:	99 1f       	adc	r25, r25
    1034:	0a 94       	dec	r0
    1036:	e2 f7       	brpl	.-8      	; 0x1030 <DIO_u8setPinDir+0xda>
    1038:	80 95       	com	r24
    103a:	84 23       	and	r24, r20
    103c:	8c 93       	st	X, r24
    103e:	93 c0       	rjmp	.+294    	; 0x1166 <DIO_u8setPinDir+0x210>
				break;
			case PORT_D:
				CLR_BIT(DDRD_REG,Copy_u8pin);
    1040:	a1 e3       	ldi	r26, 0x31	; 49
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	e1 e3       	ldi	r30, 0x31	; 49
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	48 2f       	mov	r20, r24
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	02 2e       	mov	r0, r18
    1058:	02 c0       	rjmp	.+4      	; 0x105e <DIO_u8setPinDir+0x108>
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	0a 94       	dec	r0
    1060:	e2 f7       	brpl	.-8      	; 0x105a <DIO_u8setPinDir+0x104>
    1062:	80 95       	com	r24
    1064:	84 23       	and	r24, r20
    1066:	8c 93       	st	X, r24
    1068:	7e c0       	rjmp	.+252    	; 0x1166 <DIO_u8setPinDir+0x210>
				break;
			default:
				local_u8errStatus = RT_NOK ;
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	89 83       	std	Y+1, r24	; 0x01
    106e:	7b c0       	rjmp	.+246    	; 0x1166 <DIO_u8setPinDir+0x210>
			}
		}
		else if(Copy_u8dir == OUTPUT)
    1070:	8c 81       	ldd	r24, Y+4	; 0x04
    1072:	81 30       	cpi	r24, 0x01	; 1
    1074:	09 f0       	breq	.+2      	; 0x1078 <DIO_u8setPinDir+0x122>
    1076:	72 c0       	rjmp	.+228    	; 0x115c <DIO_u8setPinDir+0x206>
		{
			switch(Copy_u8port)
    1078:	8a 81       	ldd	r24, Y+2	; 0x02
    107a:	28 2f       	mov	r18, r24
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	3e 83       	std	Y+6, r19	; 0x06
    1080:	2d 83       	std	Y+5, r18	; 0x05
    1082:	8d 81       	ldd	r24, Y+5	; 0x05
    1084:	9e 81       	ldd	r25, Y+6	; 0x06
    1086:	81 30       	cpi	r24, 0x01	; 1
    1088:	91 05       	cpc	r25, r1
    108a:	49 f1       	breq	.+82     	; 0x10de <DIO_u8setPinDir+0x188>
    108c:	2d 81       	ldd	r18, Y+5	; 0x05
    108e:	3e 81       	ldd	r19, Y+6	; 0x06
    1090:	22 30       	cpi	r18, 0x02	; 2
    1092:	31 05       	cpc	r19, r1
    1094:	2c f4       	brge	.+10     	; 0x10a0 <DIO_u8setPinDir+0x14a>
    1096:	8d 81       	ldd	r24, Y+5	; 0x05
    1098:	9e 81       	ldd	r25, Y+6	; 0x06
    109a:	00 97       	sbiw	r24, 0x00	; 0
    109c:	61 f0       	breq	.+24     	; 0x10b6 <DIO_u8setPinDir+0x160>
    109e:	5b c0       	rjmp	.+182    	; 0x1156 <DIO_u8setPinDir+0x200>
    10a0:	2d 81       	ldd	r18, Y+5	; 0x05
    10a2:	3e 81       	ldd	r19, Y+6	; 0x06
    10a4:	22 30       	cpi	r18, 0x02	; 2
    10a6:	31 05       	cpc	r19, r1
    10a8:	71 f1       	breq	.+92     	; 0x1106 <DIO_u8setPinDir+0x1b0>
    10aa:	8d 81       	ldd	r24, Y+5	; 0x05
    10ac:	9e 81       	ldd	r25, Y+6	; 0x06
    10ae:	83 30       	cpi	r24, 0x03	; 3
    10b0:	91 05       	cpc	r25, r1
    10b2:	e9 f1       	breq	.+122    	; 0x112e <DIO_u8setPinDir+0x1d8>
    10b4:	50 c0       	rjmp	.+160    	; 0x1156 <DIO_u8setPinDir+0x200>
			{
			case PORT_A:
				SET_BIT(DDRA_REG,Copy_u8pin);
    10b6:	aa e3       	ldi	r26, 0x3A	; 58
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	ea e3       	ldi	r30, 0x3A	; 58
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	48 2f       	mov	r20, r24
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	28 2f       	mov	r18, r24
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	02 2e       	mov	r0, r18
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <DIO_u8setPinDir+0x17e>
    10d0:	88 0f       	add	r24, r24
    10d2:	99 1f       	adc	r25, r25
    10d4:	0a 94       	dec	r0
    10d6:	e2 f7       	brpl	.-8      	; 0x10d0 <DIO_u8setPinDir+0x17a>
    10d8:	84 2b       	or	r24, r20
    10da:	8c 93       	st	X, r24
    10dc:	44 c0       	rjmp	.+136    	; 0x1166 <DIO_u8setPinDir+0x210>
				break;
			case PORT_B:
				SET_BIT(DDRB_REG,Copy_u8pin);
    10de:	a7 e3       	ldi	r26, 0x37	; 55
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	e7 e3       	ldi	r30, 0x37	; 55
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	48 2f       	mov	r20, r24
    10ea:	8b 81       	ldd	r24, Y+3	; 0x03
    10ec:	28 2f       	mov	r18, r24
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	02 2e       	mov	r0, r18
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <DIO_u8setPinDir+0x1a6>
    10f8:	88 0f       	add	r24, r24
    10fa:	99 1f       	adc	r25, r25
    10fc:	0a 94       	dec	r0
    10fe:	e2 f7       	brpl	.-8      	; 0x10f8 <DIO_u8setPinDir+0x1a2>
    1100:	84 2b       	or	r24, r20
    1102:	8c 93       	st	X, r24
    1104:	30 c0       	rjmp	.+96     	; 0x1166 <DIO_u8setPinDir+0x210>
				break;
			case PORT_C:
				SET_BIT(DDRC_REG,Copy_u8pin);
    1106:	a4 e3       	ldi	r26, 0x34	; 52
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	e4 e3       	ldi	r30, 0x34	; 52
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	48 2f       	mov	r20, r24
    1112:	8b 81       	ldd	r24, Y+3	; 0x03
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	02 2e       	mov	r0, r18
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <DIO_u8setPinDir+0x1ce>
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	0a 94       	dec	r0
    1126:	e2 f7       	brpl	.-8      	; 0x1120 <DIO_u8setPinDir+0x1ca>
    1128:	84 2b       	or	r24, r20
    112a:	8c 93       	st	X, r24
    112c:	1c c0       	rjmp	.+56     	; 0x1166 <DIO_u8setPinDir+0x210>
				break;
			case PORT_D:
				SET_BIT(DDRD_REG,Copy_u8pin);
    112e:	a1 e3       	ldi	r26, 0x31	; 49
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	e1 e3       	ldi	r30, 0x31	; 49
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	48 2f       	mov	r20, r24
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
    113c:	28 2f       	mov	r18, r24
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	02 2e       	mov	r0, r18
    1146:	02 c0       	rjmp	.+4      	; 0x114c <DIO_u8setPinDir+0x1f6>
    1148:	88 0f       	add	r24, r24
    114a:	99 1f       	adc	r25, r25
    114c:	0a 94       	dec	r0
    114e:	e2 f7       	brpl	.-8      	; 0x1148 <DIO_u8setPinDir+0x1f2>
    1150:	84 2b       	or	r24, r20
    1152:	8c 93       	st	X, r24
    1154:	08 c0       	rjmp	.+16     	; 0x1166 <DIO_u8setPinDir+0x210>
				break;
			default:
				local_u8errStatus = RT_NOK ;
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	89 83       	std	Y+1, r24	; 0x01
    115a:	05 c0       	rjmp	.+10     	; 0x1166 <DIO_u8setPinDir+0x210>
			}
		}
		else
		{
			local_u8errStatus = RT_NOK ;
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	89 83       	std	Y+1, r24	; 0x01
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <DIO_u8setPinDir+0x210>
		}
	}
	else
	{
		local_u8errStatus = RT_NOK ;
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8errStatus ;
    1166:	89 81       	ldd	r24, Y+1	; 0x01
}
    1168:	28 96       	adiw	r28, 0x08	; 8
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	f8 94       	cli
    116e:	de bf       	out	0x3e, r29	; 62
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	cd bf       	out	0x3d, r28	; 61
    1174:	cf 91       	pop	r28
    1176:	df 91       	pop	r29
    1178:	08 95       	ret

0000117a <DIO_u8setPinVal>:

u8 DIO_u8setPinVal(u8 Copy_u8port , u8 Copy_u8pin , u8 Copy_u8val)
{
    117a:	df 93       	push	r29
    117c:	cf 93       	push	r28
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
    1182:	28 97       	sbiw	r28, 0x08	; 8
    1184:	0f b6       	in	r0, 0x3f	; 63
    1186:	f8 94       	cli
    1188:	de bf       	out	0x3e, r29	; 62
    118a:	0f be       	out	0x3f, r0	; 63
    118c:	cd bf       	out	0x3d, r28	; 61
    118e:	8a 83       	std	Y+2, r24	; 0x02
    1190:	6b 83       	std	Y+3, r22	; 0x03
    1192:	4c 83       	std	Y+4, r20	; 0x04
	u8 local_u8errStatus = RT_OK ;
    1194:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8pin >= PIN_0 && Copy_u8pin <= PIN_7 )
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	88 30       	cpi	r24, 0x08	; 8
    119a:	08 f0       	brcs	.+2      	; 0x119e <DIO_u8setPinVal+0x24>
    119c:	f4 c0       	rjmp	.+488    	; 0x1386 <DIO_u8setPinVal+0x20c>
	{
		if(Copy_u8val == LOW)
    119e:	8c 81       	ldd	r24, Y+4	; 0x04
    11a0:	88 23       	and	r24, r24
    11a2:	09 f0       	breq	.+2      	; 0x11a6 <DIO_u8setPinVal+0x2c>
    11a4:	77 c0       	rjmp	.+238    	; 0x1294 <DIO_u8setPinVal+0x11a>
		{
			switch(Copy_u8port)
    11a6:	8a 81       	ldd	r24, Y+2	; 0x02
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	38 87       	std	Y+8, r19	; 0x08
    11ae:	2f 83       	std	Y+7, r18	; 0x07
    11b0:	8f 81       	ldd	r24, Y+7	; 0x07
    11b2:	98 85       	ldd	r25, Y+8	; 0x08
    11b4:	81 30       	cpi	r24, 0x01	; 1
    11b6:	91 05       	cpc	r25, r1
    11b8:	59 f1       	breq	.+86     	; 0x1210 <DIO_u8setPinVal+0x96>
    11ba:	2f 81       	ldd	r18, Y+7	; 0x07
    11bc:	38 85       	ldd	r19, Y+8	; 0x08
    11be:	22 30       	cpi	r18, 0x02	; 2
    11c0:	31 05       	cpc	r19, r1
    11c2:	2c f4       	brge	.+10     	; 0x11ce <DIO_u8setPinVal+0x54>
    11c4:	8f 81       	ldd	r24, Y+7	; 0x07
    11c6:	98 85       	ldd	r25, Y+8	; 0x08
    11c8:	00 97       	sbiw	r24, 0x00	; 0
    11ca:	69 f0       	breq	.+26     	; 0x11e6 <DIO_u8setPinVal+0x6c>
    11cc:	60 c0       	rjmp	.+192    	; 0x128e <DIO_u8setPinVal+0x114>
    11ce:	2f 81       	ldd	r18, Y+7	; 0x07
    11d0:	38 85       	ldd	r19, Y+8	; 0x08
    11d2:	22 30       	cpi	r18, 0x02	; 2
    11d4:	31 05       	cpc	r19, r1
    11d6:	89 f1       	breq	.+98     	; 0x123a <DIO_u8setPinVal+0xc0>
    11d8:	8f 81       	ldd	r24, Y+7	; 0x07
    11da:	98 85       	ldd	r25, Y+8	; 0x08
    11dc:	83 30       	cpi	r24, 0x03	; 3
    11de:	91 05       	cpc	r25, r1
    11e0:	09 f4       	brne	.+2      	; 0x11e4 <DIO_u8setPinVal+0x6a>
    11e2:	40 c0       	rjmp	.+128    	; 0x1264 <DIO_u8setPinVal+0xea>
    11e4:	54 c0       	rjmp	.+168    	; 0x128e <DIO_u8setPinVal+0x114>
			{
			case PORT_A:
				CLR_BIT(PORTA_REG,Copy_u8pin);
    11e6:	ab e3       	ldi	r26, 0x3B	; 59
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	eb e3       	ldi	r30, 0x3B	; 59
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	48 2f       	mov	r20, r24
    11f2:	8b 81       	ldd	r24, Y+3	; 0x03
    11f4:	28 2f       	mov	r18, r24
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	02 2e       	mov	r0, r18
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <DIO_u8setPinVal+0x8a>
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	0a 94       	dec	r0
    1206:	e2 f7       	brpl	.-8      	; 0x1200 <DIO_u8setPinVal+0x86>
    1208:	80 95       	com	r24
    120a:	84 23       	and	r24, r20
    120c:	8c 93       	st	X, r24
    120e:	bd c0       	rjmp	.+378    	; 0x138a <DIO_u8setPinVal+0x210>
				break;
			case PORT_B:
				CLR_BIT(PORTB_REG,Copy_u8pin);
    1210:	a8 e3       	ldi	r26, 0x38	; 56
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	e8 e3       	ldi	r30, 0x38	; 56
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	48 2f       	mov	r20, r24
    121c:	8b 81       	ldd	r24, Y+3	; 0x03
    121e:	28 2f       	mov	r18, r24
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	02 2e       	mov	r0, r18
    1228:	02 c0       	rjmp	.+4      	; 0x122e <DIO_u8setPinVal+0xb4>
    122a:	88 0f       	add	r24, r24
    122c:	99 1f       	adc	r25, r25
    122e:	0a 94       	dec	r0
    1230:	e2 f7       	brpl	.-8      	; 0x122a <DIO_u8setPinVal+0xb0>
    1232:	80 95       	com	r24
    1234:	84 23       	and	r24, r20
    1236:	8c 93       	st	X, r24
    1238:	a8 c0       	rjmp	.+336    	; 0x138a <DIO_u8setPinVal+0x210>
				break;
			case PORT_C:
				CLR_BIT(PORTC_REG,Copy_u8pin);
    123a:	a5 e3       	ldi	r26, 0x35	; 53
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	e5 e3       	ldi	r30, 0x35	; 53
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	48 2f       	mov	r20, r24
    1246:	8b 81       	ldd	r24, Y+3	; 0x03
    1248:	28 2f       	mov	r18, r24
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	02 2e       	mov	r0, r18
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <DIO_u8setPinVal+0xde>
    1254:	88 0f       	add	r24, r24
    1256:	99 1f       	adc	r25, r25
    1258:	0a 94       	dec	r0
    125a:	e2 f7       	brpl	.-8      	; 0x1254 <DIO_u8setPinVal+0xda>
    125c:	80 95       	com	r24
    125e:	84 23       	and	r24, r20
    1260:	8c 93       	st	X, r24
    1262:	93 c0       	rjmp	.+294    	; 0x138a <DIO_u8setPinVal+0x210>
				break;
			case PORT_D:
				CLR_BIT(PORTD_REG,Copy_u8pin);
    1264:	a2 e3       	ldi	r26, 0x32	; 50
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	e2 e3       	ldi	r30, 0x32	; 50
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	48 2f       	mov	r20, r24
    1270:	8b 81       	ldd	r24, Y+3	; 0x03
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	02 2e       	mov	r0, r18
    127c:	02 c0       	rjmp	.+4      	; 0x1282 <DIO_u8setPinVal+0x108>
    127e:	88 0f       	add	r24, r24
    1280:	99 1f       	adc	r25, r25
    1282:	0a 94       	dec	r0
    1284:	e2 f7       	brpl	.-8      	; 0x127e <DIO_u8setPinVal+0x104>
    1286:	80 95       	com	r24
    1288:	84 23       	and	r24, r20
    128a:	8c 93       	st	X, r24
    128c:	7e c0       	rjmp	.+252    	; 0x138a <DIO_u8setPinVal+0x210>
				break;
			default:
				local_u8errStatus = RT_NOK ;
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	89 83       	std	Y+1, r24	; 0x01
    1292:	7b c0       	rjmp	.+246    	; 0x138a <DIO_u8setPinVal+0x210>
			}
		}
		else if(Copy_u8val == HIGH)
    1294:	8c 81       	ldd	r24, Y+4	; 0x04
    1296:	81 30       	cpi	r24, 0x01	; 1
    1298:	09 f0       	breq	.+2      	; 0x129c <DIO_u8setPinVal+0x122>
    129a:	72 c0       	rjmp	.+228    	; 0x1380 <DIO_u8setPinVal+0x206>
		{
			switch(Copy_u8port)
    129c:	8a 81       	ldd	r24, Y+2	; 0x02
    129e:	28 2f       	mov	r18, r24
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	3e 83       	std	Y+6, r19	; 0x06
    12a4:	2d 83       	std	Y+5, r18	; 0x05
    12a6:	8d 81       	ldd	r24, Y+5	; 0x05
    12a8:	9e 81       	ldd	r25, Y+6	; 0x06
    12aa:	81 30       	cpi	r24, 0x01	; 1
    12ac:	91 05       	cpc	r25, r1
    12ae:	49 f1       	breq	.+82     	; 0x1302 <DIO_u8setPinVal+0x188>
    12b0:	2d 81       	ldd	r18, Y+5	; 0x05
    12b2:	3e 81       	ldd	r19, Y+6	; 0x06
    12b4:	22 30       	cpi	r18, 0x02	; 2
    12b6:	31 05       	cpc	r19, r1
    12b8:	2c f4       	brge	.+10     	; 0x12c4 <DIO_u8setPinVal+0x14a>
    12ba:	8d 81       	ldd	r24, Y+5	; 0x05
    12bc:	9e 81       	ldd	r25, Y+6	; 0x06
    12be:	00 97       	sbiw	r24, 0x00	; 0
    12c0:	61 f0       	breq	.+24     	; 0x12da <DIO_u8setPinVal+0x160>
    12c2:	5b c0       	rjmp	.+182    	; 0x137a <DIO_u8setPinVal+0x200>
    12c4:	2d 81       	ldd	r18, Y+5	; 0x05
    12c6:	3e 81       	ldd	r19, Y+6	; 0x06
    12c8:	22 30       	cpi	r18, 0x02	; 2
    12ca:	31 05       	cpc	r19, r1
    12cc:	71 f1       	breq	.+92     	; 0x132a <DIO_u8setPinVal+0x1b0>
    12ce:	8d 81       	ldd	r24, Y+5	; 0x05
    12d0:	9e 81       	ldd	r25, Y+6	; 0x06
    12d2:	83 30       	cpi	r24, 0x03	; 3
    12d4:	91 05       	cpc	r25, r1
    12d6:	e9 f1       	breq	.+122    	; 0x1352 <DIO_u8setPinVal+0x1d8>
    12d8:	50 c0       	rjmp	.+160    	; 0x137a <DIO_u8setPinVal+0x200>
			{
			case PORT_A:
				SET_BIT(PORTA_REG,Copy_u8pin);
    12da:	ab e3       	ldi	r26, 0x3B	; 59
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	eb e3       	ldi	r30, 0x3B	; 59
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	48 2f       	mov	r20, r24
    12e6:	8b 81       	ldd	r24, Y+3	; 0x03
    12e8:	28 2f       	mov	r18, r24
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	02 2e       	mov	r0, r18
    12f2:	02 c0       	rjmp	.+4      	; 0x12f8 <DIO_u8setPinVal+0x17e>
    12f4:	88 0f       	add	r24, r24
    12f6:	99 1f       	adc	r25, r25
    12f8:	0a 94       	dec	r0
    12fa:	e2 f7       	brpl	.-8      	; 0x12f4 <DIO_u8setPinVal+0x17a>
    12fc:	84 2b       	or	r24, r20
    12fe:	8c 93       	st	X, r24
    1300:	44 c0       	rjmp	.+136    	; 0x138a <DIO_u8setPinVal+0x210>
				break;
			case PORT_B:
				SET_BIT(PORTB_REG,Copy_u8pin);
    1302:	a8 e3       	ldi	r26, 0x38	; 56
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	e8 e3       	ldi	r30, 0x38	; 56
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	48 2f       	mov	r20, r24
    130e:	8b 81       	ldd	r24, Y+3	; 0x03
    1310:	28 2f       	mov	r18, r24
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	02 2e       	mov	r0, r18
    131a:	02 c0       	rjmp	.+4      	; 0x1320 <DIO_u8setPinVal+0x1a6>
    131c:	88 0f       	add	r24, r24
    131e:	99 1f       	adc	r25, r25
    1320:	0a 94       	dec	r0
    1322:	e2 f7       	brpl	.-8      	; 0x131c <DIO_u8setPinVal+0x1a2>
    1324:	84 2b       	or	r24, r20
    1326:	8c 93       	st	X, r24
    1328:	30 c0       	rjmp	.+96     	; 0x138a <DIO_u8setPinVal+0x210>
				break;
			case PORT_C:
				SET_BIT(PORTC_REG,Copy_u8pin);
    132a:	a5 e3       	ldi	r26, 0x35	; 53
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	e5 e3       	ldi	r30, 0x35	; 53
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	48 2f       	mov	r20, r24
    1336:	8b 81       	ldd	r24, Y+3	; 0x03
    1338:	28 2f       	mov	r18, r24
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	02 2e       	mov	r0, r18
    1342:	02 c0       	rjmp	.+4      	; 0x1348 <DIO_u8setPinVal+0x1ce>
    1344:	88 0f       	add	r24, r24
    1346:	99 1f       	adc	r25, r25
    1348:	0a 94       	dec	r0
    134a:	e2 f7       	brpl	.-8      	; 0x1344 <DIO_u8setPinVal+0x1ca>
    134c:	84 2b       	or	r24, r20
    134e:	8c 93       	st	X, r24
    1350:	1c c0       	rjmp	.+56     	; 0x138a <DIO_u8setPinVal+0x210>
				break;
			case PORT_D:
				SET_BIT(PORTD_REG,Copy_u8pin);
    1352:	a2 e3       	ldi	r26, 0x32	; 50
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	e2 e3       	ldi	r30, 0x32	; 50
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	48 2f       	mov	r20, r24
    135e:	8b 81       	ldd	r24, Y+3	; 0x03
    1360:	28 2f       	mov	r18, r24
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	02 2e       	mov	r0, r18
    136a:	02 c0       	rjmp	.+4      	; 0x1370 <DIO_u8setPinVal+0x1f6>
    136c:	88 0f       	add	r24, r24
    136e:	99 1f       	adc	r25, r25
    1370:	0a 94       	dec	r0
    1372:	e2 f7       	brpl	.-8      	; 0x136c <DIO_u8setPinVal+0x1f2>
    1374:	84 2b       	or	r24, r20
    1376:	8c 93       	st	X, r24
    1378:	08 c0       	rjmp	.+16     	; 0x138a <DIO_u8setPinVal+0x210>
				break;
			default:
				local_u8errStatus = RT_NOK ;
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	89 83       	std	Y+1, r24	; 0x01
    137e:	05 c0       	rjmp	.+10     	; 0x138a <DIO_u8setPinVal+0x210>
			}
		}
		else
		{
			local_u8errStatus = RT_NOK ;
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	89 83       	std	Y+1, r24	; 0x01
    1384:	02 c0       	rjmp	.+4      	; 0x138a <DIO_u8setPinVal+0x210>
		}
	}
	else
	{
		local_u8errStatus = RT_NOK ;
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8errStatus ;
    138a:	89 81       	ldd	r24, Y+1	; 0x01
}
    138c:	28 96       	adiw	r28, 0x08	; 8
    138e:	0f b6       	in	r0, 0x3f	; 63
    1390:	f8 94       	cli
    1392:	de bf       	out	0x3e, r29	; 62
    1394:	0f be       	out	0x3f, r0	; 63
    1396:	cd bf       	out	0x3d, r28	; 61
    1398:	cf 91       	pop	r28
    139a:	df 91       	pop	r29
    139c:	08 95       	ret

0000139e <DIO_u8getPinVal>:

u8 DIO_u8getPinVal(u8 Copy_u8port , u8 Copy_u8pin , u8* Copy_u8pval)
{
    139e:	df 93       	push	r29
    13a0:	cf 93       	push	r28
    13a2:	cd b7       	in	r28, 0x3d	; 61
    13a4:	de b7       	in	r29, 0x3e	; 62
    13a6:	27 97       	sbiw	r28, 0x07	; 7
    13a8:	0f b6       	in	r0, 0x3f	; 63
    13aa:	f8 94       	cli
    13ac:	de bf       	out	0x3e, r29	; 62
    13ae:	0f be       	out	0x3f, r0	; 63
    13b0:	cd bf       	out	0x3d, r28	; 61
    13b2:	8a 83       	std	Y+2, r24	; 0x02
    13b4:	6b 83       	std	Y+3, r22	; 0x03
    13b6:	5d 83       	std	Y+5, r21	; 0x05
    13b8:	4c 83       	std	Y+4, r20	; 0x04
	u8 local_u8errStatus = RT_OK ;
    13ba:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8pin <= PIN_7 )
    13bc:	8b 81       	ldd	r24, Y+3	; 0x03
    13be:	88 30       	cpi	r24, 0x08	; 8
    13c0:	08 f0       	brcs	.+2      	; 0x13c4 <DIO_u8getPinVal+0x26>
    13c2:	74 c0       	rjmp	.+232    	; 0x14ac <DIO_u8getPinVal+0x10e>
	{
		switch(Copy_u8port)
    13c4:	8a 81       	ldd	r24, Y+2	; 0x02
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	3f 83       	std	Y+7, r19	; 0x07
    13cc:	2e 83       	std	Y+6, r18	; 0x06
    13ce:	4e 81       	ldd	r20, Y+6	; 0x06
    13d0:	5f 81       	ldd	r21, Y+7	; 0x07
    13d2:	41 30       	cpi	r20, 0x01	; 1
    13d4:	51 05       	cpc	r21, r1
    13d6:	59 f1       	breq	.+86     	; 0x142e <DIO_u8getPinVal+0x90>
    13d8:	8e 81       	ldd	r24, Y+6	; 0x06
    13da:	9f 81       	ldd	r25, Y+7	; 0x07
    13dc:	82 30       	cpi	r24, 0x02	; 2
    13de:	91 05       	cpc	r25, r1
    13e0:	34 f4       	brge	.+12     	; 0x13ee <DIO_u8getPinVal+0x50>
    13e2:	2e 81       	ldd	r18, Y+6	; 0x06
    13e4:	3f 81       	ldd	r19, Y+7	; 0x07
    13e6:	21 15       	cp	r18, r1
    13e8:	31 05       	cpc	r19, r1
    13ea:	69 f0       	breq	.+26     	; 0x1406 <DIO_u8getPinVal+0x68>
    13ec:	5c c0       	rjmp	.+184    	; 0x14a6 <DIO_u8getPinVal+0x108>
    13ee:	4e 81       	ldd	r20, Y+6	; 0x06
    13f0:	5f 81       	ldd	r21, Y+7	; 0x07
    13f2:	42 30       	cpi	r20, 0x02	; 2
    13f4:	51 05       	cpc	r21, r1
    13f6:	79 f1       	breq	.+94     	; 0x1456 <DIO_u8getPinVal+0xb8>
    13f8:	8e 81       	ldd	r24, Y+6	; 0x06
    13fa:	9f 81       	ldd	r25, Y+7	; 0x07
    13fc:	83 30       	cpi	r24, 0x03	; 3
    13fe:	91 05       	cpc	r25, r1
    1400:	09 f4       	brne	.+2      	; 0x1404 <DIO_u8getPinVal+0x66>
    1402:	3d c0       	rjmp	.+122    	; 0x147e <DIO_u8getPinVal+0xe0>
    1404:	50 c0       	rjmp	.+160    	; 0x14a6 <DIO_u8getPinVal+0x108>
		{
		case PORT_A:
			*Copy_u8pval=GET_BIT(PINA_REG,Copy_u8pin);
    1406:	e9 e3       	ldi	r30, 0x39	; 57
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	28 2f       	mov	r18, r24
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	88 2f       	mov	r24, r24
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	a9 01       	movw	r20, r18
    1418:	02 c0       	rjmp	.+4      	; 0x141e <DIO_u8getPinVal+0x80>
    141a:	55 95       	asr	r21
    141c:	47 95       	ror	r20
    141e:	8a 95       	dec	r24
    1420:	e2 f7       	brpl	.-8      	; 0x141a <DIO_u8getPinVal+0x7c>
    1422:	ca 01       	movw	r24, r20
    1424:	81 70       	andi	r24, 0x01	; 1
    1426:	ec 81       	ldd	r30, Y+4	; 0x04
    1428:	fd 81       	ldd	r31, Y+5	; 0x05
    142a:	80 83       	st	Z, r24
    142c:	41 c0       	rjmp	.+130    	; 0x14b0 <DIO_u8getPinVal+0x112>
			break;
		case PORT_B:
			*Copy_u8pval=GET_BIT(PINB_REG,Copy_u8pin);
    142e:	e6 e3       	ldi	r30, 0x36	; 54
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	28 2f       	mov	r18, r24
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	8b 81       	ldd	r24, Y+3	; 0x03
    143a:	88 2f       	mov	r24, r24
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	a9 01       	movw	r20, r18
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <DIO_u8getPinVal+0xa8>
    1442:	55 95       	asr	r21
    1444:	47 95       	ror	r20
    1446:	8a 95       	dec	r24
    1448:	e2 f7       	brpl	.-8      	; 0x1442 <DIO_u8getPinVal+0xa4>
    144a:	ca 01       	movw	r24, r20
    144c:	81 70       	andi	r24, 0x01	; 1
    144e:	ec 81       	ldd	r30, Y+4	; 0x04
    1450:	fd 81       	ldd	r31, Y+5	; 0x05
    1452:	80 83       	st	Z, r24
    1454:	2d c0       	rjmp	.+90     	; 0x14b0 <DIO_u8getPinVal+0x112>
			break;
		case PORT_C:
			*Copy_u8pval=GET_BIT(PINC_REG,Copy_u8pin);
    1456:	e3 e3       	ldi	r30, 0x33	; 51
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	28 2f       	mov	r18, r24
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	8b 81       	ldd	r24, Y+3	; 0x03
    1462:	88 2f       	mov	r24, r24
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	a9 01       	movw	r20, r18
    1468:	02 c0       	rjmp	.+4      	; 0x146e <DIO_u8getPinVal+0xd0>
    146a:	55 95       	asr	r21
    146c:	47 95       	ror	r20
    146e:	8a 95       	dec	r24
    1470:	e2 f7       	brpl	.-8      	; 0x146a <DIO_u8getPinVal+0xcc>
    1472:	ca 01       	movw	r24, r20
    1474:	81 70       	andi	r24, 0x01	; 1
    1476:	ec 81       	ldd	r30, Y+4	; 0x04
    1478:	fd 81       	ldd	r31, Y+5	; 0x05
    147a:	80 83       	st	Z, r24
    147c:	19 c0       	rjmp	.+50     	; 0x14b0 <DIO_u8getPinVal+0x112>
			break;
		case PORT_D:
			*Copy_u8pval=GET_BIT(PIND_REG,Copy_u8pin);
    147e:	e0 e3       	ldi	r30, 0x30	; 48
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	28 2f       	mov	r18, r24
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	8b 81       	ldd	r24, Y+3	; 0x03
    148a:	88 2f       	mov	r24, r24
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	a9 01       	movw	r20, r18
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <DIO_u8getPinVal+0xf8>
    1492:	55 95       	asr	r21
    1494:	47 95       	ror	r20
    1496:	8a 95       	dec	r24
    1498:	e2 f7       	brpl	.-8      	; 0x1492 <DIO_u8getPinVal+0xf4>
    149a:	ca 01       	movw	r24, r20
    149c:	81 70       	andi	r24, 0x01	; 1
    149e:	ec 81       	ldd	r30, Y+4	; 0x04
    14a0:	fd 81       	ldd	r31, Y+5	; 0x05
    14a2:	80 83       	st	Z, r24
    14a4:	05 c0       	rjmp	.+10     	; 0x14b0 <DIO_u8getPinVal+0x112>
			break;
		default:
			local_u8errStatus = RT_NOK ;
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	89 83       	std	Y+1, r24	; 0x01
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <DIO_u8getPinVal+0x112>
		}
	}
	else
	{
		local_u8errStatus = RT_NOK ;
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8errStatus ;
    14b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    14b2:	27 96       	adiw	r28, 0x07	; 7
    14b4:	0f b6       	in	r0, 0x3f	; 63
    14b6:	f8 94       	cli
    14b8:	de bf       	out	0x3e, r29	; 62
    14ba:	0f be       	out	0x3f, r0	; 63
    14bc:	cd bf       	out	0x3d, r28	; 61
    14be:	cf 91       	pop	r28
    14c0:	df 91       	pop	r29
    14c2:	08 95       	ret

000014c4 <LCD_vidWriteSpecialCharecter>:

#include "LCD_config.h"
#include "LCD_int.h"

void LCD_vidWriteSpecialCharecter(u8 *copy_u8pPattern, u8 copy_u8BlockNo, u8 copy_u8XPos, u8 copy_u8YPos)
{
    14c4:	0f 93       	push	r16
    14c6:	1f 93       	push	r17
    14c8:	df 93       	push	r29
    14ca:	cf 93       	push	r28
    14cc:	cd b7       	in	r28, 0x3d	; 61
    14ce:	de b7       	in	r29, 0x3e	; 62
    14d0:	cd 54       	subi	r28, 0x4D	; 77
    14d2:	d0 40       	sbci	r29, 0x00	; 0
    14d4:	0f b6       	in	r0, 0x3f	; 63
    14d6:	f8 94       	cli
    14d8:	de bf       	out	0x3e, r29	; 62
    14da:	0f be       	out	0x3f, r0	; 63
    14dc:	cd bf       	out	0x3d, r28	; 61
    14de:	fe 01       	movw	r30, r28
    14e0:	e7 5b       	subi	r30, 0xB7	; 183
    14e2:	ff 4f       	sbci	r31, 0xFF	; 255
    14e4:	91 83       	std	Z+1, r25	; 0x01
    14e6:	80 83       	st	Z, r24
    14e8:	fe 01       	movw	r30, r28
    14ea:	e5 5b       	subi	r30, 0xB5	; 181
    14ec:	ff 4f       	sbci	r31, 0xFF	; 255
    14ee:	60 83       	st	Z, r22
    14f0:	fe 01       	movw	r30, r28
    14f2:	e4 5b       	subi	r30, 0xB4	; 180
    14f4:	ff 4f       	sbci	r31, 0xFF	; 255
    14f6:	40 83       	st	Z, r20
    14f8:	fe 01       	movw	r30, r28
    14fa:	e3 5b       	subi	r30, 0xB3	; 179
    14fc:	ff 4f       	sbci	r31, 0xFF	; 255
    14fe:	20 83       	st	Z, r18
	u8 local_u8CGRAMAdress = copy_u8BlockNo * 8, local_u8Counter;
    1500:	fe 01       	movw	r30, r28
    1502:	e5 5b       	subi	r30, 0xB5	; 181
    1504:	ff 4f       	sbci	r31, 0xFF	; 255
    1506:	80 81       	ld	r24, Z
    1508:	88 2f       	mov	r24, r24
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	88 0f       	add	r24, r24
    150e:	99 1f       	adc	r25, r25
    1510:	88 0f       	add	r24, r24
    1512:	99 1f       	adc	r25, r25
    1514:	88 0f       	add	r24, r24
    1516:	99 1f       	adc	r25, r25
    1518:	fe 01       	movw	r30, r28
    151a:	e8 5b       	subi	r30, 0xB8	; 184
    151c:	ff 4f       	sbci	r31, 0xFF	; 255
    151e:	80 83       	st	Z, r24
    1520:	fe 01       	movw	r30, r28
    1522:	ed 5b       	subi	r30, 0xBD	; 189
    1524:	ff 4f       	sbci	r31, 0xFF	; 255
    1526:	80 e0       	ldi	r24, 0x00	; 0
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	a0 e8       	ldi	r26, 0x80	; 128
    152c:	bf e3       	ldi	r27, 0x3F	; 63
    152e:	80 83       	st	Z, r24
    1530:	91 83       	std	Z+1, r25	; 0x01
    1532:	a2 83       	std	Z+2, r26	; 0x02
    1534:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1536:	8e 01       	movw	r16, r28
    1538:	01 5c       	subi	r16, 0xC1	; 193
    153a:	1f 4f       	sbci	r17, 0xFF	; 255
    153c:	fe 01       	movw	r30, r28
    153e:	ed 5b       	subi	r30, 0xBD	; 189
    1540:	ff 4f       	sbci	r31, 0xFF	; 255
    1542:	60 81       	ld	r22, Z
    1544:	71 81       	ldd	r23, Z+1	; 0x01
    1546:	82 81       	ldd	r24, Z+2	; 0x02
    1548:	93 81       	ldd	r25, Z+3	; 0x03
    154a:	20 e0       	ldi	r18, 0x00	; 0
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	4a ef       	ldi	r20, 0xFA	; 250
    1550:	54 e4       	ldi	r21, 0x44	; 68
    1552:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1556:	dc 01       	movw	r26, r24
    1558:	cb 01       	movw	r24, r22
    155a:	f8 01       	movw	r30, r16
    155c:	80 83       	st	Z, r24
    155e:	91 83       	std	Z+1, r25	; 0x01
    1560:	a2 83       	std	Z+2, r26	; 0x02
    1562:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1564:	fe 01       	movw	r30, r28
    1566:	ff 96       	adiw	r30, 0x3f	; 63
    1568:	60 81       	ld	r22, Z
    156a:	71 81       	ldd	r23, Z+1	; 0x01
    156c:	82 81       	ldd	r24, Z+2	; 0x02
    156e:	93 81       	ldd	r25, Z+3	; 0x03
    1570:	20 e0       	ldi	r18, 0x00	; 0
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	40 e8       	ldi	r20, 0x80	; 128
    1576:	5f e3       	ldi	r21, 0x3F	; 63
    1578:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    157c:	88 23       	and	r24, r24
    157e:	2c f4       	brge	.+10     	; 0x158a <LCD_vidWriteSpecialCharecter+0xc6>
		__ticks = 1;
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	9e af       	std	Y+62, r25	; 0x3e
    1586:	8d af       	std	Y+61, r24	; 0x3d
    1588:	46 c0       	rjmp	.+140    	; 0x1616 <LCD_vidWriteSpecialCharecter+0x152>
	else if (__tmp > 65535)
    158a:	fe 01       	movw	r30, r28
    158c:	ff 96       	adiw	r30, 0x3f	; 63
    158e:	60 81       	ld	r22, Z
    1590:	71 81       	ldd	r23, Z+1	; 0x01
    1592:	82 81       	ldd	r24, Z+2	; 0x02
    1594:	93 81       	ldd	r25, Z+3	; 0x03
    1596:	20 e0       	ldi	r18, 0x00	; 0
    1598:	3f ef       	ldi	r19, 0xFF	; 255
    159a:	4f e7       	ldi	r20, 0x7F	; 127
    159c:	57 e4       	ldi	r21, 0x47	; 71
    159e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15a2:	18 16       	cp	r1, r24
    15a4:	64 f5       	brge	.+88     	; 0x15fe <LCD_vidWriteSpecialCharecter+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15a6:	fe 01       	movw	r30, r28
    15a8:	ed 5b       	subi	r30, 0xBD	; 189
    15aa:	ff 4f       	sbci	r31, 0xFF	; 255
    15ac:	60 81       	ld	r22, Z
    15ae:	71 81       	ldd	r23, Z+1	; 0x01
    15b0:	82 81       	ldd	r24, Z+2	; 0x02
    15b2:	93 81       	ldd	r25, Z+3	; 0x03
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	40 e2       	ldi	r20, 0x20	; 32
    15ba:	51 e4       	ldi	r21, 0x41	; 65
    15bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c0:	dc 01       	movw	r26, r24
    15c2:	cb 01       	movw	r24, r22
    15c4:	bc 01       	movw	r22, r24
    15c6:	cd 01       	movw	r24, r26
    15c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15cc:	dc 01       	movw	r26, r24
    15ce:	cb 01       	movw	r24, r22
    15d0:	9e af       	std	Y+62, r25	; 0x3e
    15d2:	8d af       	std	Y+61, r24	; 0x3d
    15d4:	0f c0       	rjmp	.+30     	; 0x15f4 <LCD_vidWriteSpecialCharecter+0x130>
    15d6:	88 ec       	ldi	r24, 0xC8	; 200
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	9c af       	std	Y+60, r25	; 0x3c
    15dc:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15de:	8b ad       	ldd	r24, Y+59	; 0x3b
    15e0:	9c ad       	ldd	r25, Y+60	; 0x3c
    15e2:	01 97       	sbiw	r24, 0x01	; 1
    15e4:	f1 f7       	brne	.-4      	; 0x15e2 <LCD_vidWriteSpecialCharecter+0x11e>
    15e6:	9c af       	std	Y+60, r25	; 0x3c
    15e8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ea:	8d ad       	ldd	r24, Y+61	; 0x3d
    15ec:	9e ad       	ldd	r25, Y+62	; 0x3e
    15ee:	01 97       	sbiw	r24, 0x01	; 1
    15f0:	9e af       	std	Y+62, r25	; 0x3e
    15f2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15f4:	8d ad       	ldd	r24, Y+61	; 0x3d
    15f6:	9e ad       	ldd	r25, Y+62	; 0x3e
    15f8:	00 97       	sbiw	r24, 0x00	; 0
    15fa:	69 f7       	brne	.-38     	; 0x15d6 <LCD_vidWriteSpecialCharecter+0x112>
    15fc:	16 c0       	rjmp	.+44     	; 0x162a <LCD_vidWriteSpecialCharecter+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15fe:	fe 01       	movw	r30, r28
    1600:	ff 96       	adiw	r30, 0x3f	; 63
    1602:	60 81       	ld	r22, Z
    1604:	71 81       	ldd	r23, Z+1	; 0x01
    1606:	82 81       	ldd	r24, Z+2	; 0x02
    1608:	93 81       	ldd	r25, Z+3	; 0x03
    160a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    160e:	dc 01       	movw	r26, r24
    1610:	cb 01       	movw	r24, r22
    1612:	9e af       	std	Y+62, r25	; 0x3e
    1614:	8d af       	std	Y+61, r24	; 0x3d
    1616:	8d ad       	ldd	r24, Y+61	; 0x3d
    1618:	9e ad       	ldd	r25, Y+62	; 0x3e
    161a:	9a af       	std	Y+58, r25	; 0x3a
    161c:	89 af       	std	Y+57, r24	; 0x39
    161e:	89 ad       	ldd	r24, Y+57	; 0x39
    1620:	9a ad       	ldd	r25, Y+58	; 0x3a
    1622:	01 97       	sbiw	r24, 0x01	; 1
    1624:	f1 f7       	brne	.-4      	; 0x1622 <LCD_vidWriteSpecialCharecter+0x15e>
    1626:	9a af       	std	Y+58, r25	; 0x3a
    1628:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1);
	LCD_u8sendCommand(local_u8CGRAMAdress + 64);
    162a:	fe 01       	movw	r30, r28
    162c:	e8 5b       	subi	r30, 0xB8	; 184
    162e:	ff 4f       	sbci	r31, 0xFF	; 255
    1630:	80 81       	ld	r24, Z
    1632:	80 5c       	subi	r24, 0xC0	; 192
    1634:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_u8sendCommand>
    1638:	80 e0       	ldi	r24, 0x00	; 0
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	a0 e8       	ldi	r26, 0x80	; 128
    163e:	bf e3       	ldi	r27, 0x3F	; 63
    1640:	8d ab       	std	Y+53, r24	; 0x35
    1642:	9e ab       	std	Y+54, r25	; 0x36
    1644:	af ab       	std	Y+55, r26	; 0x37
    1646:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1648:	6d a9       	ldd	r22, Y+53	; 0x35
    164a:	7e a9       	ldd	r23, Y+54	; 0x36
    164c:	8f a9       	ldd	r24, Y+55	; 0x37
    164e:	98 ad       	ldd	r25, Y+56	; 0x38
    1650:	20 e0       	ldi	r18, 0x00	; 0
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	4a ef       	ldi	r20, 0xFA	; 250
    1656:	54 e4       	ldi	r21, 0x44	; 68
    1658:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    165c:	dc 01       	movw	r26, r24
    165e:	cb 01       	movw	r24, r22
    1660:	89 ab       	std	Y+49, r24	; 0x31
    1662:	9a ab       	std	Y+50, r25	; 0x32
    1664:	ab ab       	std	Y+51, r26	; 0x33
    1666:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1668:	69 a9       	ldd	r22, Y+49	; 0x31
    166a:	7a a9       	ldd	r23, Y+50	; 0x32
    166c:	8b a9       	ldd	r24, Y+51	; 0x33
    166e:	9c a9       	ldd	r25, Y+52	; 0x34
    1670:	20 e0       	ldi	r18, 0x00	; 0
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	40 e8       	ldi	r20, 0x80	; 128
    1676:	5f e3       	ldi	r21, 0x3F	; 63
    1678:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    167c:	88 23       	and	r24, r24
    167e:	2c f4       	brge	.+10     	; 0x168a <LCD_vidWriteSpecialCharecter+0x1c6>
		__ticks = 1;
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	98 ab       	std	Y+48, r25	; 0x30
    1686:	8f a7       	std	Y+47, r24	; 0x2f
    1688:	3f c0       	rjmp	.+126    	; 0x1708 <LCD_vidWriteSpecialCharecter+0x244>
	else if (__tmp > 65535)
    168a:	69 a9       	ldd	r22, Y+49	; 0x31
    168c:	7a a9       	ldd	r23, Y+50	; 0x32
    168e:	8b a9       	ldd	r24, Y+51	; 0x33
    1690:	9c a9       	ldd	r25, Y+52	; 0x34
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	3f ef       	ldi	r19, 0xFF	; 255
    1696:	4f e7       	ldi	r20, 0x7F	; 127
    1698:	57 e4       	ldi	r21, 0x47	; 71
    169a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    169e:	18 16       	cp	r1, r24
    16a0:	4c f5       	brge	.+82     	; 0x16f4 <LCD_vidWriteSpecialCharecter+0x230>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16a2:	6d a9       	ldd	r22, Y+53	; 0x35
    16a4:	7e a9       	ldd	r23, Y+54	; 0x36
    16a6:	8f a9       	ldd	r24, Y+55	; 0x37
    16a8:	98 ad       	ldd	r25, Y+56	; 0x38
    16aa:	20 e0       	ldi	r18, 0x00	; 0
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	40 e2       	ldi	r20, 0x20	; 32
    16b0:	51 e4       	ldi	r21, 0x41	; 65
    16b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b6:	dc 01       	movw	r26, r24
    16b8:	cb 01       	movw	r24, r22
    16ba:	bc 01       	movw	r22, r24
    16bc:	cd 01       	movw	r24, r26
    16be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c2:	dc 01       	movw	r26, r24
    16c4:	cb 01       	movw	r24, r22
    16c6:	98 ab       	std	Y+48, r25	; 0x30
    16c8:	8f a7       	std	Y+47, r24	; 0x2f
    16ca:	0f c0       	rjmp	.+30     	; 0x16ea <LCD_vidWriteSpecialCharecter+0x226>
    16cc:	88 ec       	ldi	r24, 0xC8	; 200
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	9e a7       	std	Y+46, r25	; 0x2e
    16d2:	8d a7       	std	Y+45, r24	; 0x2d
    16d4:	8d a5       	ldd	r24, Y+45	; 0x2d
    16d6:	9e a5       	ldd	r25, Y+46	; 0x2e
    16d8:	01 97       	sbiw	r24, 0x01	; 1
    16da:	f1 f7       	brne	.-4      	; 0x16d8 <LCD_vidWriteSpecialCharecter+0x214>
    16dc:	9e a7       	std	Y+46, r25	; 0x2e
    16de:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    16e2:	98 a9       	ldd	r25, Y+48	; 0x30
    16e4:	01 97       	sbiw	r24, 0x01	; 1
    16e6:	98 ab       	std	Y+48, r25	; 0x30
    16e8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    16ec:	98 a9       	ldd	r25, Y+48	; 0x30
    16ee:	00 97       	sbiw	r24, 0x00	; 0
    16f0:	69 f7       	brne	.-38     	; 0x16cc <LCD_vidWriteSpecialCharecter+0x208>
    16f2:	14 c0       	rjmp	.+40     	; 0x171c <LCD_vidWriteSpecialCharecter+0x258>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16f4:	69 a9       	ldd	r22, Y+49	; 0x31
    16f6:	7a a9       	ldd	r23, Y+50	; 0x32
    16f8:	8b a9       	ldd	r24, Y+51	; 0x33
    16fa:	9c a9       	ldd	r25, Y+52	; 0x34
    16fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1700:	dc 01       	movw	r26, r24
    1702:	cb 01       	movw	r24, r22
    1704:	98 ab       	std	Y+48, r25	; 0x30
    1706:	8f a7       	std	Y+47, r24	; 0x2f
    1708:	8f a5       	ldd	r24, Y+47	; 0x2f
    170a:	98 a9       	ldd	r25, Y+48	; 0x30
    170c:	9c a7       	std	Y+44, r25	; 0x2c
    170e:	8b a7       	std	Y+43, r24	; 0x2b
    1710:	8b a5       	ldd	r24, Y+43	; 0x2b
    1712:	9c a5       	ldd	r25, Y+44	; 0x2c
    1714:	01 97       	sbiw	r24, 0x01	; 1
    1716:	f1 f7       	brne	.-4      	; 0x1714 <LCD_vidWriteSpecialCharecter+0x250>
    1718:	9c a7       	std	Y+44, r25	; 0x2c
    171a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	for(local_u8Counter=0; local_u8Counter<8; local_u8Counter++)
    171c:	fe 01       	movw	r30, r28
    171e:	e9 5b       	subi	r30, 0xB9	; 185
    1720:	ff 4f       	sbci	r31, 0xFF	; 255
    1722:	10 82       	st	Z, r1
    1724:	8c c0       	rjmp	.+280    	; 0x183e <LCD_vidWriteSpecialCharecter+0x37a>
	{
		LCD_u8sendData(copy_u8pPattern[local_u8Counter]);
    1726:	fe 01       	movw	r30, r28
    1728:	e9 5b       	subi	r30, 0xB9	; 185
    172a:	ff 4f       	sbci	r31, 0xFF	; 255
    172c:	80 81       	ld	r24, Z
    172e:	28 2f       	mov	r18, r24
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	fe 01       	movw	r30, r28
    1734:	e7 5b       	subi	r30, 0xB7	; 183
    1736:	ff 4f       	sbci	r31, 0xFF	; 255
    1738:	80 81       	ld	r24, Z
    173a:	91 81       	ldd	r25, Z+1	; 0x01
    173c:	fc 01       	movw	r30, r24
    173e:	e2 0f       	add	r30, r18
    1740:	f3 1f       	adc	r31, r19
    1742:	80 81       	ld	r24, Z
    1744:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <LCD_u8sendData>
    1748:	80 e0       	ldi	r24, 0x00	; 0
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	a0 e8       	ldi	r26, 0x80	; 128
    174e:	bf e3       	ldi	r27, 0x3F	; 63
    1750:	8f a3       	std	Y+39, r24	; 0x27
    1752:	98 a7       	std	Y+40, r25	; 0x28
    1754:	a9 a7       	std	Y+41, r26	; 0x29
    1756:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1758:	6f a1       	ldd	r22, Y+39	; 0x27
    175a:	78 a5       	ldd	r23, Y+40	; 0x28
    175c:	89 a5       	ldd	r24, Y+41	; 0x29
    175e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1760:	20 e0       	ldi	r18, 0x00	; 0
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	4a ef       	ldi	r20, 0xFA	; 250
    1766:	54 e4       	ldi	r21, 0x44	; 68
    1768:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    176c:	dc 01       	movw	r26, r24
    176e:	cb 01       	movw	r24, r22
    1770:	8b a3       	std	Y+35, r24	; 0x23
    1772:	9c a3       	std	Y+36, r25	; 0x24
    1774:	ad a3       	std	Y+37, r26	; 0x25
    1776:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1778:	6b a1       	ldd	r22, Y+35	; 0x23
    177a:	7c a1       	ldd	r23, Y+36	; 0x24
    177c:	8d a1       	ldd	r24, Y+37	; 0x25
    177e:	9e a1       	ldd	r25, Y+38	; 0x26
    1780:	20 e0       	ldi	r18, 0x00	; 0
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	40 e8       	ldi	r20, 0x80	; 128
    1786:	5f e3       	ldi	r21, 0x3F	; 63
    1788:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    178c:	88 23       	and	r24, r24
    178e:	2c f4       	brge	.+10     	; 0x179a <LCD_vidWriteSpecialCharecter+0x2d6>
		__ticks = 1;
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	9a a3       	std	Y+34, r25	; 0x22
    1796:	89 a3       	std	Y+33, r24	; 0x21
    1798:	3f c0       	rjmp	.+126    	; 0x1818 <LCD_vidWriteSpecialCharecter+0x354>
	else if (__tmp > 65535)
    179a:	6b a1       	ldd	r22, Y+35	; 0x23
    179c:	7c a1       	ldd	r23, Y+36	; 0x24
    179e:	8d a1       	ldd	r24, Y+37	; 0x25
    17a0:	9e a1       	ldd	r25, Y+38	; 0x26
    17a2:	20 e0       	ldi	r18, 0x00	; 0
    17a4:	3f ef       	ldi	r19, 0xFF	; 255
    17a6:	4f e7       	ldi	r20, 0x7F	; 127
    17a8:	57 e4       	ldi	r21, 0x47	; 71
    17aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17ae:	18 16       	cp	r1, r24
    17b0:	4c f5       	brge	.+82     	; 0x1804 <LCD_vidWriteSpecialCharecter+0x340>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17b2:	6f a1       	ldd	r22, Y+39	; 0x27
    17b4:	78 a5       	ldd	r23, Y+40	; 0x28
    17b6:	89 a5       	ldd	r24, Y+41	; 0x29
    17b8:	9a a5       	ldd	r25, Y+42	; 0x2a
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	40 e2       	ldi	r20, 0x20	; 32
    17c0:	51 e4       	ldi	r21, 0x41	; 65
    17c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17c6:	dc 01       	movw	r26, r24
    17c8:	cb 01       	movw	r24, r22
    17ca:	bc 01       	movw	r22, r24
    17cc:	cd 01       	movw	r24, r26
    17ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17d2:	dc 01       	movw	r26, r24
    17d4:	cb 01       	movw	r24, r22
    17d6:	9a a3       	std	Y+34, r25	; 0x22
    17d8:	89 a3       	std	Y+33, r24	; 0x21
    17da:	0f c0       	rjmp	.+30     	; 0x17fa <LCD_vidWriteSpecialCharecter+0x336>
    17dc:	88 ec       	ldi	r24, 0xC8	; 200
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	98 a3       	std	Y+32, r25	; 0x20
    17e2:	8f 8f       	std	Y+31, r24	; 0x1f
    17e4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17e6:	98 a1       	ldd	r25, Y+32	; 0x20
    17e8:	01 97       	sbiw	r24, 0x01	; 1
    17ea:	f1 f7       	brne	.-4      	; 0x17e8 <LCD_vidWriteSpecialCharecter+0x324>
    17ec:	98 a3       	std	Y+32, r25	; 0x20
    17ee:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17f0:	89 a1       	ldd	r24, Y+33	; 0x21
    17f2:	9a a1       	ldd	r25, Y+34	; 0x22
    17f4:	01 97       	sbiw	r24, 0x01	; 1
    17f6:	9a a3       	std	Y+34, r25	; 0x22
    17f8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17fa:	89 a1       	ldd	r24, Y+33	; 0x21
    17fc:	9a a1       	ldd	r25, Y+34	; 0x22
    17fe:	00 97       	sbiw	r24, 0x00	; 0
    1800:	69 f7       	brne	.-38     	; 0x17dc <LCD_vidWriteSpecialCharecter+0x318>
    1802:	14 c0       	rjmp	.+40     	; 0x182c <LCD_vidWriteSpecialCharecter+0x368>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1804:	6b a1       	ldd	r22, Y+35	; 0x23
    1806:	7c a1       	ldd	r23, Y+36	; 0x24
    1808:	8d a1       	ldd	r24, Y+37	; 0x25
    180a:	9e a1       	ldd	r25, Y+38	; 0x26
    180c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1810:	dc 01       	movw	r26, r24
    1812:	cb 01       	movw	r24, r22
    1814:	9a a3       	std	Y+34, r25	; 0x22
    1816:	89 a3       	std	Y+33, r24	; 0x21
    1818:	89 a1       	ldd	r24, Y+33	; 0x21
    181a:	9a a1       	ldd	r25, Y+34	; 0x22
    181c:	9e 8f       	std	Y+30, r25	; 0x1e
    181e:	8d 8f       	std	Y+29, r24	; 0x1d
    1820:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1822:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1824:	01 97       	sbiw	r24, 0x01	; 1
    1826:	f1 f7       	brne	.-4      	; 0x1824 <LCD_vidWriteSpecialCharecter+0x360>
    1828:	9e 8f       	std	Y+30, r25	; 0x1e
    182a:	8d 8f       	std	Y+29, r24	; 0x1d
	u8 local_u8CGRAMAdress = copy_u8BlockNo * 8, local_u8Counter;

	_delay_ms(1);
	LCD_u8sendCommand(local_u8CGRAMAdress + 64);
	_delay_ms(1);
	for(local_u8Counter=0; local_u8Counter<8; local_u8Counter++)
    182c:	de 01       	movw	r26, r28
    182e:	a9 5b       	subi	r26, 0xB9	; 185
    1830:	bf 4f       	sbci	r27, 0xFF	; 255
    1832:	fe 01       	movw	r30, r28
    1834:	e9 5b       	subi	r30, 0xB9	; 185
    1836:	ff 4f       	sbci	r31, 0xFF	; 255
    1838:	80 81       	ld	r24, Z
    183a:	8f 5f       	subi	r24, 0xFF	; 255
    183c:	8c 93       	st	X, r24
    183e:	fe 01       	movw	r30, r28
    1840:	e9 5b       	subi	r30, 0xB9	; 185
    1842:	ff 4f       	sbci	r31, 0xFF	; 255
    1844:	80 81       	ld	r24, Z
    1846:	88 30       	cpi	r24, 0x08	; 8
    1848:	08 f4       	brcc	.+2      	; 0x184c <LCD_vidWriteSpecialCharecter+0x388>
    184a:	6d cf       	rjmp	.-294    	; 0x1726 <LCD_vidWriteSpecialCharecter+0x262>
	{
		LCD_u8sendData(copy_u8pPattern[local_u8Counter]);
		_delay_ms(1);
	}

	LCD_vidGoToXY(copy_u8XPos, copy_u8YPos);
    184c:	fe 01       	movw	r30, r28
    184e:	e4 5b       	subi	r30, 0xB4	; 180
    1850:	ff 4f       	sbci	r31, 0xFF	; 255
    1852:	de 01       	movw	r26, r28
    1854:	a3 5b       	subi	r26, 0xB3	; 179
    1856:	bf 4f       	sbci	r27, 0xFF	; 255
    1858:	80 81       	ld	r24, Z
    185a:	6c 91       	ld	r22, X
    185c:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_vidGoToXY>
    1860:	80 e0       	ldi	r24, 0x00	; 0
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	a0 e8       	ldi	r26, 0x80	; 128
    1866:	bf e3       	ldi	r27, 0x3F	; 63
    1868:	89 8f       	std	Y+25, r24	; 0x19
    186a:	9a 8f       	std	Y+26, r25	; 0x1a
    186c:	ab 8f       	std	Y+27, r26	; 0x1b
    186e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1870:	69 8d       	ldd	r22, Y+25	; 0x19
    1872:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1874:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1876:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1878:	20 e0       	ldi	r18, 0x00	; 0
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	4a ef       	ldi	r20, 0xFA	; 250
    187e:	54 e4       	ldi	r21, 0x44	; 68
    1880:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1884:	dc 01       	movw	r26, r24
    1886:	cb 01       	movw	r24, r22
    1888:	8d 8b       	std	Y+21, r24	; 0x15
    188a:	9e 8b       	std	Y+22, r25	; 0x16
    188c:	af 8b       	std	Y+23, r26	; 0x17
    188e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1890:	6d 89       	ldd	r22, Y+21	; 0x15
    1892:	7e 89       	ldd	r23, Y+22	; 0x16
    1894:	8f 89       	ldd	r24, Y+23	; 0x17
    1896:	98 8d       	ldd	r25, Y+24	; 0x18
    1898:	20 e0       	ldi	r18, 0x00	; 0
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	40 e8       	ldi	r20, 0x80	; 128
    189e:	5f e3       	ldi	r21, 0x3F	; 63
    18a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18a4:	88 23       	and	r24, r24
    18a6:	2c f4       	brge	.+10     	; 0x18b2 <LCD_vidWriteSpecialCharecter+0x3ee>
		__ticks = 1;
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	9c 8b       	std	Y+20, r25	; 0x14
    18ae:	8b 8b       	std	Y+19, r24	; 0x13
    18b0:	3f c0       	rjmp	.+126    	; 0x1930 <LCD_vidWriteSpecialCharecter+0x46c>
	else if (__tmp > 65535)
    18b2:	6d 89       	ldd	r22, Y+21	; 0x15
    18b4:	7e 89       	ldd	r23, Y+22	; 0x16
    18b6:	8f 89       	ldd	r24, Y+23	; 0x17
    18b8:	98 8d       	ldd	r25, Y+24	; 0x18
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	3f ef       	ldi	r19, 0xFF	; 255
    18be:	4f e7       	ldi	r20, 0x7F	; 127
    18c0:	57 e4       	ldi	r21, 0x47	; 71
    18c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18c6:	18 16       	cp	r1, r24
    18c8:	4c f5       	brge	.+82     	; 0x191c <LCD_vidWriteSpecialCharecter+0x458>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ca:	69 8d       	ldd	r22, Y+25	; 0x19
    18cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	40 e2       	ldi	r20, 0x20	; 32
    18d8:	51 e4       	ldi	r21, 0x41	; 65
    18da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18de:	dc 01       	movw	r26, r24
    18e0:	cb 01       	movw	r24, r22
    18e2:	bc 01       	movw	r22, r24
    18e4:	cd 01       	movw	r24, r26
    18e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ea:	dc 01       	movw	r26, r24
    18ec:	cb 01       	movw	r24, r22
    18ee:	9c 8b       	std	Y+20, r25	; 0x14
    18f0:	8b 8b       	std	Y+19, r24	; 0x13
    18f2:	0f c0       	rjmp	.+30     	; 0x1912 <LCD_vidWriteSpecialCharecter+0x44e>
    18f4:	88 ec       	ldi	r24, 0xC8	; 200
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	9a 8b       	std	Y+18, r25	; 0x12
    18fa:	89 8b       	std	Y+17, r24	; 0x11
    18fc:	89 89       	ldd	r24, Y+17	; 0x11
    18fe:	9a 89       	ldd	r25, Y+18	; 0x12
    1900:	01 97       	sbiw	r24, 0x01	; 1
    1902:	f1 f7       	brne	.-4      	; 0x1900 <LCD_vidWriteSpecialCharecter+0x43c>
    1904:	9a 8b       	std	Y+18, r25	; 0x12
    1906:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1908:	8b 89       	ldd	r24, Y+19	; 0x13
    190a:	9c 89       	ldd	r25, Y+20	; 0x14
    190c:	01 97       	sbiw	r24, 0x01	; 1
    190e:	9c 8b       	std	Y+20, r25	; 0x14
    1910:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1912:	8b 89       	ldd	r24, Y+19	; 0x13
    1914:	9c 89       	ldd	r25, Y+20	; 0x14
    1916:	00 97       	sbiw	r24, 0x00	; 0
    1918:	69 f7       	brne	.-38     	; 0x18f4 <LCD_vidWriteSpecialCharecter+0x430>
    191a:	14 c0       	rjmp	.+40     	; 0x1944 <LCD_vidWriteSpecialCharecter+0x480>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    191c:	6d 89       	ldd	r22, Y+21	; 0x15
    191e:	7e 89       	ldd	r23, Y+22	; 0x16
    1920:	8f 89       	ldd	r24, Y+23	; 0x17
    1922:	98 8d       	ldd	r25, Y+24	; 0x18
    1924:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1928:	dc 01       	movw	r26, r24
    192a:	cb 01       	movw	r24, r22
    192c:	9c 8b       	std	Y+20, r25	; 0x14
    192e:	8b 8b       	std	Y+19, r24	; 0x13
    1930:	8b 89       	ldd	r24, Y+19	; 0x13
    1932:	9c 89       	ldd	r25, Y+20	; 0x14
    1934:	98 8b       	std	Y+16, r25	; 0x10
    1936:	8f 87       	std	Y+15, r24	; 0x0f
    1938:	8f 85       	ldd	r24, Y+15	; 0x0f
    193a:	98 89       	ldd	r25, Y+16	; 0x10
    193c:	01 97       	sbiw	r24, 0x01	; 1
    193e:	f1 f7       	brne	.-4      	; 0x193c <LCD_vidWriteSpecialCharecter+0x478>
    1940:	98 8b       	std	Y+16, r25	; 0x10
    1942:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_u8sendData(copy_u8BlockNo);
    1944:	fe 01       	movw	r30, r28
    1946:	e5 5b       	subi	r30, 0xB5	; 181
    1948:	ff 4f       	sbci	r31, 0xFF	; 255
    194a:	80 81       	ld	r24, Z
    194c:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <LCD_u8sendData>
    1950:	80 e0       	ldi	r24, 0x00	; 0
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	a0 e8       	ldi	r26, 0x80	; 128
    1956:	bf e3       	ldi	r27, 0x3F	; 63
    1958:	8b 87       	std	Y+11, r24	; 0x0b
    195a:	9c 87       	std	Y+12, r25	; 0x0c
    195c:	ad 87       	std	Y+13, r26	; 0x0d
    195e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1960:	6b 85       	ldd	r22, Y+11	; 0x0b
    1962:	7c 85       	ldd	r23, Y+12	; 0x0c
    1964:	8d 85       	ldd	r24, Y+13	; 0x0d
    1966:	9e 85       	ldd	r25, Y+14	; 0x0e
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	4a ef       	ldi	r20, 0xFA	; 250
    196e:	54 e4       	ldi	r21, 0x44	; 68
    1970:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1974:	dc 01       	movw	r26, r24
    1976:	cb 01       	movw	r24, r22
    1978:	8f 83       	std	Y+7, r24	; 0x07
    197a:	98 87       	std	Y+8, r25	; 0x08
    197c:	a9 87       	std	Y+9, r26	; 0x09
    197e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1980:	6f 81       	ldd	r22, Y+7	; 0x07
    1982:	78 85       	ldd	r23, Y+8	; 0x08
    1984:	89 85       	ldd	r24, Y+9	; 0x09
    1986:	9a 85       	ldd	r25, Y+10	; 0x0a
    1988:	20 e0       	ldi	r18, 0x00	; 0
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	40 e8       	ldi	r20, 0x80	; 128
    198e:	5f e3       	ldi	r21, 0x3F	; 63
    1990:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1994:	88 23       	and	r24, r24
    1996:	2c f4       	brge	.+10     	; 0x19a2 <LCD_vidWriteSpecialCharecter+0x4de>
		__ticks = 1;
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	9e 83       	std	Y+6, r25	; 0x06
    199e:	8d 83       	std	Y+5, r24	; 0x05
    19a0:	3f c0       	rjmp	.+126    	; 0x1a20 <LCD_vidWriteSpecialCharecter+0x55c>
	else if (__tmp > 65535)
    19a2:	6f 81       	ldd	r22, Y+7	; 0x07
    19a4:	78 85       	ldd	r23, Y+8	; 0x08
    19a6:	89 85       	ldd	r24, Y+9	; 0x09
    19a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	3f ef       	ldi	r19, 0xFF	; 255
    19ae:	4f e7       	ldi	r20, 0x7F	; 127
    19b0:	57 e4       	ldi	r21, 0x47	; 71
    19b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19b6:	18 16       	cp	r1, r24
    19b8:	4c f5       	brge	.+82     	; 0x1a0c <LCD_vidWriteSpecialCharecter+0x548>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    19bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    19be:	8d 85       	ldd	r24, Y+13	; 0x0d
    19c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    19c2:	20 e0       	ldi	r18, 0x00	; 0
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	40 e2       	ldi	r20, 0x20	; 32
    19c8:	51 e4       	ldi	r21, 0x41	; 65
    19ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ce:	dc 01       	movw	r26, r24
    19d0:	cb 01       	movw	r24, r22
    19d2:	bc 01       	movw	r22, r24
    19d4:	cd 01       	movw	r24, r26
    19d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	9e 83       	std	Y+6, r25	; 0x06
    19e0:	8d 83       	std	Y+5, r24	; 0x05
    19e2:	0f c0       	rjmp	.+30     	; 0x1a02 <LCD_vidWriteSpecialCharecter+0x53e>
    19e4:	88 ec       	ldi	r24, 0xC8	; 200
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	9c 83       	std	Y+4, r25	; 0x04
    19ea:	8b 83       	std	Y+3, r24	; 0x03
    19ec:	8b 81       	ldd	r24, Y+3	; 0x03
    19ee:	9c 81       	ldd	r25, Y+4	; 0x04
    19f0:	01 97       	sbiw	r24, 0x01	; 1
    19f2:	f1 f7       	brne	.-4      	; 0x19f0 <LCD_vidWriteSpecialCharecter+0x52c>
    19f4:	9c 83       	std	Y+4, r25	; 0x04
    19f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19f8:	8d 81       	ldd	r24, Y+5	; 0x05
    19fa:	9e 81       	ldd	r25, Y+6	; 0x06
    19fc:	01 97       	sbiw	r24, 0x01	; 1
    19fe:	9e 83       	std	Y+6, r25	; 0x06
    1a00:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a02:	8d 81       	ldd	r24, Y+5	; 0x05
    1a04:	9e 81       	ldd	r25, Y+6	; 0x06
    1a06:	00 97       	sbiw	r24, 0x00	; 0
    1a08:	69 f7       	brne	.-38     	; 0x19e4 <LCD_vidWriteSpecialCharecter+0x520>
    1a0a:	14 c0       	rjmp	.+40     	; 0x1a34 <LCD_vidWriteSpecialCharecter+0x570>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a0c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a0e:	78 85       	ldd	r23, Y+8	; 0x08
    1a10:	89 85       	ldd	r24, Y+9	; 0x09
    1a12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a18:	dc 01       	movw	r26, r24
    1a1a:	cb 01       	movw	r24, r22
    1a1c:	9e 83       	std	Y+6, r25	; 0x06
    1a1e:	8d 83       	std	Y+5, r24	; 0x05
    1a20:	8d 81       	ldd	r24, Y+5	; 0x05
    1a22:	9e 81       	ldd	r25, Y+6	; 0x06
    1a24:	9a 83       	std	Y+2, r25	; 0x02
    1a26:	89 83       	std	Y+1, r24	; 0x01
    1a28:	89 81       	ldd	r24, Y+1	; 0x01
    1a2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a2c:	01 97       	sbiw	r24, 0x01	; 1
    1a2e:	f1 f7       	brne	.-4      	; 0x1a2c <LCD_vidWriteSpecialCharecter+0x568>
    1a30:	9a 83       	std	Y+2, r25	; 0x02
    1a32:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1a34:	c3 5b       	subi	r28, 0xB3	; 179
    1a36:	df 4f       	sbci	r29, 0xFF	; 255
    1a38:	0f b6       	in	r0, 0x3f	; 63
    1a3a:	f8 94       	cli
    1a3c:	de bf       	out	0x3e, r29	; 62
    1a3e:	0f be       	out	0x3f, r0	; 63
    1a40:	cd bf       	out	0x3d, r28	; 61
    1a42:	cf 91       	pop	r28
    1a44:	df 91       	pop	r29
    1a46:	1f 91       	pop	r17
    1a48:	0f 91       	pop	r16
    1a4a:	08 95       	ret

00001a4c <LCD_u8sendData>:


u8 LCD_u8sendData(u8 copy_u8command)
{
    1a4c:	df 93       	push	r29
    1a4e:	cf 93       	push	r28
    1a50:	cd b7       	in	r28, 0x3d	; 61
    1a52:	de b7       	in	r29, 0x3e	; 62
    1a54:	2f 97       	sbiw	r28, 0x0f	; 15
    1a56:	0f b6       	in	r0, 0x3f	; 63
    1a58:	f8 94       	cli
    1a5a:	de bf       	out	0x3e, r29	; 62
    1a5c:	0f be       	out	0x3f, r0	; 63
    1a5e:	cd bf       	out	0x3d, r28	; 61
    1a60:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8setPinVal(LCD_CTRL_PORT, LCD_RS_PIN, HIGH);
    1a62:	80 e0       	ldi	r24, 0x00	; 0
    1a64:	62 e0       	ldi	r22, 0x02	; 2
    1a66:	41 e0       	ldi	r20, 0x01	; 1
    1a68:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_u8setPinVal>

	DIO_u8setPinVal(LCD_CTRL_PORT, LCD_RW_PIN, LOW);
    1a6c:	80 e0       	ldi	r24, 0x00	; 0
    1a6e:	61 e0       	ldi	r22, 0x01	; 1
    1a70:	40 e0       	ldi	r20, 0x00	; 0
    1a72:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_u8setPinVal>

	DIO_u8setPortVal(LCD_DATA_PORT, copy_u8command);
    1a76:	82 e0       	ldi	r24, 0x02	; 2
    1a78:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a7a:	0e 94 11 07 	call	0xe22	; 0xe22 <DIO_u8setPortVal>

	DIO_u8setPinVal(LCD_CTRL_PORT, LCD_E_PIN, HIGH);
    1a7e:	80 e0       	ldi	r24, 0x00	; 0
    1a80:	60 e0       	ldi	r22, 0x00	; 0
    1a82:	41 e0       	ldi	r20, 0x01	; 1
    1a84:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_u8setPinVal>
    1a88:	80 e0       	ldi	r24, 0x00	; 0
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	a0 e0       	ldi	r26, 0x00	; 0
    1a8e:	b0 e4       	ldi	r27, 0x40	; 64
    1a90:	8b 87       	std	Y+11, r24	; 0x0b
    1a92:	9c 87       	std	Y+12, r25	; 0x0c
    1a94:	ad 87       	std	Y+13, r26	; 0x0d
    1a96:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a98:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aa0:	20 e0       	ldi	r18, 0x00	; 0
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	4a ef       	ldi	r20, 0xFA	; 250
    1aa6:	54 e4       	ldi	r21, 0x44	; 68
    1aa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aac:	dc 01       	movw	r26, r24
    1aae:	cb 01       	movw	r24, r22
    1ab0:	8f 83       	std	Y+7, r24	; 0x07
    1ab2:	98 87       	std	Y+8, r25	; 0x08
    1ab4:	a9 87       	std	Y+9, r26	; 0x09
    1ab6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ab8:	6f 81       	ldd	r22, Y+7	; 0x07
    1aba:	78 85       	ldd	r23, Y+8	; 0x08
    1abc:	89 85       	ldd	r24, Y+9	; 0x09
    1abe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	40 e8       	ldi	r20, 0x80	; 128
    1ac6:	5f e3       	ldi	r21, 0x3F	; 63
    1ac8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1acc:	88 23       	and	r24, r24
    1ace:	2c f4       	brge	.+10     	; 0x1ada <LCD_u8sendData+0x8e>
		__ticks = 1;
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	9e 83       	std	Y+6, r25	; 0x06
    1ad6:	8d 83       	std	Y+5, r24	; 0x05
    1ad8:	3f c0       	rjmp	.+126    	; 0x1b58 <LCD_u8sendData+0x10c>
	else if (__tmp > 65535)
    1ada:	6f 81       	ldd	r22, Y+7	; 0x07
    1adc:	78 85       	ldd	r23, Y+8	; 0x08
    1ade:	89 85       	ldd	r24, Y+9	; 0x09
    1ae0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	3f ef       	ldi	r19, 0xFF	; 255
    1ae6:	4f e7       	ldi	r20, 0x7F	; 127
    1ae8:	57 e4       	ldi	r21, 0x47	; 71
    1aea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1aee:	18 16       	cp	r1, r24
    1af0:	4c f5       	brge	.+82     	; 0x1b44 <LCD_u8sendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1af4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1af6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1af8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	40 e2       	ldi	r20, 0x20	; 32
    1b00:	51 e4       	ldi	r21, 0x41	; 65
    1b02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b06:	dc 01       	movw	r26, r24
    1b08:	cb 01       	movw	r24, r22
    1b0a:	bc 01       	movw	r22, r24
    1b0c:	cd 01       	movw	r24, r26
    1b0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b12:	dc 01       	movw	r26, r24
    1b14:	cb 01       	movw	r24, r22
    1b16:	9e 83       	std	Y+6, r25	; 0x06
    1b18:	8d 83       	std	Y+5, r24	; 0x05
    1b1a:	0f c0       	rjmp	.+30     	; 0x1b3a <LCD_u8sendData+0xee>
    1b1c:	88 ec       	ldi	r24, 0xC8	; 200
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	9c 83       	std	Y+4, r25	; 0x04
    1b22:	8b 83       	std	Y+3, r24	; 0x03
    1b24:	8b 81       	ldd	r24, Y+3	; 0x03
    1b26:	9c 81       	ldd	r25, Y+4	; 0x04
    1b28:	01 97       	sbiw	r24, 0x01	; 1
    1b2a:	f1 f7       	brne	.-4      	; 0x1b28 <LCD_u8sendData+0xdc>
    1b2c:	9c 83       	std	Y+4, r25	; 0x04
    1b2e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b30:	8d 81       	ldd	r24, Y+5	; 0x05
    1b32:	9e 81       	ldd	r25, Y+6	; 0x06
    1b34:	01 97       	sbiw	r24, 0x01	; 1
    1b36:	9e 83       	std	Y+6, r25	; 0x06
    1b38:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b3e:	00 97       	sbiw	r24, 0x00	; 0
    1b40:	69 f7       	brne	.-38     	; 0x1b1c <LCD_u8sendData+0xd0>
    1b42:	14 c0       	rjmp	.+40     	; 0x1b6c <LCD_u8sendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b44:	6f 81       	ldd	r22, Y+7	; 0x07
    1b46:	78 85       	ldd	r23, Y+8	; 0x08
    1b48:	89 85       	ldd	r24, Y+9	; 0x09
    1b4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b50:	dc 01       	movw	r26, r24
    1b52:	cb 01       	movw	r24, r22
    1b54:	9e 83       	std	Y+6, r25	; 0x06
    1b56:	8d 83       	std	Y+5, r24	; 0x05
    1b58:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b5c:	9a 83       	std	Y+2, r25	; 0x02
    1b5e:	89 83       	std	Y+1, r24	; 0x01
    1b60:	89 81       	ldd	r24, Y+1	; 0x01
    1b62:	9a 81       	ldd	r25, Y+2	; 0x02
    1b64:	01 97       	sbiw	r24, 0x01	; 1
    1b66:	f1 f7       	brne	.-4      	; 0x1b64 <LCD_u8sendData+0x118>
    1b68:	9a 83       	std	Y+2, r25	; 0x02
    1b6a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8setPinVal(LCD_CTRL_PORT, LCD_E_PIN, LOW);
    1b6c:	80 e0       	ldi	r24, 0x00	; 0
    1b6e:	60 e0       	ldi	r22, 0x00	; 0
    1b70:	40 e0       	ldi	r20, 0x00	; 0
    1b72:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_u8setPinVal>

	return 0;
    1b76:	80 e0       	ldi	r24, 0x00	; 0
}
    1b78:	2f 96       	adiw	r28, 0x0f	; 15
    1b7a:	0f b6       	in	r0, 0x3f	; 63
    1b7c:	f8 94       	cli
    1b7e:	de bf       	out	0x3e, r29	; 62
    1b80:	0f be       	out	0x3f, r0	; 63
    1b82:	cd bf       	out	0x3d, r28	; 61
    1b84:	cf 91       	pop	r28
    1b86:	df 91       	pop	r29
    1b88:	08 95       	ret

00001b8a <LCD_u8sendCommand>:
u8 LCD_u8sendCommand(u8 copy_u8data)
{
    1b8a:	df 93       	push	r29
    1b8c:	cf 93       	push	r28
    1b8e:	cd b7       	in	r28, 0x3d	; 61
    1b90:	de b7       	in	r29, 0x3e	; 62
    1b92:	2f 97       	sbiw	r28, 0x0f	; 15
    1b94:	0f b6       	in	r0, 0x3f	; 63
    1b96:	f8 94       	cli
    1b98:	de bf       	out	0x3e, r29	; 62
    1b9a:	0f be       	out	0x3f, r0	; 63
    1b9c:	cd bf       	out	0x3d, r28	; 61
    1b9e:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8setPinVal(LCD_CTRL_PORT, LCD_RS_PIN, LOW);
    1ba0:	80 e0       	ldi	r24, 0x00	; 0
    1ba2:	62 e0       	ldi	r22, 0x02	; 2
    1ba4:	40 e0       	ldi	r20, 0x00	; 0
    1ba6:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_u8setPinVal>

	DIO_u8setPinVal(LCD_CTRL_PORT, LCD_RW_PIN, LOW);
    1baa:	80 e0       	ldi	r24, 0x00	; 0
    1bac:	61 e0       	ldi	r22, 0x01	; 1
    1bae:	40 e0       	ldi	r20, 0x00	; 0
    1bb0:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_u8setPinVal>

	DIO_u8setPortVal(LCD_DATA_PORT, copy_u8data);
    1bb4:	82 e0       	ldi	r24, 0x02	; 2
    1bb6:	6f 85       	ldd	r22, Y+15	; 0x0f
    1bb8:	0e 94 11 07 	call	0xe22	; 0xe22 <DIO_u8setPortVal>

	DIO_u8setPinVal(LCD_CTRL_PORT, LCD_E_PIN, HIGH);
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	60 e0       	ldi	r22, 0x00	; 0
    1bc0:	41 e0       	ldi	r20, 0x01	; 1
    1bc2:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_u8setPinVal>
    1bc6:	80 e0       	ldi	r24, 0x00	; 0
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	a0 e0       	ldi	r26, 0x00	; 0
    1bcc:	b0 e4       	ldi	r27, 0x40	; 64
    1bce:	8b 87       	std	Y+11, r24	; 0x0b
    1bd0:	9c 87       	std	Y+12, r25	; 0x0c
    1bd2:	ad 87       	std	Y+13, r26	; 0x0d
    1bd4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bda:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bdc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bde:	20 e0       	ldi	r18, 0x00	; 0
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	4a ef       	ldi	r20, 0xFA	; 250
    1be4:	54 e4       	ldi	r21, 0x44	; 68
    1be6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bea:	dc 01       	movw	r26, r24
    1bec:	cb 01       	movw	r24, r22
    1bee:	8f 83       	std	Y+7, r24	; 0x07
    1bf0:	98 87       	std	Y+8, r25	; 0x08
    1bf2:	a9 87       	std	Y+9, r26	; 0x09
    1bf4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bf6:	6f 81       	ldd	r22, Y+7	; 0x07
    1bf8:	78 85       	ldd	r23, Y+8	; 0x08
    1bfa:	89 85       	ldd	r24, Y+9	; 0x09
    1bfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	40 e8       	ldi	r20, 0x80	; 128
    1c04:	5f e3       	ldi	r21, 0x3F	; 63
    1c06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c0a:	88 23       	and	r24, r24
    1c0c:	2c f4       	brge	.+10     	; 0x1c18 <LCD_u8sendCommand+0x8e>
		__ticks = 1;
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	9e 83       	std	Y+6, r25	; 0x06
    1c14:	8d 83       	std	Y+5, r24	; 0x05
    1c16:	3f c0       	rjmp	.+126    	; 0x1c96 <LCD_u8sendCommand+0x10c>
	else if (__tmp > 65535)
    1c18:	6f 81       	ldd	r22, Y+7	; 0x07
    1c1a:	78 85       	ldd	r23, Y+8	; 0x08
    1c1c:	89 85       	ldd	r24, Y+9	; 0x09
    1c1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c20:	20 e0       	ldi	r18, 0x00	; 0
    1c22:	3f ef       	ldi	r19, 0xFF	; 255
    1c24:	4f e7       	ldi	r20, 0x7F	; 127
    1c26:	57 e4       	ldi	r21, 0x47	; 71
    1c28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c2c:	18 16       	cp	r1, r24
    1c2e:	4c f5       	brge	.+82     	; 0x1c82 <LCD_u8sendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c30:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c32:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c34:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c36:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c38:	20 e0       	ldi	r18, 0x00	; 0
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	40 e2       	ldi	r20, 0x20	; 32
    1c3e:	51 e4       	ldi	r21, 0x41	; 65
    1c40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c44:	dc 01       	movw	r26, r24
    1c46:	cb 01       	movw	r24, r22
    1c48:	bc 01       	movw	r22, r24
    1c4a:	cd 01       	movw	r24, r26
    1c4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c50:	dc 01       	movw	r26, r24
    1c52:	cb 01       	movw	r24, r22
    1c54:	9e 83       	std	Y+6, r25	; 0x06
    1c56:	8d 83       	std	Y+5, r24	; 0x05
    1c58:	0f c0       	rjmp	.+30     	; 0x1c78 <LCD_u8sendCommand+0xee>
    1c5a:	88 ec       	ldi	r24, 0xC8	; 200
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	9c 83       	std	Y+4, r25	; 0x04
    1c60:	8b 83       	std	Y+3, r24	; 0x03
    1c62:	8b 81       	ldd	r24, Y+3	; 0x03
    1c64:	9c 81       	ldd	r25, Y+4	; 0x04
    1c66:	01 97       	sbiw	r24, 0x01	; 1
    1c68:	f1 f7       	brne	.-4      	; 0x1c66 <LCD_u8sendCommand+0xdc>
    1c6a:	9c 83       	std	Y+4, r25	; 0x04
    1c6c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c70:	9e 81       	ldd	r25, Y+6	; 0x06
    1c72:	01 97       	sbiw	r24, 0x01	; 1
    1c74:	9e 83       	std	Y+6, r25	; 0x06
    1c76:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c78:	8d 81       	ldd	r24, Y+5	; 0x05
    1c7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c7c:	00 97       	sbiw	r24, 0x00	; 0
    1c7e:	69 f7       	brne	.-38     	; 0x1c5a <LCD_u8sendCommand+0xd0>
    1c80:	14 c0       	rjmp	.+40     	; 0x1caa <LCD_u8sendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c82:	6f 81       	ldd	r22, Y+7	; 0x07
    1c84:	78 85       	ldd	r23, Y+8	; 0x08
    1c86:	89 85       	ldd	r24, Y+9	; 0x09
    1c88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c8e:	dc 01       	movw	r26, r24
    1c90:	cb 01       	movw	r24, r22
    1c92:	9e 83       	std	Y+6, r25	; 0x06
    1c94:	8d 83       	std	Y+5, r24	; 0x05
    1c96:	8d 81       	ldd	r24, Y+5	; 0x05
    1c98:	9e 81       	ldd	r25, Y+6	; 0x06
    1c9a:	9a 83       	std	Y+2, r25	; 0x02
    1c9c:	89 83       	std	Y+1, r24	; 0x01
    1c9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ca0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca2:	01 97       	sbiw	r24, 0x01	; 1
    1ca4:	f1 f7       	brne	.-4      	; 0x1ca2 <LCD_u8sendCommand+0x118>
    1ca6:	9a 83       	std	Y+2, r25	; 0x02
    1ca8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8setPinVal(LCD_CTRL_PORT, LCD_E_PIN, LOW);
    1caa:	80 e0       	ldi	r24, 0x00	; 0
    1cac:	60 e0       	ldi	r22, 0x00	; 0
    1cae:	40 e0       	ldi	r20, 0x00	; 0
    1cb0:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_u8setPinVal>

	return 0;
    1cb4:	80 e0       	ldi	r24, 0x00	; 0
}
    1cb6:	2f 96       	adiw	r28, 0x0f	; 15
    1cb8:	0f b6       	in	r0, 0x3f	; 63
    1cba:	f8 94       	cli
    1cbc:	de bf       	out	0x3e, r29	; 62
    1cbe:	0f be       	out	0x3f, r0	; 63
    1cc0:	cd bf       	out	0x3d, r28	; 61
    1cc2:	cf 91       	pop	r28
    1cc4:	df 91       	pop	r29
    1cc6:	08 95       	ret

00001cc8 <LCD_vidInit>:

void LCD_vidInit(void)
{
    1cc8:	df 93       	push	r29
    1cca:	cf 93       	push	r28
    1ccc:	cd b7       	in	r28, 0x3d	; 61
    1cce:	de b7       	in	r29, 0x3e	; 62
    1cd0:	2e 97       	sbiw	r28, 0x0e	; 14
    1cd2:	0f b6       	in	r0, 0x3f	; 63
    1cd4:	f8 94       	cli
    1cd6:	de bf       	out	0x3e, r29	; 62
    1cd8:	0f be       	out	0x3f, r0	; 63
    1cda:	cd bf       	out	0x3d, r28	; 61
	DIO_u8setPortDir(LCD_DATA_PORT, FULL_OUTPUT);
    1cdc:	82 e0       	ldi	r24, 0x02	; 2
    1cde:	6f ef       	ldi	r22, 0xFF	; 255
    1ce0:	0e 94 c9 06 	call	0xd92	; 0xd92 <DIO_u8setPortDir>
	DIO_u8setPinDir(LCD_CTRL_PORT, LCD_E_PIN, OUTPUT);
    1ce4:	80 e0       	ldi	r24, 0x00	; 0
    1ce6:	60 e0       	ldi	r22, 0x00	; 0
    1ce8:	41 e0       	ldi	r20, 0x01	; 1
    1cea:	0e 94 ab 07 	call	0xf56	; 0xf56 <DIO_u8setPinDir>
	DIO_u8setPinDir(LCD_CTRL_PORT, LCD_RS_PIN, OUTPUT);
    1cee:	80 e0       	ldi	r24, 0x00	; 0
    1cf0:	62 e0       	ldi	r22, 0x02	; 2
    1cf2:	41 e0       	ldi	r20, 0x01	; 1
    1cf4:	0e 94 ab 07 	call	0xf56	; 0xf56 <DIO_u8setPinDir>
	DIO_u8setPinDir(LCD_CTRL_PORT, LCD_RW_PIN, OUTPUT);
    1cf8:	80 e0       	ldi	r24, 0x00	; 0
    1cfa:	61 e0       	ldi	r22, 0x01	; 1
    1cfc:	41 e0       	ldi	r20, 0x01	; 1
    1cfe:	0e 94 ab 07 	call	0xf56	; 0xf56 <DIO_u8setPinDir>
    1d02:	80 e0       	ldi	r24, 0x00	; 0
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	a0 e2       	ldi	r26, 0x20	; 32
    1d08:	b2 e4       	ldi	r27, 0x42	; 66
    1d0a:	8b 87       	std	Y+11, r24	; 0x0b
    1d0c:	9c 87       	std	Y+12, r25	; 0x0c
    1d0e:	ad 87       	std	Y+13, r26	; 0x0d
    1d10:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d12:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d14:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d16:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d18:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	4a ef       	ldi	r20, 0xFA	; 250
    1d20:	54 e4       	ldi	r21, 0x44	; 68
    1d22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d26:	dc 01       	movw	r26, r24
    1d28:	cb 01       	movw	r24, r22
    1d2a:	8f 83       	std	Y+7, r24	; 0x07
    1d2c:	98 87       	std	Y+8, r25	; 0x08
    1d2e:	a9 87       	std	Y+9, r26	; 0x09
    1d30:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d32:	6f 81       	ldd	r22, Y+7	; 0x07
    1d34:	78 85       	ldd	r23, Y+8	; 0x08
    1d36:	89 85       	ldd	r24, Y+9	; 0x09
    1d38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d3a:	20 e0       	ldi	r18, 0x00	; 0
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	40 e8       	ldi	r20, 0x80	; 128
    1d40:	5f e3       	ldi	r21, 0x3F	; 63
    1d42:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d46:	88 23       	and	r24, r24
    1d48:	2c f4       	brge	.+10     	; 0x1d54 <LCD_vidInit+0x8c>
		__ticks = 1;
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	9e 83       	std	Y+6, r25	; 0x06
    1d50:	8d 83       	std	Y+5, r24	; 0x05
    1d52:	3f c0       	rjmp	.+126    	; 0x1dd2 <LCD_vidInit+0x10a>
	else if (__tmp > 65535)
    1d54:	6f 81       	ldd	r22, Y+7	; 0x07
    1d56:	78 85       	ldd	r23, Y+8	; 0x08
    1d58:	89 85       	ldd	r24, Y+9	; 0x09
    1d5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d5c:	20 e0       	ldi	r18, 0x00	; 0
    1d5e:	3f ef       	ldi	r19, 0xFF	; 255
    1d60:	4f e7       	ldi	r20, 0x7F	; 127
    1d62:	57 e4       	ldi	r21, 0x47	; 71
    1d64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d68:	18 16       	cp	r1, r24
    1d6a:	4c f5       	brge	.+82     	; 0x1dbe <LCD_vidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d70:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d72:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	40 e2       	ldi	r20, 0x20	; 32
    1d7a:	51 e4       	ldi	r21, 0x41	; 65
    1d7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d80:	dc 01       	movw	r26, r24
    1d82:	cb 01       	movw	r24, r22
    1d84:	bc 01       	movw	r22, r24
    1d86:	cd 01       	movw	r24, r26
    1d88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	cb 01       	movw	r24, r22
    1d90:	9e 83       	std	Y+6, r25	; 0x06
    1d92:	8d 83       	std	Y+5, r24	; 0x05
    1d94:	0f c0       	rjmp	.+30     	; 0x1db4 <LCD_vidInit+0xec>
    1d96:	88 ec       	ldi	r24, 0xC8	; 200
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	9c 83       	std	Y+4, r25	; 0x04
    1d9c:	8b 83       	std	Y+3, r24	; 0x03
    1d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1da0:	9c 81       	ldd	r25, Y+4	; 0x04
    1da2:	01 97       	sbiw	r24, 0x01	; 1
    1da4:	f1 f7       	brne	.-4      	; 0x1da2 <LCD_vidInit+0xda>
    1da6:	9c 83       	std	Y+4, r25	; 0x04
    1da8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1daa:	8d 81       	ldd	r24, Y+5	; 0x05
    1dac:	9e 81       	ldd	r25, Y+6	; 0x06
    1dae:	01 97       	sbiw	r24, 0x01	; 1
    1db0:	9e 83       	std	Y+6, r25	; 0x06
    1db2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1db4:	8d 81       	ldd	r24, Y+5	; 0x05
    1db6:	9e 81       	ldd	r25, Y+6	; 0x06
    1db8:	00 97       	sbiw	r24, 0x00	; 0
    1dba:	69 f7       	brne	.-38     	; 0x1d96 <LCD_vidInit+0xce>
    1dbc:	14 c0       	rjmp	.+40     	; 0x1de6 <LCD_vidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dbe:	6f 81       	ldd	r22, Y+7	; 0x07
    1dc0:	78 85       	ldd	r23, Y+8	; 0x08
    1dc2:	89 85       	ldd	r24, Y+9	; 0x09
    1dc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dca:	dc 01       	movw	r26, r24
    1dcc:	cb 01       	movw	r24, r22
    1dce:	9e 83       	std	Y+6, r25	; 0x06
    1dd0:	8d 83       	std	Y+5, r24	; 0x05
    1dd2:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd4:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd6:	9a 83       	std	Y+2, r25	; 0x02
    1dd8:	89 83       	std	Y+1, r24	; 0x01
    1dda:	89 81       	ldd	r24, Y+1	; 0x01
    1ddc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dde:	01 97       	sbiw	r24, 0x01	; 1
    1de0:	f1 f7       	brne	.-4      	; 0x1dde <LCD_vidInit+0x116>
    1de2:	9a 83       	std	Y+2, r25	; 0x02
    1de4:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(40);						//Wait more than 30 ms after power on

	LCD_u8sendCommand(0b00111000);		//Function set cmd: 2 lines, 5x8 font size
    1de6:	88 e3       	ldi	r24, 0x38	; 56
    1de8:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_u8sendCommand>

	LCD_u8sendCommand(0b00001110);		//Function set cmd: Display enable, disable cursor, disable blinking cursor
    1dec:	8e e0       	ldi	r24, 0x0E	; 14
    1dee:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_u8sendCommand>

	LCD_u8sendCommand(1);				//Function set: clear display
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_u8sendCommand>


}
    1df8:	2e 96       	adiw	r28, 0x0e	; 14
    1dfa:	0f b6       	in	r0, 0x3f	; 63
    1dfc:	f8 94       	cli
    1dfe:	de bf       	out	0x3e, r29	; 62
    1e00:	0f be       	out	0x3f, r0	; 63
    1e02:	cd bf       	out	0x3d, r28	; 61
    1e04:	cf 91       	pop	r28
    1e06:	df 91       	pop	r29
    1e08:	08 95       	ret

00001e0a <LCD_vidStarterString>:

void LCD_vidStarterString(const u8* copy_pcString)
{
    1e0a:	df 93       	push	r29
    1e0c:	cf 93       	push	r28
    1e0e:	cd b7       	in	r28, 0x3d	; 61
    1e10:	de b7       	in	r29, 0x3e	; 62
    1e12:	6f 97       	sbiw	r28, 0x1f	; 31
    1e14:	0f b6       	in	r0, 0x3f	; 63
    1e16:	f8 94       	cli
    1e18:	de bf       	out	0x3e, r29	; 62
    1e1a:	0f be       	out	0x3f, r0	; 63
    1e1c:	cd bf       	out	0x3d, r28	; 61
    1e1e:	9f 8f       	std	Y+31, r25	; 0x1f
    1e20:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 counter = 0;
    1e22:	1d 8e       	std	Y+29, r1	; 0x1d
	LCD_vidGoToXY(3, 0);
    1e24:	83 e0       	ldi	r24, 0x03	; 3
    1e26:	60 e0       	ldi	r22, 0x00	; 0
    1e28:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_vidGoToXY>
    1e2c:	80 c0       	rjmp	.+256    	; 0x1f2e <LCD_vidStarterString+0x124>
	while(copy_pcString[counter] != '\0')
	{
		LCD_u8sendData(copy_pcString[counter]);
    1e2e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e30:	28 2f       	mov	r18, r24
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e36:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1e38:	fc 01       	movw	r30, r24
    1e3a:	e2 0f       	add	r30, r18
    1e3c:	f3 1f       	adc	r31, r19
    1e3e:	80 81       	ld	r24, Z
    1e40:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <LCD_u8sendData>
		counter++;
    1e44:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e46:	8f 5f       	subi	r24, 0xFF	; 255
    1e48:	8d 8f       	std	Y+29, r24	; 0x1d
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	a6 e1       	ldi	r26, 0x16	; 22
    1e50:	b3 e4       	ldi	r27, 0x43	; 67
    1e52:	89 8f       	std	Y+25, r24	; 0x19
    1e54:	9a 8f       	std	Y+26, r25	; 0x1a
    1e56:	ab 8f       	std	Y+27, r26	; 0x1b
    1e58:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e5a:	69 8d       	ldd	r22, Y+25	; 0x19
    1e5c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e60:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e62:	20 e0       	ldi	r18, 0x00	; 0
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	4a ef       	ldi	r20, 0xFA	; 250
    1e68:	54 e4       	ldi	r21, 0x44	; 68
    1e6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e6e:	dc 01       	movw	r26, r24
    1e70:	cb 01       	movw	r24, r22
    1e72:	8d 8b       	std	Y+21, r24	; 0x15
    1e74:	9e 8b       	std	Y+22, r25	; 0x16
    1e76:	af 8b       	std	Y+23, r26	; 0x17
    1e78:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e7a:	6d 89       	ldd	r22, Y+21	; 0x15
    1e7c:	7e 89       	ldd	r23, Y+22	; 0x16
    1e7e:	8f 89       	ldd	r24, Y+23	; 0x17
    1e80:	98 8d       	ldd	r25, Y+24	; 0x18
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	40 e8       	ldi	r20, 0x80	; 128
    1e88:	5f e3       	ldi	r21, 0x3F	; 63
    1e8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e8e:	88 23       	and	r24, r24
    1e90:	2c f4       	brge	.+10     	; 0x1e9c <LCD_vidStarterString+0x92>
		__ticks = 1;
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	9c 8b       	std	Y+20, r25	; 0x14
    1e98:	8b 8b       	std	Y+19, r24	; 0x13
    1e9a:	3f c0       	rjmp	.+126    	; 0x1f1a <LCD_vidStarterString+0x110>
	else if (__tmp > 65535)
    1e9c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e9e:	7e 89       	ldd	r23, Y+22	; 0x16
    1ea0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ea2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	3f ef       	ldi	r19, 0xFF	; 255
    1ea8:	4f e7       	ldi	r20, 0x7F	; 127
    1eaa:	57 e4       	ldi	r21, 0x47	; 71
    1eac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eb0:	18 16       	cp	r1, r24
    1eb2:	4c f5       	brge	.+82     	; 0x1f06 <LCD_vidStarterString+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eb4:	69 8d       	ldd	r22, Y+25	; 0x19
    1eb6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eb8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	40 e2       	ldi	r20, 0x20	; 32
    1ec2:	51 e4       	ldi	r21, 0x41	; 65
    1ec4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec8:	dc 01       	movw	r26, r24
    1eca:	cb 01       	movw	r24, r22
    1ecc:	bc 01       	movw	r22, r24
    1ece:	cd 01       	movw	r24, r26
    1ed0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed4:	dc 01       	movw	r26, r24
    1ed6:	cb 01       	movw	r24, r22
    1ed8:	9c 8b       	std	Y+20, r25	; 0x14
    1eda:	8b 8b       	std	Y+19, r24	; 0x13
    1edc:	0f c0       	rjmp	.+30     	; 0x1efc <LCD_vidStarterString+0xf2>
    1ede:	88 ec       	ldi	r24, 0xC8	; 200
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	9a 8b       	std	Y+18, r25	; 0x12
    1ee4:	89 8b       	std	Y+17, r24	; 0x11
    1ee6:	89 89       	ldd	r24, Y+17	; 0x11
    1ee8:	9a 89       	ldd	r25, Y+18	; 0x12
    1eea:	01 97       	sbiw	r24, 0x01	; 1
    1eec:	f1 f7       	brne	.-4      	; 0x1eea <LCD_vidStarterString+0xe0>
    1eee:	9a 8b       	std	Y+18, r25	; 0x12
    1ef0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ef4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ef6:	01 97       	sbiw	r24, 0x01	; 1
    1ef8:	9c 8b       	std	Y+20, r25	; 0x14
    1efa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1efc:	8b 89       	ldd	r24, Y+19	; 0x13
    1efe:	9c 89       	ldd	r25, Y+20	; 0x14
    1f00:	00 97       	sbiw	r24, 0x00	; 0
    1f02:	69 f7       	brne	.-38     	; 0x1ede <LCD_vidStarterString+0xd4>
    1f04:	14 c0       	rjmp	.+40     	; 0x1f2e <LCD_vidStarterString+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f06:	6d 89       	ldd	r22, Y+21	; 0x15
    1f08:	7e 89       	ldd	r23, Y+22	; 0x16
    1f0a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f0c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f12:	dc 01       	movw	r26, r24
    1f14:	cb 01       	movw	r24, r22
    1f16:	9c 8b       	std	Y+20, r25	; 0x14
    1f18:	8b 8b       	std	Y+19, r24	; 0x13
    1f1a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f1c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f1e:	98 8b       	std	Y+16, r25	; 0x10
    1f20:	8f 87       	std	Y+15, r24	; 0x0f
    1f22:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f24:	98 89       	ldd	r25, Y+16	; 0x10
    1f26:	01 97       	sbiw	r24, 0x01	; 1
    1f28:	f1 f7       	brne	.-4      	; 0x1f26 <LCD_vidStarterString+0x11c>
    1f2a:	98 8b       	std	Y+16, r25	; 0x10
    1f2c:	8f 87       	std	Y+15, r24	; 0x0f

void LCD_vidStarterString(const u8* copy_pcString)
{
	u8 counter = 0;
	LCD_vidGoToXY(3, 0);
	while(copy_pcString[counter] != '\0')
    1f2e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f30:	28 2f       	mov	r18, r24
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f36:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f38:	fc 01       	movw	r30, r24
    1f3a:	e2 0f       	add	r30, r18
    1f3c:	f3 1f       	adc	r31, r19
    1f3e:	80 81       	ld	r24, Z
    1f40:	88 23       	and	r24, r24
    1f42:	09 f0       	breq	.+2      	; 0x1f46 <LCD_vidStarterString+0x13c>
    1f44:	74 cf       	rjmp	.-280    	; 0x1e2e <LCD_vidStarterString+0x24>
	{
		LCD_u8sendData(copy_pcString[counter]);
		counter++;
		_delay_ms(150);
	}
	LCD_vidShiftRight();
    1f46:	0e 94 8d 12 	call	0x251a	; 0x251a <LCD_vidShiftRight>
    1f4a:	80 e0       	ldi	r24, 0x00	; 0
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	a8 ec       	ldi	r26, 0xC8	; 200
    1f50:	b2 e4       	ldi	r27, 0x42	; 66
    1f52:	8b 87       	std	Y+11, r24	; 0x0b
    1f54:	9c 87       	std	Y+12, r25	; 0x0c
    1f56:	ad 87       	std	Y+13, r26	; 0x0d
    1f58:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f60:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f62:	20 e0       	ldi	r18, 0x00	; 0
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	4a ef       	ldi	r20, 0xFA	; 250
    1f68:	54 e4       	ldi	r21, 0x44	; 68
    1f6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f6e:	dc 01       	movw	r26, r24
    1f70:	cb 01       	movw	r24, r22
    1f72:	8f 83       	std	Y+7, r24	; 0x07
    1f74:	98 87       	std	Y+8, r25	; 0x08
    1f76:	a9 87       	std	Y+9, r26	; 0x09
    1f78:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f7c:	78 85       	ldd	r23, Y+8	; 0x08
    1f7e:	89 85       	ldd	r24, Y+9	; 0x09
    1f80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	40 e8       	ldi	r20, 0x80	; 128
    1f88:	5f e3       	ldi	r21, 0x3F	; 63
    1f8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f8e:	88 23       	and	r24, r24
    1f90:	2c f4       	brge	.+10     	; 0x1f9c <LCD_vidStarterString+0x192>
		__ticks = 1;
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	9e 83       	std	Y+6, r25	; 0x06
    1f98:	8d 83       	std	Y+5, r24	; 0x05
    1f9a:	3f c0       	rjmp	.+126    	; 0x201a <LCD_vidStarterString+0x210>
	else if (__tmp > 65535)
    1f9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f9e:	78 85       	ldd	r23, Y+8	; 0x08
    1fa0:	89 85       	ldd	r24, Y+9	; 0x09
    1fa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	3f ef       	ldi	r19, 0xFF	; 255
    1fa8:	4f e7       	ldi	r20, 0x7F	; 127
    1faa:	57 e4       	ldi	r21, 0x47	; 71
    1fac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fb0:	18 16       	cp	r1, r24
    1fb2:	4c f5       	brge	.+82     	; 0x2006 <LCD_vidStarterString+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fba:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	40 e2       	ldi	r20, 0x20	; 32
    1fc2:	51 e4       	ldi	r21, 0x41	; 65
    1fc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	bc 01       	movw	r22, r24
    1fce:	cd 01       	movw	r24, r26
    1fd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd4:	dc 01       	movw	r26, r24
    1fd6:	cb 01       	movw	r24, r22
    1fd8:	9e 83       	std	Y+6, r25	; 0x06
    1fda:	8d 83       	std	Y+5, r24	; 0x05
    1fdc:	0f c0       	rjmp	.+30     	; 0x1ffc <LCD_vidStarterString+0x1f2>
    1fde:	88 ec       	ldi	r24, 0xC8	; 200
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	9c 83       	std	Y+4, r25	; 0x04
    1fe4:	8b 83       	std	Y+3, r24	; 0x03
    1fe6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fea:	01 97       	sbiw	r24, 0x01	; 1
    1fec:	f1 f7       	brne	.-4      	; 0x1fea <LCD_vidStarterString+0x1e0>
    1fee:	9c 83       	std	Y+4, r25	; 0x04
    1ff0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff6:	01 97       	sbiw	r24, 0x01	; 1
    1ff8:	9e 83       	std	Y+6, r25	; 0x06
    1ffa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ffc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ffe:	9e 81       	ldd	r25, Y+6	; 0x06
    2000:	00 97       	sbiw	r24, 0x00	; 0
    2002:	69 f7       	brne	.-38     	; 0x1fde <LCD_vidStarterString+0x1d4>
    2004:	14 c0       	rjmp	.+40     	; 0x202e <LCD_vidStarterString+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2006:	6f 81       	ldd	r22, Y+7	; 0x07
    2008:	78 85       	ldd	r23, Y+8	; 0x08
    200a:	89 85       	ldd	r24, Y+9	; 0x09
    200c:	9a 85       	ldd	r25, Y+10	; 0x0a
    200e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	9e 83       	std	Y+6, r25	; 0x06
    2018:	8d 83       	std	Y+5, r24	; 0x05
    201a:	8d 81       	ldd	r24, Y+5	; 0x05
    201c:	9e 81       	ldd	r25, Y+6	; 0x06
    201e:	9a 83       	std	Y+2, r25	; 0x02
    2020:	89 83       	std	Y+1, r24	; 0x01
    2022:	89 81       	ldd	r24, Y+1	; 0x01
    2024:	9a 81       	ldd	r25, Y+2	; 0x02
    2026:	01 97       	sbiw	r24, 0x01	; 1
    2028:	f1 f7       	brne	.-4      	; 0x2026 <LCD_vidStarterString+0x21c>
    202a:	9a 83       	std	Y+2, r25	; 0x02
    202c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
}
    202e:	6f 96       	adiw	r28, 0x1f	; 31
    2030:	0f b6       	in	r0, 0x3f	; 63
    2032:	f8 94       	cli
    2034:	de bf       	out	0x3e, r29	; 62
    2036:	0f be       	out	0x3f, r0	; 63
    2038:	cd bf       	out	0x3d, r28	; 61
    203a:	cf 91       	pop	r28
    203c:	df 91       	pop	r29
    203e:	08 95       	ret

00002040 <LCD_vidSendString>:

void LCD_vidSendString(const u8* copy_pu8String)
{
    2040:	df 93       	push	r29
    2042:	cf 93       	push	r28
    2044:	00 d0       	rcall	.+0      	; 0x2046 <LCD_vidSendString+0x6>
    2046:	0f 92       	push	r0
    2048:	cd b7       	in	r28, 0x3d	; 61
    204a:	de b7       	in	r29, 0x3e	; 62
    204c:	9b 83       	std	Y+3, r25	; 0x03
    204e:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8Counter = 0;
    2050:	19 82       	std	Y+1, r1	; 0x01
    2052:	0e c0       	rjmp	.+28     	; 0x2070 <LCD_vidSendString+0x30>
	while(copy_pu8String[local_u8Counter] != '\0')
	{
		LCD_u8sendData(copy_pu8String[local_u8Counter]);
    2054:	89 81       	ldd	r24, Y+1	; 0x01
    2056:	28 2f       	mov	r18, r24
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	8a 81       	ldd	r24, Y+2	; 0x02
    205c:	9b 81       	ldd	r25, Y+3	; 0x03
    205e:	fc 01       	movw	r30, r24
    2060:	e2 0f       	add	r30, r18
    2062:	f3 1f       	adc	r31, r19
    2064:	80 81       	ld	r24, Z
    2066:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <LCD_u8sendData>
		local_u8Counter++;
    206a:	89 81       	ldd	r24, Y+1	; 0x01
    206c:	8f 5f       	subi	r24, 0xFF	; 255
    206e:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_vidSendString(const u8* copy_pu8String)
{
	u8 local_u8Counter = 0;
	while(copy_pu8String[local_u8Counter] != '\0')
    2070:	89 81       	ldd	r24, Y+1	; 0x01
    2072:	28 2f       	mov	r18, r24
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	8a 81       	ldd	r24, Y+2	; 0x02
    2078:	9b 81       	ldd	r25, Y+3	; 0x03
    207a:	fc 01       	movw	r30, r24
    207c:	e2 0f       	add	r30, r18
    207e:	f3 1f       	adc	r31, r19
    2080:	80 81       	ld	r24, Z
    2082:	88 23       	and	r24, r24
    2084:	39 f7       	brne	.-50     	; 0x2054 <LCD_vidSendString+0x14>
	{
		LCD_u8sendData(copy_pu8String[local_u8Counter]);
		local_u8Counter++;
	}
}
    2086:	0f 90       	pop	r0
    2088:	0f 90       	pop	r0
    208a:	0f 90       	pop	r0
    208c:	cf 91       	pop	r28
    208e:	df 91       	pop	r29
    2090:	08 95       	ret

00002092 <LCD_vidCenterString>:

void LCD_vidCenterString(const u8* copy_pu8String, u8 copy_u8YPos)
{
    2092:	df 93       	push	r29
    2094:	cf 93       	push	r28
    2096:	cd b7       	in	r28, 0x3d	; 61
    2098:	de b7       	in	r29, 0x3e	; 62
    209a:	27 97       	sbiw	r28, 0x07	; 7
    209c:	0f b6       	in	r0, 0x3f	; 63
    209e:	f8 94       	cli
    20a0:	de bf       	out	0x3e, r29	; 62
    20a2:	0f be       	out	0x3f, r0	; 63
    20a4:	cd bf       	out	0x3d, r28	; 61
    20a6:	9c 83       	std	Y+4, r25	; 0x04
    20a8:	8b 83       	std	Y+3, r24	; 0x03
    20aa:	6d 83       	std	Y+5, r22	; 0x05
	u8 local_u8StringCuonter = 0;
    20ac:	1a 82       	std	Y+2, r1	; 0x02
    20ae:	03 c0       	rjmp	.+6      	; 0x20b6 <LCD_vidCenterString+0x24>
	while(copy_pu8String[local_u8StringCuonter] != '\0')
	{
		local_u8StringCuonter++;
    20b0:	8a 81       	ldd	r24, Y+2	; 0x02
    20b2:	8f 5f       	subi	r24, 0xFF	; 255
    20b4:	8a 83       	std	Y+2, r24	; 0x02
}

void LCD_vidCenterString(const u8* copy_pu8String, u8 copy_u8YPos)
{
	u8 local_u8StringCuonter = 0;
	while(copy_pu8String[local_u8StringCuonter] != '\0')
    20b6:	8a 81       	ldd	r24, Y+2	; 0x02
    20b8:	28 2f       	mov	r18, r24
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	8b 81       	ldd	r24, Y+3	; 0x03
    20be:	9c 81       	ldd	r25, Y+4	; 0x04
    20c0:	fc 01       	movw	r30, r24
    20c2:	e2 0f       	add	r30, r18
    20c4:	f3 1f       	adc	r31, r19
    20c6:	80 81       	ld	r24, Z
    20c8:	88 23       	and	r24, r24
    20ca:	91 f7       	brne	.-28     	; 0x20b0 <LCD_vidCenterString+0x1e>
	{
		local_u8StringCuonter++;
	}

	u8 local_u8Offset = (16 - local_u8StringCuonter)/2;
    20cc:	8a 81       	ldd	r24, Y+2	; 0x02
    20ce:	28 2f       	mov	r18, r24
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	80 e1       	ldi	r24, 0x10	; 16
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	82 1b       	sub	r24, r18
    20d8:	93 0b       	sbc	r25, r19
    20da:	9f 83       	std	Y+7, r25	; 0x07
    20dc:	8e 83       	std	Y+6, r24	; 0x06
    20de:	8e 81       	ldd	r24, Y+6	; 0x06
    20e0:	9f 81       	ldd	r25, Y+7	; 0x07
    20e2:	99 23       	and	r25, r25
    20e4:	2c f4       	brge	.+10     	; 0x20f0 <LCD_vidCenterString+0x5e>
    20e6:	8e 81       	ldd	r24, Y+6	; 0x06
    20e8:	9f 81       	ldd	r25, Y+7	; 0x07
    20ea:	01 96       	adiw	r24, 0x01	; 1
    20ec:	9f 83       	std	Y+7, r25	; 0x07
    20ee:	8e 83       	std	Y+6, r24	; 0x06
    20f0:	8e 81       	ldd	r24, Y+6	; 0x06
    20f2:	9f 81       	ldd	r25, Y+7	; 0x07
    20f4:	95 95       	asr	r25
    20f6:	87 95       	ror	r24
    20f8:	89 83       	std	Y+1, r24	; 0x01

	LCD_vidGoToXY(local_u8Offset, copy_u8YPos);
    20fa:	89 81       	ldd	r24, Y+1	; 0x01
    20fc:	6d 81       	ldd	r22, Y+5	; 0x05
    20fe:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_vidGoToXY>

	LCD_vidSendString(copy_pu8String);
    2102:	8b 81       	ldd	r24, Y+3	; 0x03
    2104:	9c 81       	ldd	r25, Y+4	; 0x04
    2106:	0e 94 20 10 	call	0x2040	; 0x2040 <LCD_vidSendString>
}
    210a:	27 96       	adiw	r28, 0x07	; 7
    210c:	0f b6       	in	r0, 0x3f	; 63
    210e:	f8 94       	cli
    2110:	de bf       	out	0x3e, r29	; 62
    2112:	0f be       	out	0x3f, r0	; 63
    2114:	cd bf       	out	0x3d, r28	; 61
    2116:	cf 91       	pop	r28
    2118:	df 91       	pop	r29
    211a:	08 95       	ret

0000211c <LCD_vidGoToXY>:

void LCD_vidGoToXY(u8 copy_u8XPos, u8 copy_u8YPos)
{
    211c:	df 93       	push	r29
    211e:	cf 93       	push	r28
    2120:	00 d0       	rcall	.+0      	; 0x2122 <LCD_vidGoToXY+0x6>
    2122:	0f 92       	push	r0
    2124:	cd b7       	in	r28, 0x3d	; 61
    2126:	de b7       	in	r29, 0x3e	; 62
    2128:	8a 83       	std	Y+2, r24	; 0x02
    212a:	6b 83       	std	Y+3, r22	; 0x03
	u8 address;

	if(copy_u8YPos == 0){
    212c:	8b 81       	ldd	r24, Y+3	; 0x03
    212e:	88 23       	and	r24, r24
    2130:	19 f4       	brne	.+6      	; 0x2138 <LCD_vidGoToXY+0x1c>
		address = copy_u8XPos;
    2132:	8a 81       	ldd	r24, Y+2	; 0x02
    2134:	89 83       	std	Y+1, r24	; 0x01
    2136:	06 c0       	rjmp	.+12     	; 0x2144 <LCD_vidGoToXY+0x28>
	}

	else if(copy_u8YPos == 1){
    2138:	8b 81       	ldd	r24, Y+3	; 0x03
    213a:	81 30       	cpi	r24, 0x01	; 1
    213c:	19 f4       	brne	.+6      	; 0x2144 <LCD_vidGoToXY+0x28>
		address = copy_u8XPos + 0x40;
    213e:	8a 81       	ldd	r24, Y+2	; 0x02
    2140:	80 5c       	subi	r24, 0xC0	; 192
    2142:	89 83       	std	Y+1, r24	; 0x01
	}

	LCD_u8sendCommand(128 + address);
    2144:	89 81       	ldd	r24, Y+1	; 0x01
    2146:	80 58       	subi	r24, 0x80	; 128
    2148:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_u8sendCommand>

}
    214c:	0f 90       	pop	r0
    214e:	0f 90       	pop	r0
    2150:	0f 90       	pop	r0
    2152:	cf 91       	pop	r28
    2154:	df 91       	pop	r29
    2156:	08 95       	ret

00002158 <LCD_vidShiftRightCursor>:

void LCD_vidShiftRightCursor(void)
{
    2158:	df 93       	push	r29
    215a:	cf 93       	push	r28
    215c:	cd b7       	in	r28, 0x3d	; 61
    215e:	de b7       	in	r29, 0x3e	; 62
	LCD_u8sendCommand(0b00000001);
    2160:	81 e0       	ldi	r24, 0x01	; 1
    2162:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_u8sendCommand>
}
    2166:	cf 91       	pop	r28
    2168:	df 91       	pop	r29
    216a:	08 95       	ret

0000216c <LCD_vidShiftLeftCursor>:

void LCD_vidShiftLeftCursor(void)
{
    216c:	df 93       	push	r29
    216e:	cf 93       	push	r28
    2170:	cd b7       	in	r28, 0x3d	; 61
    2172:	de b7       	in	r29, 0x3e	; 62
	LCD_u8sendCommand(0b00000000);
    2174:	80 e0       	ldi	r24, 0x00	; 0
    2176:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_u8sendCommand>
}
    217a:	cf 91       	pop	r28
    217c:	df 91       	pop	r29
    217e:	08 95       	ret

00002180 <LCD_vidSendNumberBottomRight>:

void LCD_vidSendNumberBottomRight(s32 copy_u8Number)
{
    2180:	0f 93       	push	r16
    2182:	1f 93       	push	r17
    2184:	df 93       	push	r29
    2186:	cf 93       	push	r28
    2188:	cd b7       	in	r28, 0x3d	; 61
    218a:	de b7       	in	r29, 0x3e	; 62
    218c:	a7 97       	sbiw	r28, 0x27	; 39
    218e:	0f b6       	in	r0, 0x3f	; 63
    2190:	f8 94       	cli
    2192:	de bf       	out	0x3e, r29	; 62
    2194:	0f be       	out	0x3f, r0	; 63
    2196:	cd bf       	out	0x3d, r28	; 61
    2198:	6c a3       	std	Y+36, r22	; 0x24
    219a:	7d a3       	std	Y+37, r23	; 0x25
    219c:	8e a3       	std	Y+38, r24	; 0x26
    219e:	9f a3       	std	Y+39, r25	; 0x27
	s8 local_u8Length = 0;
    21a0:	1b 82       	std	Y+3, r1	; 0x03
	u8 local_u8Nums[32];
	LCD_vidGoToXY(15, 1);
    21a2:	8f e0       	ldi	r24, 0x0F	; 15
    21a4:	61 e0       	ldi	r22, 0x01	; 1
    21a6:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_vidGoToXY>

	if(copy_u8Number==0)
    21aa:	8c a1       	ldd	r24, Y+36	; 0x24
    21ac:	9d a1       	ldd	r25, Y+37	; 0x25
    21ae:	ae a1       	ldd	r26, Y+38	; 0x26
    21b0:	bf a1       	ldd	r27, Y+39	; 0x27
    21b2:	00 97       	sbiw	r24, 0x00	; 0
    21b4:	a1 05       	cpc	r26, r1
    21b6:	b1 05       	cpc	r27, r1
    21b8:	31 f4       	brne	.+12     	; 0x21c6 <LCD_vidSendNumberBottomRight+0x46>
	{
		LCD_u8sendData('0');
    21ba:	80 e3       	ldi	r24, 0x30	; 48
    21bc:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <LCD_u8sendData>
		LCD_vidShiftLeftCursor();
    21c0:	0e 94 b6 10 	call	0x216c	; 0x216c <LCD_vidShiftLeftCursor>
    21c4:	c5 c0       	rjmp	.+394    	; 0x2350 <LCD_vidSendNumberBottomRight+0x1d0>
	}

	else if(copy_u8Number<0)
    21c6:	8c a1       	ldd	r24, Y+36	; 0x24
    21c8:	9d a1       	ldd	r25, Y+37	; 0x25
    21ca:	ae a1       	ldd	r26, Y+38	; 0x26
    21cc:	bf a1       	ldd	r27, Y+39	; 0x27
    21ce:	bb 23       	and	r27, r27
    21d0:	0c f0       	brlt	.+2      	; 0x21d4 <LCD_vidSendNumberBottomRight+0x54>
    21d2:	99 c0       	rjmp	.+306    	; 0x2306 <LCD_vidSendNumberBottomRight+0x186>
	{
		copy_u8Number *= (-1);
    21d4:	8c a1       	ldd	r24, Y+36	; 0x24
    21d6:	9d a1       	ldd	r25, Y+37	; 0x25
    21d8:	ae a1       	ldd	r26, Y+38	; 0x26
    21da:	bf a1       	ldd	r27, Y+39	; 0x27
    21dc:	b0 95       	com	r27
    21de:	a0 95       	com	r26
    21e0:	90 95       	com	r25
    21e2:	81 95       	neg	r24
    21e4:	9f 4f       	sbci	r25, 0xFF	; 255
    21e6:	af 4f       	sbci	r26, 0xFF	; 255
    21e8:	bf 4f       	sbci	r27, 0xFF	; 255
    21ea:	8c a3       	std	Y+36, r24	; 0x24
    21ec:	9d a3       	std	Y+37, r25	; 0x25
    21ee:	ae a3       	std	Y+38, r26	; 0x26
    21f0:	bf a3       	std	Y+39, r27	; 0x27
    21f2:	2f c0       	rjmp	.+94     	; 0x2252 <LCD_vidSendNumberBottomRight+0xd2>

		while(copy_u8Number != 0)
		{
			local_u8Nums[local_u8Length] = copy_u8Number % 10;
    21f4:	8b 81       	ldd	r24, Y+3	; 0x03
    21f6:	08 2f       	mov	r16, r24
    21f8:	11 27       	eor	r17, r17
    21fa:	07 fd       	sbrc	r16, 7
    21fc:	10 95       	com	r17
    21fe:	8c a1       	ldd	r24, Y+36	; 0x24
    2200:	9d a1       	ldd	r25, Y+37	; 0x25
    2202:	ae a1       	ldd	r26, Y+38	; 0x26
    2204:	bf a1       	ldd	r27, Y+39	; 0x27
    2206:	2a e0       	ldi	r18, 0x0A	; 10
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	40 e0       	ldi	r20, 0x00	; 0
    220c:	50 e0       	ldi	r21, 0x00	; 0
    220e:	bc 01       	movw	r22, r24
    2210:	cd 01       	movw	r24, r26
    2212:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <__divmodsi4>
    2216:	dc 01       	movw	r26, r24
    2218:	cb 01       	movw	r24, r22
    221a:	28 2f       	mov	r18, r24
    221c:	ce 01       	movw	r24, r28
    221e:	04 96       	adiw	r24, 0x04	; 4
    2220:	fc 01       	movw	r30, r24
    2222:	e0 0f       	add	r30, r16
    2224:	f1 1f       	adc	r31, r17
    2226:	20 83       	st	Z, r18
			copy_u8Number /= 10;
    2228:	8c a1       	ldd	r24, Y+36	; 0x24
    222a:	9d a1       	ldd	r25, Y+37	; 0x25
    222c:	ae a1       	ldd	r26, Y+38	; 0x26
    222e:	bf a1       	ldd	r27, Y+39	; 0x27
    2230:	2a e0       	ldi	r18, 0x0A	; 10
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	40 e0       	ldi	r20, 0x00	; 0
    2236:	50 e0       	ldi	r21, 0x00	; 0
    2238:	bc 01       	movw	r22, r24
    223a:	cd 01       	movw	r24, r26
    223c:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <__divmodsi4>
    2240:	da 01       	movw	r26, r20
    2242:	c9 01       	movw	r24, r18
    2244:	8c a3       	std	Y+36, r24	; 0x24
    2246:	9d a3       	std	Y+37, r25	; 0x25
    2248:	ae a3       	std	Y+38, r26	; 0x26
    224a:	bf a3       	std	Y+39, r27	; 0x27
			local_u8Length++;
    224c:	8b 81       	ldd	r24, Y+3	; 0x03
    224e:	8f 5f       	subi	r24, 0xFF	; 255
    2250:	8b 83       	std	Y+3, r24	; 0x03

	else if(copy_u8Number<0)
	{
		copy_u8Number *= (-1);

		while(copy_u8Number != 0)
    2252:	8c a1       	ldd	r24, Y+36	; 0x24
    2254:	9d a1       	ldd	r25, Y+37	; 0x25
    2256:	ae a1       	ldd	r26, Y+38	; 0x26
    2258:	bf a1       	ldd	r27, Y+39	; 0x27
    225a:	00 97       	sbiw	r24, 0x00	; 0
    225c:	a1 05       	cpc	r26, r1
    225e:	b1 05       	cpc	r27, r1
    2260:	49 f6       	brne	.-110    	; 0x21f4 <LCD_vidSendNumberBottomRight+0x74>
		{
			local_u8Nums[local_u8Length] = copy_u8Number % 10;
			copy_u8Number /= 10;
			local_u8Length++;
		}
		for(u8 counter=0; counter<=local_u8Length; counter++)
    2262:	1a 82       	std	Y+2, r1	; 0x02
    2264:	11 c0       	rjmp	.+34     	; 0x2288 <LCD_vidSendNumberBottomRight+0x108>
		{
			LCD_u8sendData(local_u8Nums[counter] + '0');
    2266:	8a 81       	ldd	r24, Y+2	; 0x02
    2268:	28 2f       	mov	r18, r24
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	ce 01       	movw	r24, r28
    226e:	04 96       	adiw	r24, 0x04	; 4
    2270:	fc 01       	movw	r30, r24
    2272:	e2 0f       	add	r30, r18
    2274:	f3 1f       	adc	r31, r19
    2276:	80 81       	ld	r24, Z
    2278:	80 5d       	subi	r24, 0xD0	; 208
    227a:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <LCD_u8sendData>
			LCD_vidShiftLeftCursor();
    227e:	0e 94 b6 10 	call	0x216c	; 0x216c <LCD_vidShiftLeftCursor>
		{
			local_u8Nums[local_u8Length] = copy_u8Number % 10;
			copy_u8Number /= 10;
			local_u8Length++;
		}
		for(u8 counter=0; counter<=local_u8Length; counter++)
    2282:	8a 81       	ldd	r24, Y+2	; 0x02
    2284:	8f 5f       	subi	r24, 0xFF	; 255
    2286:	8a 83       	std	Y+2, r24	; 0x02
    2288:	8a 81       	ldd	r24, Y+2	; 0x02
    228a:	28 2f       	mov	r18, r24
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	8b 81       	ldd	r24, Y+3	; 0x03
    2290:	99 27       	eor	r25, r25
    2292:	87 fd       	sbrc	r24, 7
    2294:	90 95       	com	r25
    2296:	82 17       	cp	r24, r18
    2298:	93 07       	cpc	r25, r19
    229a:	2c f7       	brge	.-54     	; 0x2266 <LCD_vidSendNumberBottomRight+0xe6>
		{
			LCD_u8sendData(local_u8Nums[counter] + '0');
			LCD_vidShiftLeftCursor();
		}
		LCD_u8sendData('-');
    229c:	8d e2       	ldi	r24, 0x2D	; 45
    229e:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <LCD_u8sendData>
		LCD_vidShiftLeftCursor();
    22a2:	0e 94 b6 10 	call	0x216c	; 0x216c <LCD_vidShiftLeftCursor>
    22a6:	54 c0       	rjmp	.+168    	; 0x2350 <LCD_vidSendNumberBottomRight+0x1d0>

	else
	{
		while(copy_u8Number != 0)
		{
			local_u8Length++;
    22a8:	8b 81       	ldd	r24, Y+3	; 0x03
    22aa:	8f 5f       	subi	r24, 0xFF	; 255
    22ac:	8b 83       	std	Y+3, r24	; 0x03
			local_u8Nums[local_u8Length] = copy_u8Number % 10;
    22ae:	8b 81       	ldd	r24, Y+3	; 0x03
    22b0:	08 2f       	mov	r16, r24
    22b2:	11 27       	eor	r17, r17
    22b4:	07 fd       	sbrc	r16, 7
    22b6:	10 95       	com	r17
    22b8:	8c a1       	ldd	r24, Y+36	; 0x24
    22ba:	9d a1       	ldd	r25, Y+37	; 0x25
    22bc:	ae a1       	ldd	r26, Y+38	; 0x26
    22be:	bf a1       	ldd	r27, Y+39	; 0x27
    22c0:	2a e0       	ldi	r18, 0x0A	; 10
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	40 e0       	ldi	r20, 0x00	; 0
    22c6:	50 e0       	ldi	r21, 0x00	; 0
    22c8:	bc 01       	movw	r22, r24
    22ca:	cd 01       	movw	r24, r26
    22cc:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <__divmodsi4>
    22d0:	dc 01       	movw	r26, r24
    22d2:	cb 01       	movw	r24, r22
    22d4:	28 2f       	mov	r18, r24
    22d6:	ce 01       	movw	r24, r28
    22d8:	04 96       	adiw	r24, 0x04	; 4
    22da:	fc 01       	movw	r30, r24
    22dc:	e0 0f       	add	r30, r16
    22de:	f1 1f       	adc	r31, r17
    22e0:	20 83       	st	Z, r18
			copy_u8Number /= 10;
    22e2:	8c a1       	ldd	r24, Y+36	; 0x24
    22e4:	9d a1       	ldd	r25, Y+37	; 0x25
    22e6:	ae a1       	ldd	r26, Y+38	; 0x26
    22e8:	bf a1       	ldd	r27, Y+39	; 0x27
    22ea:	2a e0       	ldi	r18, 0x0A	; 10
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	40 e0       	ldi	r20, 0x00	; 0
    22f0:	50 e0       	ldi	r21, 0x00	; 0
    22f2:	bc 01       	movw	r22, r24
    22f4:	cd 01       	movw	r24, r26
    22f6:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <__divmodsi4>
    22fa:	da 01       	movw	r26, r20
    22fc:	c9 01       	movw	r24, r18
    22fe:	8c a3       	std	Y+36, r24	; 0x24
    2300:	9d a3       	std	Y+37, r25	; 0x25
    2302:	ae a3       	std	Y+38, r26	; 0x26
    2304:	bf a3       	std	Y+39, r27	; 0x27
		LCD_vidShiftLeftCursor();
	}

	else
	{
		while(copy_u8Number != 0)
    2306:	8c a1       	ldd	r24, Y+36	; 0x24
    2308:	9d a1       	ldd	r25, Y+37	; 0x25
    230a:	ae a1       	ldd	r26, Y+38	; 0x26
    230c:	bf a1       	ldd	r27, Y+39	; 0x27
    230e:	00 97       	sbiw	r24, 0x00	; 0
    2310:	a1 05       	cpc	r26, r1
    2312:	b1 05       	cpc	r27, r1
    2314:	49 f6       	brne	.-110    	; 0x22a8 <LCD_vidSendNumberBottomRight+0x128>
		{
			local_u8Length++;
			local_u8Nums[local_u8Length] = copy_u8Number % 10;
			copy_u8Number /= 10;
		}
		for(u8 counter=0; counter<=local_u8Length; counter++)
    2316:	19 82       	std	Y+1, r1	; 0x01
    2318:	11 c0       	rjmp	.+34     	; 0x233c <LCD_vidSendNumberBottomRight+0x1bc>
		{
			LCD_u8sendData(local_u8Nums[counter] + '0');
    231a:	89 81       	ldd	r24, Y+1	; 0x01
    231c:	28 2f       	mov	r18, r24
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	ce 01       	movw	r24, r28
    2322:	04 96       	adiw	r24, 0x04	; 4
    2324:	fc 01       	movw	r30, r24
    2326:	e2 0f       	add	r30, r18
    2328:	f3 1f       	adc	r31, r19
    232a:	80 81       	ld	r24, Z
    232c:	80 5d       	subi	r24, 0xD0	; 208
    232e:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <LCD_u8sendData>
			LCD_vidShiftLeftCursor();
    2332:	0e 94 b6 10 	call	0x216c	; 0x216c <LCD_vidShiftLeftCursor>
		{
			local_u8Length++;
			local_u8Nums[local_u8Length] = copy_u8Number % 10;
			copy_u8Number /= 10;
		}
		for(u8 counter=0; counter<=local_u8Length; counter++)
    2336:	89 81       	ldd	r24, Y+1	; 0x01
    2338:	8f 5f       	subi	r24, 0xFF	; 255
    233a:	89 83       	std	Y+1, r24	; 0x01
    233c:	89 81       	ldd	r24, Y+1	; 0x01
    233e:	28 2f       	mov	r18, r24
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	8b 81       	ldd	r24, Y+3	; 0x03
    2344:	99 27       	eor	r25, r25
    2346:	87 fd       	sbrc	r24, 7
    2348:	90 95       	com	r25
    234a:	82 17       	cp	r24, r18
    234c:	93 07       	cpc	r25, r19
    234e:	2c f7       	brge	.-54     	; 0x231a <LCD_vidSendNumberBottomRight+0x19a>
		{
			LCD_u8sendData(local_u8Nums[counter] + '0');
			LCD_vidShiftLeftCursor();
		}
	}
}
    2350:	a7 96       	adiw	r28, 0x27	; 39
    2352:	0f b6       	in	r0, 0x3f	; 63
    2354:	f8 94       	cli
    2356:	de bf       	out	0x3e, r29	; 62
    2358:	0f be       	out	0x3f, r0	; 63
    235a:	cd bf       	out	0x3d, r28	; 61
    235c:	cf 91       	pop	r28
    235e:	df 91       	pop	r29
    2360:	1f 91       	pop	r17
    2362:	0f 91       	pop	r16
    2364:	08 95       	ret

00002366 <LCD_vidSendNumber>:

void LCD_vidSendNumber(s32 copy_u8Number)
{
    2366:	0f 93       	push	r16
    2368:	1f 93       	push	r17
    236a:	df 93       	push	r29
    236c:	cf 93       	push	r28
    236e:	cd b7       	in	r28, 0x3d	; 61
    2370:	de b7       	in	r29, 0x3e	; 62
    2372:	a5 97       	sbiw	r28, 0x25	; 37
    2374:	0f b6       	in	r0, 0x3f	; 63
    2376:	f8 94       	cli
    2378:	de bf       	out	0x3e, r29	; 62
    237a:	0f be       	out	0x3f, r0	; 63
    237c:	cd bf       	out	0x3d, r28	; 61
    237e:	6a a3       	std	Y+34, r22	; 0x22
    2380:	7b a3       	std	Y+35, r23	; 0x23
    2382:	8c a3       	std	Y+36, r24	; 0x24
    2384:	9d a3       	std	Y+37, r25	; 0x25
	s8 local_u8Length = 0;
    2386:	19 82       	std	Y+1, r1	; 0x01
	u8 local_u8Nums[32];

	if(copy_u8Number==0)
    2388:	8a a1       	ldd	r24, Y+34	; 0x22
    238a:	9b a1       	ldd	r25, Y+35	; 0x23
    238c:	ac a1       	ldd	r26, Y+36	; 0x24
    238e:	bd a1       	ldd	r27, Y+37	; 0x25
    2390:	00 97       	sbiw	r24, 0x00	; 0
    2392:	a1 05       	cpc	r26, r1
    2394:	b1 05       	cpc	r27, r1
    2396:	21 f4       	brne	.+8      	; 0x23a0 <LCD_vidSendNumber+0x3a>
	{
		LCD_u8sendData('0');
    2398:	80 e3       	ldi	r24, 0x30	; 48
    239a:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <LCD_u8sendData>
    239e:	9b c0       	rjmp	.+310    	; 0x24d6 <LCD_vidSendNumber+0x170>
	}

	else if(copy_u8Number<0)
    23a0:	8a a1       	ldd	r24, Y+34	; 0x22
    23a2:	9b a1       	ldd	r25, Y+35	; 0x23
    23a4:	ac a1       	ldd	r26, Y+36	; 0x24
    23a6:	bd a1       	ldd	r27, Y+37	; 0x25
    23a8:	bb 23       	and	r27, r27
    23aa:	0c f0       	brlt	.+2      	; 0x23ae <LCD_vidSendNumber+0x48>
    23ac:	7a c0       	rjmp	.+244    	; 0x24a2 <LCD_vidSendNumber+0x13c>
	{
		copy_u8Number *= (-1);
    23ae:	8a a1       	ldd	r24, Y+34	; 0x22
    23b0:	9b a1       	ldd	r25, Y+35	; 0x23
    23b2:	ac a1       	ldd	r26, Y+36	; 0x24
    23b4:	bd a1       	ldd	r27, Y+37	; 0x25
    23b6:	b0 95       	com	r27
    23b8:	a0 95       	com	r26
    23ba:	90 95       	com	r25
    23bc:	81 95       	neg	r24
    23be:	9f 4f       	sbci	r25, 0xFF	; 255
    23c0:	af 4f       	sbci	r26, 0xFF	; 255
    23c2:	bf 4f       	sbci	r27, 0xFF	; 255
    23c4:	8a a3       	std	Y+34, r24	; 0x22
    23c6:	9b a3       	std	Y+35, r25	; 0x23
    23c8:	ac a3       	std	Y+36, r26	; 0x24
    23ca:	bd a3       	std	Y+37, r27	; 0x25
		LCD_u8sendData('-');
    23cc:	8d e2       	ldi	r24, 0x2D	; 45
    23ce:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <LCD_u8sendData>
    23d2:	2f c0       	rjmp	.+94     	; 0x2432 <LCD_vidSendNumber+0xcc>

		while(copy_u8Number != 0)
		{
			local_u8Nums[local_u8Length] = copy_u8Number % 10;
    23d4:	89 81       	ldd	r24, Y+1	; 0x01
    23d6:	08 2f       	mov	r16, r24
    23d8:	11 27       	eor	r17, r17
    23da:	07 fd       	sbrc	r16, 7
    23dc:	10 95       	com	r17
    23de:	8a a1       	ldd	r24, Y+34	; 0x22
    23e0:	9b a1       	ldd	r25, Y+35	; 0x23
    23e2:	ac a1       	ldd	r26, Y+36	; 0x24
    23e4:	bd a1       	ldd	r27, Y+37	; 0x25
    23e6:	2a e0       	ldi	r18, 0x0A	; 10
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	40 e0       	ldi	r20, 0x00	; 0
    23ec:	50 e0       	ldi	r21, 0x00	; 0
    23ee:	bc 01       	movw	r22, r24
    23f0:	cd 01       	movw	r24, r26
    23f2:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <__divmodsi4>
    23f6:	dc 01       	movw	r26, r24
    23f8:	cb 01       	movw	r24, r22
    23fa:	28 2f       	mov	r18, r24
    23fc:	ce 01       	movw	r24, r28
    23fe:	02 96       	adiw	r24, 0x02	; 2
    2400:	fc 01       	movw	r30, r24
    2402:	e0 0f       	add	r30, r16
    2404:	f1 1f       	adc	r31, r17
    2406:	20 83       	st	Z, r18
			copy_u8Number /= 10;
    2408:	8a a1       	ldd	r24, Y+34	; 0x22
    240a:	9b a1       	ldd	r25, Y+35	; 0x23
    240c:	ac a1       	ldd	r26, Y+36	; 0x24
    240e:	bd a1       	ldd	r27, Y+37	; 0x25
    2410:	2a e0       	ldi	r18, 0x0A	; 10
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	40 e0       	ldi	r20, 0x00	; 0
    2416:	50 e0       	ldi	r21, 0x00	; 0
    2418:	bc 01       	movw	r22, r24
    241a:	cd 01       	movw	r24, r26
    241c:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <__divmodsi4>
    2420:	da 01       	movw	r26, r20
    2422:	c9 01       	movw	r24, r18
    2424:	8a a3       	std	Y+34, r24	; 0x22
    2426:	9b a3       	std	Y+35, r25	; 0x23
    2428:	ac a3       	std	Y+36, r26	; 0x24
    242a:	bd a3       	std	Y+37, r27	; 0x25
			local_u8Length++;
    242c:	89 81       	ldd	r24, Y+1	; 0x01
    242e:	8f 5f       	subi	r24, 0xFF	; 255
    2430:	89 83       	std	Y+1, r24	; 0x01
	else if(copy_u8Number<0)
	{
		copy_u8Number *= (-1);
		LCD_u8sendData('-');

		while(copy_u8Number != 0)
    2432:	8a a1       	ldd	r24, Y+34	; 0x22
    2434:	9b a1       	ldd	r25, Y+35	; 0x23
    2436:	ac a1       	ldd	r26, Y+36	; 0x24
    2438:	bd a1       	ldd	r27, Y+37	; 0x25
    243a:	00 97       	sbiw	r24, 0x00	; 0
    243c:	a1 05       	cpc	r26, r1
    243e:	b1 05       	cpc	r27, r1
    2440:	49 f6       	brne	.-110    	; 0x23d4 <LCD_vidSendNumber+0x6e>
    2442:	49 c0       	rjmp	.+146    	; 0x24d6 <LCD_vidSendNumber+0x170>

	else
	{
		while(copy_u8Number != 0)
		{
			local_u8Length++;
    2444:	89 81       	ldd	r24, Y+1	; 0x01
    2446:	8f 5f       	subi	r24, 0xFF	; 255
    2448:	89 83       	std	Y+1, r24	; 0x01
			local_u8Nums[local_u8Length] = copy_u8Number % 10;
    244a:	89 81       	ldd	r24, Y+1	; 0x01
    244c:	08 2f       	mov	r16, r24
    244e:	11 27       	eor	r17, r17
    2450:	07 fd       	sbrc	r16, 7
    2452:	10 95       	com	r17
    2454:	8a a1       	ldd	r24, Y+34	; 0x22
    2456:	9b a1       	ldd	r25, Y+35	; 0x23
    2458:	ac a1       	ldd	r26, Y+36	; 0x24
    245a:	bd a1       	ldd	r27, Y+37	; 0x25
    245c:	2a e0       	ldi	r18, 0x0A	; 10
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	40 e0       	ldi	r20, 0x00	; 0
    2462:	50 e0       	ldi	r21, 0x00	; 0
    2464:	bc 01       	movw	r22, r24
    2466:	cd 01       	movw	r24, r26
    2468:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <__divmodsi4>
    246c:	dc 01       	movw	r26, r24
    246e:	cb 01       	movw	r24, r22
    2470:	28 2f       	mov	r18, r24
    2472:	ce 01       	movw	r24, r28
    2474:	02 96       	adiw	r24, 0x02	; 2
    2476:	fc 01       	movw	r30, r24
    2478:	e0 0f       	add	r30, r16
    247a:	f1 1f       	adc	r31, r17
    247c:	20 83       	st	Z, r18
			copy_u8Number /= 10;
    247e:	8a a1       	ldd	r24, Y+34	; 0x22
    2480:	9b a1       	ldd	r25, Y+35	; 0x23
    2482:	ac a1       	ldd	r26, Y+36	; 0x24
    2484:	bd a1       	ldd	r27, Y+37	; 0x25
    2486:	2a e0       	ldi	r18, 0x0A	; 10
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	40 e0       	ldi	r20, 0x00	; 0
    248c:	50 e0       	ldi	r21, 0x00	; 0
    248e:	bc 01       	movw	r22, r24
    2490:	cd 01       	movw	r24, r26
    2492:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <__divmodsi4>
    2496:	da 01       	movw	r26, r20
    2498:	c9 01       	movw	r24, r18
    249a:	8a a3       	std	Y+34, r24	; 0x22
    249c:	9b a3       	std	Y+35, r25	; 0x23
    249e:	ac a3       	std	Y+36, r26	; 0x24
    24a0:	bd a3       	std	Y+37, r27	; 0x25
		}
	}

	else
	{
		while(copy_u8Number != 0)
    24a2:	8a a1       	ldd	r24, Y+34	; 0x22
    24a4:	9b a1       	ldd	r25, Y+35	; 0x23
    24a6:	ac a1       	ldd	r26, Y+36	; 0x24
    24a8:	bd a1       	ldd	r27, Y+37	; 0x25
    24aa:	00 97       	sbiw	r24, 0x00	; 0
    24ac:	a1 05       	cpc	r26, r1
    24ae:	b1 05       	cpc	r27, r1
    24b0:	49 f6       	brne	.-110    	; 0x2444 <LCD_vidSendNumber+0xde>
    24b2:	11 c0       	rjmp	.+34     	; 0x24d6 <LCD_vidSendNumber+0x170>
		}
	}

	for(; local_u8Length>0; local_u8Length--)
	{
		LCD_u8sendData(local_u8Nums[local_u8Length] + '0');
    24b4:	89 81       	ldd	r24, Y+1	; 0x01
    24b6:	28 2f       	mov	r18, r24
    24b8:	33 27       	eor	r19, r19
    24ba:	27 fd       	sbrc	r18, 7
    24bc:	30 95       	com	r19
    24be:	ce 01       	movw	r24, r28
    24c0:	02 96       	adiw	r24, 0x02	; 2
    24c2:	fc 01       	movw	r30, r24
    24c4:	e2 0f       	add	r30, r18
    24c6:	f3 1f       	adc	r31, r19
    24c8:	80 81       	ld	r24, Z
    24ca:	80 5d       	subi	r24, 0xD0	; 208
    24cc:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <LCD_u8sendData>
			local_u8Nums[local_u8Length] = copy_u8Number % 10;
			copy_u8Number /= 10;
		}
	}

	for(; local_u8Length>0; local_u8Length--)
    24d0:	89 81       	ldd	r24, Y+1	; 0x01
    24d2:	81 50       	subi	r24, 0x01	; 1
    24d4:	89 83       	std	Y+1, r24	; 0x01
    24d6:	89 81       	ldd	r24, Y+1	; 0x01
    24d8:	18 16       	cp	r1, r24
    24da:	64 f3       	brlt	.-40     	; 0x24b4 <LCD_vidSendNumber+0x14e>
	{
		LCD_u8sendData(local_u8Nums[local_u8Length] + '0');
	}

}
    24dc:	a5 96       	adiw	r28, 0x25	; 37
    24de:	0f b6       	in	r0, 0x3f	; 63
    24e0:	f8 94       	cli
    24e2:	de bf       	out	0x3e, r29	; 62
    24e4:	0f be       	out	0x3f, r0	; 63
    24e6:	cd bf       	out	0x3d, r28	; 61
    24e8:	cf 91       	pop	r28
    24ea:	df 91       	pop	r29
    24ec:	1f 91       	pop	r17
    24ee:	0f 91       	pop	r16
    24f0:	08 95       	ret

000024f2 <LCD_vidClearDisplay>:

void LCD_vidClearDisplay(void)
{
    24f2:	df 93       	push	r29
    24f4:	cf 93       	push	r28
    24f6:	cd b7       	in	r28, 0x3d	; 61
    24f8:	de b7       	in	r29, 0x3e	; 62
	LCD_u8sendCommand(0b00000001);
    24fa:	81 e0       	ldi	r24, 0x01	; 1
    24fc:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_u8sendCommand>
}
    2500:	cf 91       	pop	r28
    2502:	df 91       	pop	r29
    2504:	08 95       	ret

00002506 <LCD_vidReturnHome>:

void LCD_vidReturnHome(void)
{
    2506:	df 93       	push	r29
    2508:	cf 93       	push	r28
    250a:	cd b7       	in	r28, 0x3d	; 61
    250c:	de b7       	in	r29, 0x3e	; 62
	LCD_u8sendCommand(0b00000010);
    250e:	82 e0       	ldi	r24, 0x02	; 2
    2510:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_u8sendCommand>
}
    2514:	cf 91       	pop	r28
    2516:	df 91       	pop	r29
    2518:	08 95       	ret

0000251a <LCD_vidShiftRight>:

void LCD_vidShiftRight(void)
{
    251a:	df 93       	push	r29
    251c:	cf 93       	push	r28
    251e:	cd b7       	in	r28, 0x3d	; 61
    2520:	de b7       	in	r29, 0x3e	; 62
	LCD_u8sendCommand(0b00011100);
    2522:	8c e1       	ldi	r24, 0x1C	; 28
    2524:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_u8sendCommand>
}
    2528:	cf 91       	pop	r28
    252a:	df 91       	pop	r29
    252c:	08 95       	ret

0000252e <LCD_vidShiftLeft>:

void LCD_vidShiftLeft(void)
{
    252e:	df 93       	push	r29
    2530:	cf 93       	push	r28
    2532:	cd b7       	in	r28, 0x3d	; 61
    2534:	de b7       	in	r29, 0x3e	; 62
	LCD_u8sendCommand(0b00011000);
    2536:	88 e1       	ldi	r24, 0x18	; 24
    2538:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_u8sendCommand>

}
    253c:	cf 91       	pop	r28
    253e:	df 91       	pop	r29
    2540:	08 95       	ret

00002542 <LCD_vidSinWaveString>:

void LCD_vidSinWaveString(const u8* copy_pcString)
{
    2542:	df 93       	push	r29
    2544:	cf 93       	push	r28
    2546:	cd b7       	in	r28, 0x3d	; 61
    2548:	de b7       	in	r29, 0x3e	; 62
    254a:	63 97       	sbiw	r28, 0x13	; 19
    254c:	0f b6       	in	r0, 0x3f	; 63
    254e:	f8 94       	cli
    2550:	de bf       	out	0x3e, r29	; 62
    2552:	0f be       	out	0x3f, r0	; 63
    2554:	cd bf       	out	0x3d, r28	; 61
    2556:	9b 8b       	std	Y+19, r25	; 0x13
    2558:	8a 8b       	std	Y+18, r24	; 0x12
	u8 local_u8counter = 0;
    255a:	19 8a       	std	Y+17, r1	; 0x11
	u8 local_u8XPos = 2;
    255c:	82 e0       	ldi	r24, 0x02	; 2
    255e:	88 8b       	std	Y+16, r24	; 0x10
	u8 local_u8Iterate = 0;
    2560:	1f 86       	std	Y+15, r1	; 0x0f
    2562:	8f c0       	rjmp	.+286    	; 0x2682 <LCD_vidSinWaveString+0x140>

	while((copy_pcString[local_u8counter] != '\0')&&local_u8Iterate<10)
	{
		if(local_u8counter/2)
    2564:	89 89       	ldd	r24, Y+17	; 0x11
    2566:	82 30       	cpi	r24, 0x02	; 2
    2568:	28 f0       	brcs	.+10     	; 0x2574 <LCD_vidSinWaveString+0x32>
		{
			LCD_vidGoToXY(local_u8XPos, 0);
    256a:	88 89       	ldd	r24, Y+16	; 0x10
    256c:	60 e0       	ldi	r22, 0x00	; 0
    256e:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_vidGoToXY>
    2572:	04 c0       	rjmp	.+8      	; 0x257c <LCD_vidSinWaveString+0x3a>
		}

		else
		{
			LCD_vidGoToXY(local_u8XPos, 1);
    2574:	88 89       	ldd	r24, Y+16	; 0x10
    2576:	61 e0       	ldi	r22, 0x01	; 1
    2578:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_vidGoToXY>
		}

		LCD_u8sendData(copy_pcString[local_u8counter]);
    257c:	89 89       	ldd	r24, Y+17	; 0x11
    257e:	28 2f       	mov	r18, r24
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	8a 89       	ldd	r24, Y+18	; 0x12
    2584:	9b 89       	ldd	r25, Y+19	; 0x13
    2586:	fc 01       	movw	r30, r24
    2588:	e2 0f       	add	r30, r18
    258a:	f3 1f       	adc	r31, r19
    258c:	80 81       	ld	r24, Z
    258e:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <LCD_u8sendData>
		local_u8counter++;
    2592:	89 89       	ldd	r24, Y+17	; 0x11
    2594:	8f 5f       	subi	r24, 0xFF	; 255
    2596:	89 8b       	std	Y+17, r24	; 0x11
		local_u8XPos++;
    2598:	88 89       	ldd	r24, Y+16	; 0x10
    259a:	8f 5f       	subi	r24, 0xFF	; 255
    259c:	88 8b       	std	Y+16, r24	; 0x10
    259e:	80 e0       	ldi	r24, 0x00	; 0
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	a6 e1       	ldi	r26, 0x16	; 22
    25a4:	b3 e4       	ldi	r27, 0x43	; 67
    25a6:	8b 87       	std	Y+11, r24	; 0x0b
    25a8:	9c 87       	std	Y+12, r25	; 0x0c
    25aa:	ad 87       	std	Y+13, r26	; 0x0d
    25ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    25b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    25b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    25b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    25b6:	20 e0       	ldi	r18, 0x00	; 0
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	4a ef       	ldi	r20, 0xFA	; 250
    25bc:	54 e4       	ldi	r21, 0x44	; 68
    25be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c2:	dc 01       	movw	r26, r24
    25c4:	cb 01       	movw	r24, r22
    25c6:	8f 83       	std	Y+7, r24	; 0x07
    25c8:	98 87       	std	Y+8, r25	; 0x08
    25ca:	a9 87       	std	Y+9, r26	; 0x09
    25cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25ce:	6f 81       	ldd	r22, Y+7	; 0x07
    25d0:	78 85       	ldd	r23, Y+8	; 0x08
    25d2:	89 85       	ldd	r24, Y+9	; 0x09
    25d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d6:	20 e0       	ldi	r18, 0x00	; 0
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	40 e8       	ldi	r20, 0x80	; 128
    25dc:	5f e3       	ldi	r21, 0x3F	; 63
    25de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25e2:	88 23       	and	r24, r24
    25e4:	2c f4       	brge	.+10     	; 0x25f0 <LCD_vidSinWaveString+0xae>
		__ticks = 1;
    25e6:	81 e0       	ldi	r24, 0x01	; 1
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	9e 83       	std	Y+6, r25	; 0x06
    25ec:	8d 83       	std	Y+5, r24	; 0x05
    25ee:	3f c0       	rjmp	.+126    	; 0x266e <LCD_vidSinWaveString+0x12c>
	else if (__tmp > 65535)
    25f0:	6f 81       	ldd	r22, Y+7	; 0x07
    25f2:	78 85       	ldd	r23, Y+8	; 0x08
    25f4:	89 85       	ldd	r24, Y+9	; 0x09
    25f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25f8:	20 e0       	ldi	r18, 0x00	; 0
    25fa:	3f ef       	ldi	r19, 0xFF	; 255
    25fc:	4f e7       	ldi	r20, 0x7F	; 127
    25fe:	57 e4       	ldi	r21, 0x47	; 71
    2600:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2604:	18 16       	cp	r1, r24
    2606:	4c f5       	brge	.+82     	; 0x265a <LCD_vidSinWaveString+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2608:	6b 85       	ldd	r22, Y+11	; 0x0b
    260a:	7c 85       	ldd	r23, Y+12	; 0x0c
    260c:	8d 85       	ldd	r24, Y+13	; 0x0d
    260e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	40 e2       	ldi	r20, 0x20	; 32
    2616:	51 e4       	ldi	r21, 0x41	; 65
    2618:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	bc 01       	movw	r22, r24
    2622:	cd 01       	movw	r24, r26
    2624:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2628:	dc 01       	movw	r26, r24
    262a:	cb 01       	movw	r24, r22
    262c:	9e 83       	std	Y+6, r25	; 0x06
    262e:	8d 83       	std	Y+5, r24	; 0x05
    2630:	0f c0       	rjmp	.+30     	; 0x2650 <LCD_vidSinWaveString+0x10e>
    2632:	88 ec       	ldi	r24, 0xC8	; 200
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	9c 83       	std	Y+4, r25	; 0x04
    2638:	8b 83       	std	Y+3, r24	; 0x03
    263a:	8b 81       	ldd	r24, Y+3	; 0x03
    263c:	9c 81       	ldd	r25, Y+4	; 0x04
    263e:	01 97       	sbiw	r24, 0x01	; 1
    2640:	f1 f7       	brne	.-4      	; 0x263e <LCD_vidSinWaveString+0xfc>
    2642:	9c 83       	std	Y+4, r25	; 0x04
    2644:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2646:	8d 81       	ldd	r24, Y+5	; 0x05
    2648:	9e 81       	ldd	r25, Y+6	; 0x06
    264a:	01 97       	sbiw	r24, 0x01	; 1
    264c:	9e 83       	std	Y+6, r25	; 0x06
    264e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2650:	8d 81       	ldd	r24, Y+5	; 0x05
    2652:	9e 81       	ldd	r25, Y+6	; 0x06
    2654:	00 97       	sbiw	r24, 0x00	; 0
    2656:	69 f7       	brne	.-38     	; 0x2632 <LCD_vidSinWaveString+0xf0>
    2658:	14 c0       	rjmp	.+40     	; 0x2682 <LCD_vidSinWaveString+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    265a:	6f 81       	ldd	r22, Y+7	; 0x07
    265c:	78 85       	ldd	r23, Y+8	; 0x08
    265e:	89 85       	ldd	r24, Y+9	; 0x09
    2660:	9a 85       	ldd	r25, Y+10	; 0x0a
    2662:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2666:	dc 01       	movw	r26, r24
    2668:	cb 01       	movw	r24, r22
    266a:	9e 83       	std	Y+6, r25	; 0x06
    266c:	8d 83       	std	Y+5, r24	; 0x05
    266e:	8d 81       	ldd	r24, Y+5	; 0x05
    2670:	9e 81       	ldd	r25, Y+6	; 0x06
    2672:	9a 83       	std	Y+2, r25	; 0x02
    2674:	89 83       	std	Y+1, r24	; 0x01
    2676:	89 81       	ldd	r24, Y+1	; 0x01
    2678:	9a 81       	ldd	r25, Y+2	; 0x02
    267a:	01 97       	sbiw	r24, 0x01	; 1
    267c:	f1 f7       	brne	.-4      	; 0x267a <LCD_vidSinWaveString+0x138>
    267e:	9a 83       	std	Y+2, r25	; 0x02
    2680:	89 83       	std	Y+1, r24	; 0x01
{
	u8 local_u8counter = 0;
	u8 local_u8XPos = 2;
	u8 local_u8Iterate = 0;

	while((copy_pcString[local_u8counter] != '\0')&&local_u8Iterate<10)
    2682:	89 89       	ldd	r24, Y+17	; 0x11
    2684:	28 2f       	mov	r18, r24
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	8a 89       	ldd	r24, Y+18	; 0x12
    268a:	9b 89       	ldd	r25, Y+19	; 0x13
    268c:	fc 01       	movw	r30, r24
    268e:	e2 0f       	add	r30, r18
    2690:	f3 1f       	adc	r31, r19
    2692:	80 81       	ld	r24, Z
    2694:	88 23       	and	r24, r24
    2696:	21 f0       	breq	.+8      	; 0x26a0 <LCD_vidSinWaveString+0x15e>
    2698:	8f 85       	ldd	r24, Y+15	; 0x0f
    269a:	8a 30       	cpi	r24, 0x0A	; 10
    269c:	08 f4       	brcc	.+2      	; 0x26a0 <LCD_vidSinWaveString+0x15e>
    269e:	62 cf       	rjmp	.-316    	; 0x2564 <LCD_vidSinWaveString+0x22>
		LCD_u8sendData(copy_pcString[local_u8counter]);
		local_u8counter++;
		local_u8XPos++;
		_delay_ms(150);
	}
}
    26a0:	63 96       	adiw	r28, 0x13	; 19
    26a2:	0f b6       	in	r0, 0x3f	; 63
    26a4:	f8 94       	cli
    26a6:	de bf       	out	0x3e, r29	; 62
    26a8:	0f be       	out	0x3f, r0	; 63
    26aa:	cd bf       	out	0x3d, r28	; 61
    26ac:	cf 91       	pop	r28
    26ae:	df 91       	pop	r29
    26b0:	08 95       	ret

000026b2 <LCD_vidGlitchString>:

void LCD_vidGlitchString(const u8* copy_pcString)
{
    26b2:	0f 93       	push	r16
    26b4:	1f 93       	push	r17
    26b6:	df 93       	push	r29
    26b8:	cf 93       	push	r28
    26ba:	cd b7       	in	r28, 0x3d	; 61
    26bc:	de b7       	in	r29, 0x3e	; 62
    26be:	c6 55       	subi	r28, 0x56	; 86
    26c0:	d0 40       	sbci	r29, 0x00	; 0
    26c2:	0f b6       	in	r0, 0x3f	; 63
    26c4:	f8 94       	cli
    26c6:	de bf       	out	0x3e, r29	; 62
    26c8:	0f be       	out	0x3f, r0	; 63
    26ca:	cd bf       	out	0x3d, r28	; 61
    26cc:	fe 01       	movw	r30, r28
    26ce:	eb 5a       	subi	r30, 0xAB	; 171
    26d0:	ff 4f       	sbci	r31, 0xFF	; 255
    26d2:	91 83       	std	Z+1, r25	; 0x01
    26d4:	80 83       	st	Z, r24
	LCD_vidCenterString(copy_pcString, 0);
    26d6:	fe 01       	movw	r30, r28
    26d8:	eb 5a       	subi	r30, 0xAB	; 171
    26da:	ff 4f       	sbci	r31, 0xFF	; 255
    26dc:	80 81       	ld	r24, Z
    26de:	91 81       	ldd	r25, Z+1	; 0x01
    26e0:	60 e0       	ldi	r22, 0x00	; 0
    26e2:	0e 94 49 10 	call	0x2092	; 0x2092 <LCD_vidCenterString>
    26e6:	fe 01       	movw	r30, r28
    26e8:	ef 5a       	subi	r30, 0xAF	; 175
    26ea:	ff 4f       	sbci	r31, 0xFF	; 255
    26ec:	80 e0       	ldi	r24, 0x00	; 0
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	a8 e4       	ldi	r26, 0x48	; 72
    26f2:	b2 e4       	ldi	r27, 0x42	; 66
    26f4:	80 83       	st	Z, r24
    26f6:	91 83       	std	Z+1, r25	; 0x01
    26f8:	a2 83       	std	Z+2, r26	; 0x02
    26fa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26fc:	8e 01       	movw	r16, r28
    26fe:	03 5b       	subi	r16, 0xB3	; 179
    2700:	1f 4f       	sbci	r17, 0xFF	; 255
    2702:	fe 01       	movw	r30, r28
    2704:	ef 5a       	subi	r30, 0xAF	; 175
    2706:	ff 4f       	sbci	r31, 0xFF	; 255
    2708:	60 81       	ld	r22, Z
    270a:	71 81       	ldd	r23, Z+1	; 0x01
    270c:	82 81       	ldd	r24, Z+2	; 0x02
    270e:	93 81       	ldd	r25, Z+3	; 0x03
    2710:	20 e0       	ldi	r18, 0x00	; 0
    2712:	30 e0       	ldi	r19, 0x00	; 0
    2714:	4a ef       	ldi	r20, 0xFA	; 250
    2716:	54 e4       	ldi	r21, 0x44	; 68
    2718:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    271c:	dc 01       	movw	r26, r24
    271e:	cb 01       	movw	r24, r22
    2720:	f8 01       	movw	r30, r16
    2722:	80 83       	st	Z, r24
    2724:	91 83       	std	Z+1, r25	; 0x01
    2726:	a2 83       	std	Z+2, r26	; 0x02
    2728:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    272a:	fe 01       	movw	r30, r28
    272c:	e3 5b       	subi	r30, 0xB3	; 179
    272e:	ff 4f       	sbci	r31, 0xFF	; 255
    2730:	60 81       	ld	r22, Z
    2732:	71 81       	ldd	r23, Z+1	; 0x01
    2734:	82 81       	ldd	r24, Z+2	; 0x02
    2736:	93 81       	ldd	r25, Z+3	; 0x03
    2738:	20 e0       	ldi	r18, 0x00	; 0
    273a:	30 e0       	ldi	r19, 0x00	; 0
    273c:	40 e8       	ldi	r20, 0x80	; 128
    273e:	5f e3       	ldi	r21, 0x3F	; 63
    2740:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2744:	88 23       	and	r24, r24
    2746:	44 f4       	brge	.+16     	; 0x2758 <LCD_vidGlitchString+0xa6>
		__ticks = 1;
    2748:	fe 01       	movw	r30, r28
    274a:	e5 5b       	subi	r30, 0xB5	; 181
    274c:	ff 4f       	sbci	r31, 0xFF	; 255
    274e:	81 e0       	ldi	r24, 0x01	; 1
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	91 83       	std	Z+1, r25	; 0x01
    2754:	80 83       	st	Z, r24
    2756:	64 c0       	rjmp	.+200    	; 0x2820 <LCD_vidGlitchString+0x16e>
	else if (__tmp > 65535)
    2758:	fe 01       	movw	r30, r28
    275a:	e3 5b       	subi	r30, 0xB3	; 179
    275c:	ff 4f       	sbci	r31, 0xFF	; 255
    275e:	60 81       	ld	r22, Z
    2760:	71 81       	ldd	r23, Z+1	; 0x01
    2762:	82 81       	ldd	r24, Z+2	; 0x02
    2764:	93 81       	ldd	r25, Z+3	; 0x03
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	3f ef       	ldi	r19, 0xFF	; 255
    276a:	4f e7       	ldi	r20, 0x7F	; 127
    276c:	57 e4       	ldi	r21, 0x47	; 71
    276e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2772:	18 16       	cp	r1, r24
    2774:	0c f0       	brlt	.+2      	; 0x2778 <LCD_vidGlitchString+0xc6>
    2776:	43 c0       	rjmp	.+134    	; 0x27fe <LCD_vidGlitchString+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2778:	fe 01       	movw	r30, r28
    277a:	ef 5a       	subi	r30, 0xAF	; 175
    277c:	ff 4f       	sbci	r31, 0xFF	; 255
    277e:	60 81       	ld	r22, Z
    2780:	71 81       	ldd	r23, Z+1	; 0x01
    2782:	82 81       	ldd	r24, Z+2	; 0x02
    2784:	93 81       	ldd	r25, Z+3	; 0x03
    2786:	20 e0       	ldi	r18, 0x00	; 0
    2788:	30 e0       	ldi	r19, 0x00	; 0
    278a:	40 e2       	ldi	r20, 0x20	; 32
    278c:	51 e4       	ldi	r21, 0x41	; 65
    278e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2792:	dc 01       	movw	r26, r24
    2794:	cb 01       	movw	r24, r22
    2796:	8e 01       	movw	r16, r28
    2798:	05 5b       	subi	r16, 0xB5	; 181
    279a:	1f 4f       	sbci	r17, 0xFF	; 255
    279c:	bc 01       	movw	r22, r24
    279e:	cd 01       	movw	r24, r26
    27a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a4:	dc 01       	movw	r26, r24
    27a6:	cb 01       	movw	r24, r22
    27a8:	f8 01       	movw	r30, r16
    27aa:	91 83       	std	Z+1, r25	; 0x01
    27ac:	80 83       	st	Z, r24
    27ae:	1f c0       	rjmp	.+62     	; 0x27ee <LCD_vidGlitchString+0x13c>
    27b0:	fe 01       	movw	r30, r28
    27b2:	e7 5b       	subi	r30, 0xB7	; 183
    27b4:	ff 4f       	sbci	r31, 0xFF	; 255
    27b6:	88 ec       	ldi	r24, 0xC8	; 200
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	91 83       	std	Z+1, r25	; 0x01
    27bc:	80 83       	st	Z, r24
    27be:	fe 01       	movw	r30, r28
    27c0:	e7 5b       	subi	r30, 0xB7	; 183
    27c2:	ff 4f       	sbci	r31, 0xFF	; 255
    27c4:	80 81       	ld	r24, Z
    27c6:	91 81       	ldd	r25, Z+1	; 0x01
    27c8:	01 97       	sbiw	r24, 0x01	; 1
    27ca:	f1 f7       	brne	.-4      	; 0x27c8 <LCD_vidGlitchString+0x116>
    27cc:	fe 01       	movw	r30, r28
    27ce:	e7 5b       	subi	r30, 0xB7	; 183
    27d0:	ff 4f       	sbci	r31, 0xFF	; 255
    27d2:	91 83       	std	Z+1, r25	; 0x01
    27d4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27d6:	de 01       	movw	r26, r28
    27d8:	a5 5b       	subi	r26, 0xB5	; 181
    27da:	bf 4f       	sbci	r27, 0xFF	; 255
    27dc:	fe 01       	movw	r30, r28
    27de:	e5 5b       	subi	r30, 0xB5	; 181
    27e0:	ff 4f       	sbci	r31, 0xFF	; 255
    27e2:	80 81       	ld	r24, Z
    27e4:	91 81       	ldd	r25, Z+1	; 0x01
    27e6:	01 97       	sbiw	r24, 0x01	; 1
    27e8:	11 96       	adiw	r26, 0x01	; 1
    27ea:	9c 93       	st	X, r25
    27ec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ee:	fe 01       	movw	r30, r28
    27f0:	e5 5b       	subi	r30, 0xB5	; 181
    27f2:	ff 4f       	sbci	r31, 0xFF	; 255
    27f4:	80 81       	ld	r24, Z
    27f6:	91 81       	ldd	r25, Z+1	; 0x01
    27f8:	00 97       	sbiw	r24, 0x00	; 0
    27fa:	d1 f6       	brne	.-76     	; 0x27b0 <LCD_vidGlitchString+0xfe>
    27fc:	27 c0       	rjmp	.+78     	; 0x284c <LCD_vidGlitchString+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27fe:	8e 01       	movw	r16, r28
    2800:	05 5b       	subi	r16, 0xB5	; 181
    2802:	1f 4f       	sbci	r17, 0xFF	; 255
    2804:	fe 01       	movw	r30, r28
    2806:	e3 5b       	subi	r30, 0xB3	; 179
    2808:	ff 4f       	sbci	r31, 0xFF	; 255
    280a:	60 81       	ld	r22, Z
    280c:	71 81       	ldd	r23, Z+1	; 0x01
    280e:	82 81       	ldd	r24, Z+2	; 0x02
    2810:	93 81       	ldd	r25, Z+3	; 0x03
    2812:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2816:	dc 01       	movw	r26, r24
    2818:	cb 01       	movw	r24, r22
    281a:	f8 01       	movw	r30, r16
    281c:	91 83       	std	Z+1, r25	; 0x01
    281e:	80 83       	st	Z, r24
    2820:	de 01       	movw	r26, r28
    2822:	a9 5b       	subi	r26, 0xB9	; 185
    2824:	bf 4f       	sbci	r27, 0xFF	; 255
    2826:	fe 01       	movw	r30, r28
    2828:	e5 5b       	subi	r30, 0xB5	; 181
    282a:	ff 4f       	sbci	r31, 0xFF	; 255
    282c:	80 81       	ld	r24, Z
    282e:	91 81       	ldd	r25, Z+1	; 0x01
    2830:	8d 93       	st	X+, r24
    2832:	9c 93       	st	X, r25
    2834:	fe 01       	movw	r30, r28
    2836:	e9 5b       	subi	r30, 0xB9	; 185
    2838:	ff 4f       	sbci	r31, 0xFF	; 255
    283a:	80 81       	ld	r24, Z
    283c:	91 81       	ldd	r25, Z+1	; 0x01
    283e:	01 97       	sbiw	r24, 0x01	; 1
    2840:	f1 f7       	brne	.-4      	; 0x283e <LCD_vidGlitchString+0x18c>
    2842:	fe 01       	movw	r30, r28
    2844:	e9 5b       	subi	r30, 0xB9	; 185
    2846:	ff 4f       	sbci	r31, 0xFF	; 255
    2848:	91 83       	std	Z+1, r25	; 0x01
    284a:	80 83       	st	Z, r24
	_delay_ms(50);
	LCD_vidShiftLeft();
    284c:	0e 94 97 12 	call	0x252e	; 0x252e <LCD_vidShiftLeft>
    2850:	fe 01       	movw	r30, r28
    2852:	ed 5b       	subi	r30, 0xBD	; 189
    2854:	ff 4f       	sbci	r31, 0xFF	; 255
    2856:	80 e0       	ldi	r24, 0x00	; 0
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	a8 e4       	ldi	r26, 0x48	; 72
    285c:	b2 e4       	ldi	r27, 0x42	; 66
    285e:	80 83       	st	Z, r24
    2860:	91 83       	std	Z+1, r25	; 0x01
    2862:	a2 83       	std	Z+2, r26	; 0x02
    2864:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2866:	8e 01       	movw	r16, r28
    2868:	01 5c       	subi	r16, 0xC1	; 193
    286a:	1f 4f       	sbci	r17, 0xFF	; 255
    286c:	fe 01       	movw	r30, r28
    286e:	ed 5b       	subi	r30, 0xBD	; 189
    2870:	ff 4f       	sbci	r31, 0xFF	; 255
    2872:	60 81       	ld	r22, Z
    2874:	71 81       	ldd	r23, Z+1	; 0x01
    2876:	82 81       	ldd	r24, Z+2	; 0x02
    2878:	93 81       	ldd	r25, Z+3	; 0x03
    287a:	20 e0       	ldi	r18, 0x00	; 0
    287c:	30 e0       	ldi	r19, 0x00	; 0
    287e:	4a ef       	ldi	r20, 0xFA	; 250
    2880:	54 e4       	ldi	r21, 0x44	; 68
    2882:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2886:	dc 01       	movw	r26, r24
    2888:	cb 01       	movw	r24, r22
    288a:	f8 01       	movw	r30, r16
    288c:	80 83       	st	Z, r24
    288e:	91 83       	std	Z+1, r25	; 0x01
    2890:	a2 83       	std	Z+2, r26	; 0x02
    2892:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2894:	fe 01       	movw	r30, r28
    2896:	ff 96       	adiw	r30, 0x3f	; 63
    2898:	60 81       	ld	r22, Z
    289a:	71 81       	ldd	r23, Z+1	; 0x01
    289c:	82 81       	ldd	r24, Z+2	; 0x02
    289e:	93 81       	ldd	r25, Z+3	; 0x03
    28a0:	20 e0       	ldi	r18, 0x00	; 0
    28a2:	30 e0       	ldi	r19, 0x00	; 0
    28a4:	40 e8       	ldi	r20, 0x80	; 128
    28a6:	5f e3       	ldi	r21, 0x3F	; 63
    28a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28ac:	88 23       	and	r24, r24
    28ae:	2c f4       	brge	.+10     	; 0x28ba <LCD_vidGlitchString+0x208>
		__ticks = 1;
    28b0:	81 e0       	ldi	r24, 0x01	; 1
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	9e af       	std	Y+62, r25	; 0x3e
    28b6:	8d af       	std	Y+61, r24	; 0x3d
    28b8:	46 c0       	rjmp	.+140    	; 0x2946 <LCD_vidGlitchString+0x294>
	else if (__tmp > 65535)
    28ba:	fe 01       	movw	r30, r28
    28bc:	ff 96       	adiw	r30, 0x3f	; 63
    28be:	60 81       	ld	r22, Z
    28c0:	71 81       	ldd	r23, Z+1	; 0x01
    28c2:	82 81       	ldd	r24, Z+2	; 0x02
    28c4:	93 81       	ldd	r25, Z+3	; 0x03
    28c6:	20 e0       	ldi	r18, 0x00	; 0
    28c8:	3f ef       	ldi	r19, 0xFF	; 255
    28ca:	4f e7       	ldi	r20, 0x7F	; 127
    28cc:	57 e4       	ldi	r21, 0x47	; 71
    28ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28d2:	18 16       	cp	r1, r24
    28d4:	64 f5       	brge	.+88     	; 0x292e <LCD_vidGlitchString+0x27c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28d6:	fe 01       	movw	r30, r28
    28d8:	ed 5b       	subi	r30, 0xBD	; 189
    28da:	ff 4f       	sbci	r31, 0xFF	; 255
    28dc:	60 81       	ld	r22, Z
    28de:	71 81       	ldd	r23, Z+1	; 0x01
    28e0:	82 81       	ldd	r24, Z+2	; 0x02
    28e2:	93 81       	ldd	r25, Z+3	; 0x03
    28e4:	20 e0       	ldi	r18, 0x00	; 0
    28e6:	30 e0       	ldi	r19, 0x00	; 0
    28e8:	40 e2       	ldi	r20, 0x20	; 32
    28ea:	51 e4       	ldi	r21, 0x41	; 65
    28ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f0:	dc 01       	movw	r26, r24
    28f2:	cb 01       	movw	r24, r22
    28f4:	bc 01       	movw	r22, r24
    28f6:	cd 01       	movw	r24, r26
    28f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28fc:	dc 01       	movw	r26, r24
    28fe:	cb 01       	movw	r24, r22
    2900:	9e af       	std	Y+62, r25	; 0x3e
    2902:	8d af       	std	Y+61, r24	; 0x3d
    2904:	0f c0       	rjmp	.+30     	; 0x2924 <LCD_vidGlitchString+0x272>
    2906:	88 ec       	ldi	r24, 0xC8	; 200
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	9c af       	std	Y+60, r25	; 0x3c
    290c:	8b af       	std	Y+59, r24	; 0x3b
    290e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2910:	9c ad       	ldd	r25, Y+60	; 0x3c
    2912:	01 97       	sbiw	r24, 0x01	; 1
    2914:	f1 f7       	brne	.-4      	; 0x2912 <LCD_vidGlitchString+0x260>
    2916:	9c af       	std	Y+60, r25	; 0x3c
    2918:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    291a:	8d ad       	ldd	r24, Y+61	; 0x3d
    291c:	9e ad       	ldd	r25, Y+62	; 0x3e
    291e:	01 97       	sbiw	r24, 0x01	; 1
    2920:	9e af       	std	Y+62, r25	; 0x3e
    2922:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2924:	8d ad       	ldd	r24, Y+61	; 0x3d
    2926:	9e ad       	ldd	r25, Y+62	; 0x3e
    2928:	00 97       	sbiw	r24, 0x00	; 0
    292a:	69 f7       	brne	.-38     	; 0x2906 <LCD_vidGlitchString+0x254>
    292c:	16 c0       	rjmp	.+44     	; 0x295a <LCD_vidGlitchString+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    292e:	fe 01       	movw	r30, r28
    2930:	ff 96       	adiw	r30, 0x3f	; 63
    2932:	60 81       	ld	r22, Z
    2934:	71 81       	ldd	r23, Z+1	; 0x01
    2936:	82 81       	ldd	r24, Z+2	; 0x02
    2938:	93 81       	ldd	r25, Z+3	; 0x03
    293a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    293e:	dc 01       	movw	r26, r24
    2940:	cb 01       	movw	r24, r22
    2942:	9e af       	std	Y+62, r25	; 0x3e
    2944:	8d af       	std	Y+61, r24	; 0x3d
    2946:	8d ad       	ldd	r24, Y+61	; 0x3d
    2948:	9e ad       	ldd	r25, Y+62	; 0x3e
    294a:	9a af       	std	Y+58, r25	; 0x3a
    294c:	89 af       	std	Y+57, r24	; 0x39
    294e:	89 ad       	ldd	r24, Y+57	; 0x39
    2950:	9a ad       	ldd	r25, Y+58	; 0x3a
    2952:	01 97       	sbiw	r24, 0x01	; 1
    2954:	f1 f7       	brne	.-4      	; 0x2952 <LCD_vidGlitchString+0x2a0>
    2956:	9a af       	std	Y+58, r25	; 0x3a
    2958:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(50);
	LCD_vidShiftRight();
    295a:	0e 94 8d 12 	call	0x251a	; 0x251a <LCD_vidShiftRight>
    295e:	80 e0       	ldi	r24, 0x00	; 0
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	a8 e4       	ldi	r26, 0x48	; 72
    2964:	b2 e4       	ldi	r27, 0x42	; 66
    2966:	8d ab       	std	Y+53, r24	; 0x35
    2968:	9e ab       	std	Y+54, r25	; 0x36
    296a:	af ab       	std	Y+55, r26	; 0x37
    296c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    296e:	6d a9       	ldd	r22, Y+53	; 0x35
    2970:	7e a9       	ldd	r23, Y+54	; 0x36
    2972:	8f a9       	ldd	r24, Y+55	; 0x37
    2974:	98 ad       	ldd	r25, Y+56	; 0x38
    2976:	20 e0       	ldi	r18, 0x00	; 0
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	4a ef       	ldi	r20, 0xFA	; 250
    297c:	54 e4       	ldi	r21, 0x44	; 68
    297e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2982:	dc 01       	movw	r26, r24
    2984:	cb 01       	movw	r24, r22
    2986:	89 ab       	std	Y+49, r24	; 0x31
    2988:	9a ab       	std	Y+50, r25	; 0x32
    298a:	ab ab       	std	Y+51, r26	; 0x33
    298c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    298e:	69 a9       	ldd	r22, Y+49	; 0x31
    2990:	7a a9       	ldd	r23, Y+50	; 0x32
    2992:	8b a9       	ldd	r24, Y+51	; 0x33
    2994:	9c a9       	ldd	r25, Y+52	; 0x34
    2996:	20 e0       	ldi	r18, 0x00	; 0
    2998:	30 e0       	ldi	r19, 0x00	; 0
    299a:	40 e8       	ldi	r20, 0x80	; 128
    299c:	5f e3       	ldi	r21, 0x3F	; 63
    299e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29a2:	88 23       	and	r24, r24
    29a4:	2c f4       	brge	.+10     	; 0x29b0 <LCD_vidGlitchString+0x2fe>
		__ticks = 1;
    29a6:	81 e0       	ldi	r24, 0x01	; 1
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	98 ab       	std	Y+48, r25	; 0x30
    29ac:	8f a7       	std	Y+47, r24	; 0x2f
    29ae:	3f c0       	rjmp	.+126    	; 0x2a2e <LCD_vidGlitchString+0x37c>
	else if (__tmp > 65535)
    29b0:	69 a9       	ldd	r22, Y+49	; 0x31
    29b2:	7a a9       	ldd	r23, Y+50	; 0x32
    29b4:	8b a9       	ldd	r24, Y+51	; 0x33
    29b6:	9c a9       	ldd	r25, Y+52	; 0x34
    29b8:	20 e0       	ldi	r18, 0x00	; 0
    29ba:	3f ef       	ldi	r19, 0xFF	; 255
    29bc:	4f e7       	ldi	r20, 0x7F	; 127
    29be:	57 e4       	ldi	r21, 0x47	; 71
    29c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29c4:	18 16       	cp	r1, r24
    29c6:	4c f5       	brge	.+82     	; 0x2a1a <LCD_vidGlitchString+0x368>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29c8:	6d a9       	ldd	r22, Y+53	; 0x35
    29ca:	7e a9       	ldd	r23, Y+54	; 0x36
    29cc:	8f a9       	ldd	r24, Y+55	; 0x37
    29ce:	98 ad       	ldd	r25, Y+56	; 0x38
    29d0:	20 e0       	ldi	r18, 0x00	; 0
    29d2:	30 e0       	ldi	r19, 0x00	; 0
    29d4:	40 e2       	ldi	r20, 0x20	; 32
    29d6:	51 e4       	ldi	r21, 0x41	; 65
    29d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29dc:	dc 01       	movw	r26, r24
    29de:	cb 01       	movw	r24, r22
    29e0:	bc 01       	movw	r22, r24
    29e2:	cd 01       	movw	r24, r26
    29e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e8:	dc 01       	movw	r26, r24
    29ea:	cb 01       	movw	r24, r22
    29ec:	98 ab       	std	Y+48, r25	; 0x30
    29ee:	8f a7       	std	Y+47, r24	; 0x2f
    29f0:	0f c0       	rjmp	.+30     	; 0x2a10 <LCD_vidGlitchString+0x35e>
    29f2:	88 ec       	ldi	r24, 0xC8	; 200
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	9e a7       	std	Y+46, r25	; 0x2e
    29f8:	8d a7       	std	Y+45, r24	; 0x2d
    29fa:	8d a5       	ldd	r24, Y+45	; 0x2d
    29fc:	9e a5       	ldd	r25, Y+46	; 0x2e
    29fe:	01 97       	sbiw	r24, 0x01	; 1
    2a00:	f1 f7       	brne	.-4      	; 0x29fe <LCD_vidGlitchString+0x34c>
    2a02:	9e a7       	std	Y+46, r25	; 0x2e
    2a04:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a06:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a08:	98 a9       	ldd	r25, Y+48	; 0x30
    2a0a:	01 97       	sbiw	r24, 0x01	; 1
    2a0c:	98 ab       	std	Y+48, r25	; 0x30
    2a0e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a10:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a12:	98 a9       	ldd	r25, Y+48	; 0x30
    2a14:	00 97       	sbiw	r24, 0x00	; 0
    2a16:	69 f7       	brne	.-38     	; 0x29f2 <LCD_vidGlitchString+0x340>
    2a18:	14 c0       	rjmp	.+40     	; 0x2a42 <LCD_vidGlitchString+0x390>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a1a:	69 a9       	ldd	r22, Y+49	; 0x31
    2a1c:	7a a9       	ldd	r23, Y+50	; 0x32
    2a1e:	8b a9       	ldd	r24, Y+51	; 0x33
    2a20:	9c a9       	ldd	r25, Y+52	; 0x34
    2a22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a26:	dc 01       	movw	r26, r24
    2a28:	cb 01       	movw	r24, r22
    2a2a:	98 ab       	std	Y+48, r25	; 0x30
    2a2c:	8f a7       	std	Y+47, r24	; 0x2f
    2a2e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a30:	98 a9       	ldd	r25, Y+48	; 0x30
    2a32:	9c a7       	std	Y+44, r25	; 0x2c
    2a34:	8b a7       	std	Y+43, r24	; 0x2b
    2a36:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a38:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a3a:	01 97       	sbiw	r24, 0x01	; 1
    2a3c:	f1 f7       	brne	.-4      	; 0x2a3a <LCD_vidGlitchString+0x388>
    2a3e:	9c a7       	std	Y+44, r25	; 0x2c
    2a40:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50);
	LCD_vidClearDisplay();
    2a42:	0e 94 79 12 	call	0x24f2	; 0x24f2 <LCD_vidClearDisplay>
	LCD_vidCenterString(copy_pcString, 1);
    2a46:	fe 01       	movw	r30, r28
    2a48:	eb 5a       	subi	r30, 0xAB	; 171
    2a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4c:	80 81       	ld	r24, Z
    2a4e:	91 81       	ldd	r25, Z+1	; 0x01
    2a50:	61 e0       	ldi	r22, 0x01	; 1
    2a52:	0e 94 49 10 	call	0x2092	; 0x2092 <LCD_vidCenterString>
	LCD_vidShiftRight();
    2a56:	0e 94 8d 12 	call	0x251a	; 0x251a <LCD_vidShiftRight>
    2a5a:	80 e0       	ldi	r24, 0x00	; 0
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	a8 e4       	ldi	r26, 0x48	; 72
    2a60:	b2 e4       	ldi	r27, 0x42	; 66
    2a62:	8f a3       	std	Y+39, r24	; 0x27
    2a64:	98 a7       	std	Y+40, r25	; 0x28
    2a66:	a9 a7       	std	Y+41, r26	; 0x29
    2a68:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a6a:	6f a1       	ldd	r22, Y+39	; 0x27
    2a6c:	78 a5       	ldd	r23, Y+40	; 0x28
    2a6e:	89 a5       	ldd	r24, Y+41	; 0x29
    2a70:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a72:	20 e0       	ldi	r18, 0x00	; 0
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	4a ef       	ldi	r20, 0xFA	; 250
    2a78:	54 e4       	ldi	r21, 0x44	; 68
    2a7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a7e:	dc 01       	movw	r26, r24
    2a80:	cb 01       	movw	r24, r22
    2a82:	8b a3       	std	Y+35, r24	; 0x23
    2a84:	9c a3       	std	Y+36, r25	; 0x24
    2a86:	ad a3       	std	Y+37, r26	; 0x25
    2a88:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a8a:	6b a1       	ldd	r22, Y+35	; 0x23
    2a8c:	7c a1       	ldd	r23, Y+36	; 0x24
    2a8e:	8d a1       	ldd	r24, Y+37	; 0x25
    2a90:	9e a1       	ldd	r25, Y+38	; 0x26
    2a92:	20 e0       	ldi	r18, 0x00	; 0
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	40 e8       	ldi	r20, 0x80	; 128
    2a98:	5f e3       	ldi	r21, 0x3F	; 63
    2a9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a9e:	88 23       	and	r24, r24
    2aa0:	2c f4       	brge	.+10     	; 0x2aac <LCD_vidGlitchString+0x3fa>
		__ticks = 1;
    2aa2:	81 e0       	ldi	r24, 0x01	; 1
    2aa4:	90 e0       	ldi	r25, 0x00	; 0
    2aa6:	9a a3       	std	Y+34, r25	; 0x22
    2aa8:	89 a3       	std	Y+33, r24	; 0x21
    2aaa:	3f c0       	rjmp	.+126    	; 0x2b2a <LCD_vidGlitchString+0x478>
	else if (__tmp > 65535)
    2aac:	6b a1       	ldd	r22, Y+35	; 0x23
    2aae:	7c a1       	ldd	r23, Y+36	; 0x24
    2ab0:	8d a1       	ldd	r24, Y+37	; 0x25
    2ab2:	9e a1       	ldd	r25, Y+38	; 0x26
    2ab4:	20 e0       	ldi	r18, 0x00	; 0
    2ab6:	3f ef       	ldi	r19, 0xFF	; 255
    2ab8:	4f e7       	ldi	r20, 0x7F	; 127
    2aba:	57 e4       	ldi	r21, 0x47	; 71
    2abc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ac0:	18 16       	cp	r1, r24
    2ac2:	4c f5       	brge	.+82     	; 0x2b16 <LCD_vidGlitchString+0x464>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ac4:	6f a1       	ldd	r22, Y+39	; 0x27
    2ac6:	78 a5       	ldd	r23, Y+40	; 0x28
    2ac8:	89 a5       	ldd	r24, Y+41	; 0x29
    2aca:	9a a5       	ldd	r25, Y+42	; 0x2a
    2acc:	20 e0       	ldi	r18, 0x00	; 0
    2ace:	30 e0       	ldi	r19, 0x00	; 0
    2ad0:	40 e2       	ldi	r20, 0x20	; 32
    2ad2:	51 e4       	ldi	r21, 0x41	; 65
    2ad4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ad8:	dc 01       	movw	r26, r24
    2ada:	cb 01       	movw	r24, r22
    2adc:	bc 01       	movw	r22, r24
    2ade:	cd 01       	movw	r24, r26
    2ae0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae4:	dc 01       	movw	r26, r24
    2ae6:	cb 01       	movw	r24, r22
    2ae8:	9a a3       	std	Y+34, r25	; 0x22
    2aea:	89 a3       	std	Y+33, r24	; 0x21
    2aec:	0f c0       	rjmp	.+30     	; 0x2b0c <LCD_vidGlitchString+0x45a>
    2aee:	88 ec       	ldi	r24, 0xC8	; 200
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	98 a3       	std	Y+32, r25	; 0x20
    2af4:	8f 8f       	std	Y+31, r24	; 0x1f
    2af6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2af8:	98 a1       	ldd	r25, Y+32	; 0x20
    2afa:	01 97       	sbiw	r24, 0x01	; 1
    2afc:	f1 f7       	brne	.-4      	; 0x2afa <LCD_vidGlitchString+0x448>
    2afe:	98 a3       	std	Y+32, r25	; 0x20
    2b00:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b02:	89 a1       	ldd	r24, Y+33	; 0x21
    2b04:	9a a1       	ldd	r25, Y+34	; 0x22
    2b06:	01 97       	sbiw	r24, 0x01	; 1
    2b08:	9a a3       	std	Y+34, r25	; 0x22
    2b0a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b0c:	89 a1       	ldd	r24, Y+33	; 0x21
    2b0e:	9a a1       	ldd	r25, Y+34	; 0x22
    2b10:	00 97       	sbiw	r24, 0x00	; 0
    2b12:	69 f7       	brne	.-38     	; 0x2aee <LCD_vidGlitchString+0x43c>
    2b14:	14 c0       	rjmp	.+40     	; 0x2b3e <LCD_vidGlitchString+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b16:	6b a1       	ldd	r22, Y+35	; 0x23
    2b18:	7c a1       	ldd	r23, Y+36	; 0x24
    2b1a:	8d a1       	ldd	r24, Y+37	; 0x25
    2b1c:	9e a1       	ldd	r25, Y+38	; 0x26
    2b1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b22:	dc 01       	movw	r26, r24
    2b24:	cb 01       	movw	r24, r22
    2b26:	9a a3       	std	Y+34, r25	; 0x22
    2b28:	89 a3       	std	Y+33, r24	; 0x21
    2b2a:	89 a1       	ldd	r24, Y+33	; 0x21
    2b2c:	9a a1       	ldd	r25, Y+34	; 0x22
    2b2e:	9e 8f       	std	Y+30, r25	; 0x1e
    2b30:	8d 8f       	std	Y+29, r24	; 0x1d
    2b32:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b34:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b36:	01 97       	sbiw	r24, 0x01	; 1
    2b38:	f1 f7       	brne	.-4      	; 0x2b36 <LCD_vidGlitchString+0x484>
    2b3a:	9e 8f       	std	Y+30, r25	; 0x1e
    2b3c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(50);
	LCD_vidShiftRight();
    2b3e:	0e 94 8d 12 	call	0x251a	; 0x251a <LCD_vidShiftRight>
    2b42:	80 e0       	ldi	r24, 0x00	; 0
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	a8 e4       	ldi	r26, 0x48	; 72
    2b48:	b2 e4       	ldi	r27, 0x42	; 66
    2b4a:	89 8f       	std	Y+25, r24	; 0x19
    2b4c:	9a 8f       	std	Y+26, r25	; 0x1a
    2b4e:	ab 8f       	std	Y+27, r26	; 0x1b
    2b50:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b52:	69 8d       	ldd	r22, Y+25	; 0x19
    2b54:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b56:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b58:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b5a:	20 e0       	ldi	r18, 0x00	; 0
    2b5c:	30 e0       	ldi	r19, 0x00	; 0
    2b5e:	4a ef       	ldi	r20, 0xFA	; 250
    2b60:	54 e4       	ldi	r21, 0x44	; 68
    2b62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b66:	dc 01       	movw	r26, r24
    2b68:	cb 01       	movw	r24, r22
    2b6a:	8d 8b       	std	Y+21, r24	; 0x15
    2b6c:	9e 8b       	std	Y+22, r25	; 0x16
    2b6e:	af 8b       	std	Y+23, r26	; 0x17
    2b70:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b72:	6d 89       	ldd	r22, Y+21	; 0x15
    2b74:	7e 89       	ldd	r23, Y+22	; 0x16
    2b76:	8f 89       	ldd	r24, Y+23	; 0x17
    2b78:	98 8d       	ldd	r25, Y+24	; 0x18
    2b7a:	20 e0       	ldi	r18, 0x00	; 0
    2b7c:	30 e0       	ldi	r19, 0x00	; 0
    2b7e:	40 e8       	ldi	r20, 0x80	; 128
    2b80:	5f e3       	ldi	r21, 0x3F	; 63
    2b82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b86:	88 23       	and	r24, r24
    2b88:	2c f4       	brge	.+10     	; 0x2b94 <LCD_vidGlitchString+0x4e2>
		__ticks = 1;
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	9c 8b       	std	Y+20, r25	; 0x14
    2b90:	8b 8b       	std	Y+19, r24	; 0x13
    2b92:	3f c0       	rjmp	.+126    	; 0x2c12 <LCD_vidGlitchString+0x560>
	else if (__tmp > 65535)
    2b94:	6d 89       	ldd	r22, Y+21	; 0x15
    2b96:	7e 89       	ldd	r23, Y+22	; 0x16
    2b98:	8f 89       	ldd	r24, Y+23	; 0x17
    2b9a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b9c:	20 e0       	ldi	r18, 0x00	; 0
    2b9e:	3f ef       	ldi	r19, 0xFF	; 255
    2ba0:	4f e7       	ldi	r20, 0x7F	; 127
    2ba2:	57 e4       	ldi	r21, 0x47	; 71
    2ba4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ba8:	18 16       	cp	r1, r24
    2baa:	4c f5       	brge	.+82     	; 0x2bfe <LCD_vidGlitchString+0x54c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bac:	69 8d       	ldd	r22, Y+25	; 0x19
    2bae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bb0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bb2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bb4:	20 e0       	ldi	r18, 0x00	; 0
    2bb6:	30 e0       	ldi	r19, 0x00	; 0
    2bb8:	40 e2       	ldi	r20, 0x20	; 32
    2bba:	51 e4       	ldi	r21, 0x41	; 65
    2bbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bc0:	dc 01       	movw	r26, r24
    2bc2:	cb 01       	movw	r24, r22
    2bc4:	bc 01       	movw	r22, r24
    2bc6:	cd 01       	movw	r24, r26
    2bc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bcc:	dc 01       	movw	r26, r24
    2bce:	cb 01       	movw	r24, r22
    2bd0:	9c 8b       	std	Y+20, r25	; 0x14
    2bd2:	8b 8b       	std	Y+19, r24	; 0x13
    2bd4:	0f c0       	rjmp	.+30     	; 0x2bf4 <LCD_vidGlitchString+0x542>
    2bd6:	88 ec       	ldi	r24, 0xC8	; 200
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	9a 8b       	std	Y+18, r25	; 0x12
    2bdc:	89 8b       	std	Y+17, r24	; 0x11
    2bde:	89 89       	ldd	r24, Y+17	; 0x11
    2be0:	9a 89       	ldd	r25, Y+18	; 0x12
    2be2:	01 97       	sbiw	r24, 0x01	; 1
    2be4:	f1 f7       	brne	.-4      	; 0x2be2 <LCD_vidGlitchString+0x530>
    2be6:	9a 8b       	std	Y+18, r25	; 0x12
    2be8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bea:	8b 89       	ldd	r24, Y+19	; 0x13
    2bec:	9c 89       	ldd	r25, Y+20	; 0x14
    2bee:	01 97       	sbiw	r24, 0x01	; 1
    2bf0:	9c 8b       	std	Y+20, r25	; 0x14
    2bf2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bf4:	8b 89       	ldd	r24, Y+19	; 0x13
    2bf6:	9c 89       	ldd	r25, Y+20	; 0x14
    2bf8:	00 97       	sbiw	r24, 0x00	; 0
    2bfa:	69 f7       	brne	.-38     	; 0x2bd6 <LCD_vidGlitchString+0x524>
    2bfc:	14 c0       	rjmp	.+40     	; 0x2c26 <LCD_vidGlitchString+0x574>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bfe:	6d 89       	ldd	r22, Y+21	; 0x15
    2c00:	7e 89       	ldd	r23, Y+22	; 0x16
    2c02:	8f 89       	ldd	r24, Y+23	; 0x17
    2c04:	98 8d       	ldd	r25, Y+24	; 0x18
    2c06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c0a:	dc 01       	movw	r26, r24
    2c0c:	cb 01       	movw	r24, r22
    2c0e:	9c 8b       	std	Y+20, r25	; 0x14
    2c10:	8b 8b       	std	Y+19, r24	; 0x13
    2c12:	8b 89       	ldd	r24, Y+19	; 0x13
    2c14:	9c 89       	ldd	r25, Y+20	; 0x14
    2c16:	98 8b       	std	Y+16, r25	; 0x10
    2c18:	8f 87       	std	Y+15, r24	; 0x0f
    2c1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c1c:	98 89       	ldd	r25, Y+16	; 0x10
    2c1e:	01 97       	sbiw	r24, 0x01	; 1
    2c20:	f1 f7       	brne	.-4      	; 0x2c1e <LCD_vidGlitchString+0x56c>
    2c22:	98 8b       	std	Y+16, r25	; 0x10
    2c24:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(50);
	LCD_vidClearDisplay();
    2c26:	0e 94 79 12 	call	0x24f2	; 0x24f2 <LCD_vidClearDisplay>
	LCD_vidCenterString(copy_pcString, 0);
    2c2a:	fe 01       	movw	r30, r28
    2c2c:	eb 5a       	subi	r30, 0xAB	; 171
    2c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c30:	80 81       	ld	r24, Z
    2c32:	91 81       	ldd	r25, Z+1	; 0x01
    2c34:	60 e0       	ldi	r22, 0x00	; 0
    2c36:	0e 94 49 10 	call	0x2092	; 0x2092 <LCD_vidCenterString>
	LCD_vidShiftLeft();
    2c3a:	0e 94 97 12 	call	0x252e	; 0x252e <LCD_vidShiftLeft>
    2c3e:	80 e0       	ldi	r24, 0x00	; 0
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    2c42:	a8 e4       	ldi	r26, 0x48	; 72
    2c44:	b2 e4       	ldi	r27, 0x42	; 66
    2c46:	8b 87       	std	Y+11, r24	; 0x0b
    2c48:	9c 87       	std	Y+12, r25	; 0x0c
    2c4a:	ad 87       	std	Y+13, r26	; 0x0d
    2c4c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c50:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c52:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c54:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c56:	20 e0       	ldi	r18, 0x00	; 0
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	4a ef       	ldi	r20, 0xFA	; 250
    2c5c:	54 e4       	ldi	r21, 0x44	; 68
    2c5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c62:	dc 01       	movw	r26, r24
    2c64:	cb 01       	movw	r24, r22
    2c66:	8f 83       	std	Y+7, r24	; 0x07
    2c68:	98 87       	std	Y+8, r25	; 0x08
    2c6a:	a9 87       	std	Y+9, r26	; 0x09
    2c6c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c6e:	6f 81       	ldd	r22, Y+7	; 0x07
    2c70:	78 85       	ldd	r23, Y+8	; 0x08
    2c72:	89 85       	ldd	r24, Y+9	; 0x09
    2c74:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c76:	20 e0       	ldi	r18, 0x00	; 0
    2c78:	30 e0       	ldi	r19, 0x00	; 0
    2c7a:	40 e8       	ldi	r20, 0x80	; 128
    2c7c:	5f e3       	ldi	r21, 0x3F	; 63
    2c7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c82:	88 23       	and	r24, r24
    2c84:	2c f4       	brge	.+10     	; 0x2c90 <LCD_vidGlitchString+0x5de>
		__ticks = 1;
    2c86:	81 e0       	ldi	r24, 0x01	; 1
    2c88:	90 e0       	ldi	r25, 0x00	; 0
    2c8a:	9e 83       	std	Y+6, r25	; 0x06
    2c8c:	8d 83       	std	Y+5, r24	; 0x05
    2c8e:	3f c0       	rjmp	.+126    	; 0x2d0e <LCD_vidGlitchString+0x65c>
	else if (__tmp > 65535)
    2c90:	6f 81       	ldd	r22, Y+7	; 0x07
    2c92:	78 85       	ldd	r23, Y+8	; 0x08
    2c94:	89 85       	ldd	r24, Y+9	; 0x09
    2c96:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c98:	20 e0       	ldi	r18, 0x00	; 0
    2c9a:	3f ef       	ldi	r19, 0xFF	; 255
    2c9c:	4f e7       	ldi	r20, 0x7F	; 127
    2c9e:	57 e4       	ldi	r21, 0x47	; 71
    2ca0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ca4:	18 16       	cp	r1, r24
    2ca6:	4c f5       	brge	.+82     	; 0x2cfa <LCD_vidGlitchString+0x648>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ca8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2caa:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cac:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cae:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cb0:	20 e0       	ldi	r18, 0x00	; 0
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	40 e2       	ldi	r20, 0x20	; 32
    2cb6:	51 e4       	ldi	r21, 0x41	; 65
    2cb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cbc:	dc 01       	movw	r26, r24
    2cbe:	cb 01       	movw	r24, r22
    2cc0:	bc 01       	movw	r22, r24
    2cc2:	cd 01       	movw	r24, r26
    2cc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc8:	dc 01       	movw	r26, r24
    2cca:	cb 01       	movw	r24, r22
    2ccc:	9e 83       	std	Y+6, r25	; 0x06
    2cce:	8d 83       	std	Y+5, r24	; 0x05
    2cd0:	0f c0       	rjmp	.+30     	; 0x2cf0 <LCD_vidGlitchString+0x63e>
    2cd2:	88 ec       	ldi	r24, 0xC8	; 200
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
    2cd6:	9c 83       	std	Y+4, r25	; 0x04
    2cd8:	8b 83       	std	Y+3, r24	; 0x03
    2cda:	8b 81       	ldd	r24, Y+3	; 0x03
    2cdc:	9c 81       	ldd	r25, Y+4	; 0x04
    2cde:	01 97       	sbiw	r24, 0x01	; 1
    2ce0:	f1 f7       	brne	.-4      	; 0x2cde <LCD_vidGlitchString+0x62c>
    2ce2:	9c 83       	std	Y+4, r25	; 0x04
    2ce4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ce6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cea:	01 97       	sbiw	r24, 0x01	; 1
    2cec:	9e 83       	std	Y+6, r25	; 0x06
    2cee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cf0:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf2:	9e 81       	ldd	r25, Y+6	; 0x06
    2cf4:	00 97       	sbiw	r24, 0x00	; 0
    2cf6:	69 f7       	brne	.-38     	; 0x2cd2 <LCD_vidGlitchString+0x620>
    2cf8:	14 c0       	rjmp	.+40     	; 0x2d22 <LCD_vidGlitchString+0x670>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cfa:	6f 81       	ldd	r22, Y+7	; 0x07
    2cfc:	78 85       	ldd	r23, Y+8	; 0x08
    2cfe:	89 85       	ldd	r24, Y+9	; 0x09
    2d00:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d06:	dc 01       	movw	r26, r24
    2d08:	cb 01       	movw	r24, r22
    2d0a:	9e 83       	std	Y+6, r25	; 0x06
    2d0c:	8d 83       	std	Y+5, r24	; 0x05
    2d0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d10:	9e 81       	ldd	r25, Y+6	; 0x06
    2d12:	9a 83       	std	Y+2, r25	; 0x02
    2d14:	89 83       	std	Y+1, r24	; 0x01
    2d16:	89 81       	ldd	r24, Y+1	; 0x01
    2d18:	9a 81       	ldd	r25, Y+2	; 0x02
    2d1a:	01 97       	sbiw	r24, 0x01	; 1
    2d1c:	f1 f7       	brne	.-4      	; 0x2d1a <LCD_vidGlitchString+0x668>
    2d1e:	9a 83       	std	Y+2, r25	; 0x02
    2d20:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
	LCD_vidShiftRight();
    2d22:	0e 94 8d 12 	call	0x251a	; 0x251a <LCD_vidShiftRight>

}
    2d26:	ca 5a       	subi	r28, 0xAA	; 170
    2d28:	df 4f       	sbci	r29, 0xFF	; 255
    2d2a:	0f b6       	in	r0, 0x3f	; 63
    2d2c:	f8 94       	cli
    2d2e:	de bf       	out	0x3e, r29	; 62
    2d30:	0f be       	out	0x3f, r0	; 63
    2d32:	cd bf       	out	0x3d, r28	; 61
    2d34:	cf 91       	pop	r28
    2d36:	df 91       	pop	r29
    2d38:	1f 91       	pop	r17
    2d3a:	0f 91       	pop	r16
    2d3c:	08 95       	ret

00002d3e <KeyPad_vidInit>:
 	 	 	 	 	 	 	 	 	 	 	 	 	 	 {1,	 2, 	3, 	'*'},
 	 	 	 	 	 	 	 	 	 	 	 	 	 	 {'c',	 0,	'=', '/'}};


void KeyPad_vidInit(void)
{
    2d3e:	df 93       	push	r29
    2d40:	cf 93       	push	r28
    2d42:	cd b7       	in	r28, 0x3d	; 61
    2d44:	de b7       	in	r29, 0x3e	; 62
	DIO_u8setPinDir(KEYPAD_PORT, KEYPAD_ROW_1, INPUT);
    2d46:	83 e0       	ldi	r24, 0x03	; 3
    2d48:	60 e0       	ldi	r22, 0x00	; 0
    2d4a:	40 e0       	ldi	r20, 0x00	; 0
    2d4c:	0e 94 ab 07 	call	0xf56	; 0xf56 <DIO_u8setPinDir>
	DIO_u8setPinDir(KEYPAD_PORT, KEYPAD_ROW_2, INPUT);
    2d50:	83 e0       	ldi	r24, 0x03	; 3
    2d52:	61 e0       	ldi	r22, 0x01	; 1
    2d54:	40 e0       	ldi	r20, 0x00	; 0
    2d56:	0e 94 ab 07 	call	0xf56	; 0xf56 <DIO_u8setPinDir>
	DIO_u8setPinDir(KEYPAD_PORT, KEYPAD_ROW_3, INPUT);
    2d5a:	83 e0       	ldi	r24, 0x03	; 3
    2d5c:	62 e0       	ldi	r22, 0x02	; 2
    2d5e:	40 e0       	ldi	r20, 0x00	; 0
    2d60:	0e 94 ab 07 	call	0xf56	; 0xf56 <DIO_u8setPinDir>
	DIO_u8setPinDir(KEYPAD_PORT, KEYPAD_ROW_4, INPUT);
    2d64:	83 e0       	ldi	r24, 0x03	; 3
    2d66:	63 e0       	ldi	r22, 0x03	; 3
    2d68:	40 e0       	ldi	r20, 0x00	; 0
    2d6a:	0e 94 ab 07 	call	0xf56	; 0xf56 <DIO_u8setPinDir>

	DIO_u8setPinDir(KEYPAD_PORT, KEYPAD_COLUMN_1, OUTPUT);
    2d6e:	83 e0       	ldi	r24, 0x03	; 3
    2d70:	64 e0       	ldi	r22, 0x04	; 4
    2d72:	41 e0       	ldi	r20, 0x01	; 1
    2d74:	0e 94 ab 07 	call	0xf56	; 0xf56 <DIO_u8setPinDir>
	DIO_u8setPinDir(KEYPAD_PORT, KEYPAD_COLUMN_2, OUTPUT);
    2d78:	83 e0       	ldi	r24, 0x03	; 3
    2d7a:	65 e0       	ldi	r22, 0x05	; 5
    2d7c:	41 e0       	ldi	r20, 0x01	; 1
    2d7e:	0e 94 ab 07 	call	0xf56	; 0xf56 <DIO_u8setPinDir>
	DIO_u8setPinDir(KEYPAD_PORT, KEYPAD_COLUMN_3, OUTPUT);
    2d82:	83 e0       	ldi	r24, 0x03	; 3
    2d84:	66 e0       	ldi	r22, 0x06	; 6
    2d86:	41 e0       	ldi	r20, 0x01	; 1
    2d88:	0e 94 ab 07 	call	0xf56	; 0xf56 <DIO_u8setPinDir>
	DIO_u8setPinDir(KEYPAD_PORT, KEYPAD_COLUMN_4, OUTPUT);
    2d8c:	83 e0       	ldi	r24, 0x03	; 3
    2d8e:	67 e0       	ldi	r22, 0x07	; 7
    2d90:	41 e0       	ldi	r20, 0x01	; 1
    2d92:	0e 94 ab 07 	call	0xf56	; 0xf56 <DIO_u8setPinDir>

	//Enable PULLUP resistors
	DIO_u8setPinVal(KEYPAD_PORT, KEYPAD_ROW_1, HIGH);
    2d96:	83 e0       	ldi	r24, 0x03	; 3
    2d98:	60 e0       	ldi	r22, 0x00	; 0
    2d9a:	41 e0       	ldi	r20, 0x01	; 1
    2d9c:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_u8setPinVal>
	DIO_u8setPinVal(KEYPAD_PORT, KEYPAD_ROW_2, HIGH);
    2da0:	83 e0       	ldi	r24, 0x03	; 3
    2da2:	61 e0       	ldi	r22, 0x01	; 1
    2da4:	41 e0       	ldi	r20, 0x01	; 1
    2da6:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_u8setPinVal>
	DIO_u8setPinVal(KEYPAD_PORT, KEYPAD_ROW_3, HIGH);
    2daa:	83 e0       	ldi	r24, 0x03	; 3
    2dac:	62 e0       	ldi	r22, 0x02	; 2
    2dae:	41 e0       	ldi	r20, 0x01	; 1
    2db0:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_u8setPinVal>
	DIO_u8setPinVal(KEYPAD_PORT, KEYPAD_ROW_4, HIGH);
    2db4:	83 e0       	ldi	r24, 0x03	; 3
    2db6:	63 e0       	ldi	r22, 0x03	; 3
    2db8:	41 e0       	ldi	r20, 0x01	; 1
    2dba:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_u8setPinVal>

	DIO_u8setPinVal(KEYPAD_PORT, KEYPAD_COLUMN_1, HIGH);
    2dbe:	83 e0       	ldi	r24, 0x03	; 3
    2dc0:	64 e0       	ldi	r22, 0x04	; 4
    2dc2:	41 e0       	ldi	r20, 0x01	; 1
    2dc4:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_u8setPinVal>
	DIO_u8setPinVal(KEYPAD_PORT, KEYPAD_COLUMN_2, HIGH);
    2dc8:	83 e0       	ldi	r24, 0x03	; 3
    2dca:	65 e0       	ldi	r22, 0x05	; 5
    2dcc:	41 e0       	ldi	r20, 0x01	; 1
    2dce:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_u8setPinVal>
	DIO_u8setPinVal(KEYPAD_PORT, KEYPAD_COLUMN_3, HIGH);
    2dd2:	83 e0       	ldi	r24, 0x03	; 3
    2dd4:	66 e0       	ldi	r22, 0x06	; 6
    2dd6:	41 e0       	ldi	r20, 0x01	; 1
    2dd8:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_u8setPinVal>
	DIO_u8setPinVal(KEYPAD_PORT, KEYPAD_COLUMN_4, HIGH);
    2ddc:	83 e0       	ldi	r24, 0x03	; 3
    2dde:	67 e0       	ldi	r22, 0x07	; 7
    2de0:	41 e0       	ldi	r20, 0x01	; 1
    2de2:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_u8setPinVal>
}
    2de6:	cf 91       	pop	r28
    2de8:	df 91       	pop	r29
    2dea:	08 95       	ret

00002dec <KeyPad_u8Pressed>:

u8 KeyPad_u8Pressed(void)
{
    2dec:	df 93       	push	r29
    2dee:	cf 93       	push	r28
    2df0:	cd b7       	in	r28, 0x3d	; 61
    2df2:	de b7       	in	r29, 0x3e	; 62
    2df4:	a0 97       	sbiw	r28, 0x20	; 32
    2df6:	0f b6       	in	r0, 0x3f	; 63
    2df8:	f8 94       	cli
    2dfa:	de bf       	out	0x3e, r29	; 62
    2dfc:	0f be       	out	0x3f, r0	; 63
    2dfe:	cd bf       	out	0x3d, r28	; 61
	u8 local_u8keyPressed = NO_KEY_PRESSED;
    2e00:	8f ef       	ldi	r24, 0xFF	; 255
    2e02:	8f 8f       	std	Y+31, r24	; 0x1f
	u8 local_u8currentColumn;
	u8 local_u8currentRow;
	u8 local_u8currentRowStatus;

	for(local_u8currentColumn = KEYPAD_COLUMN_START; local_u8currentColumn <= KEYPAD_COLUMN_END; local_u8currentColumn++)
    2e04:	84 e0       	ldi	r24, 0x04	; 4
    2e06:	8e 8f       	std	Y+30, r24	; 0x1e
    2e08:	27 c1       	rjmp	.+590    	; 0x3058 <KeyPad_u8Pressed+0x26c>
	{
		DIO_u8setPinVal(KEYPAD_PORT, local_u8currentColumn, LOW);
    2e0a:	83 e0       	ldi	r24, 0x03	; 3
    2e0c:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2e0e:	40 e0       	ldi	r20, 0x00	; 0
    2e10:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_u8setPinVal>

		for(local_u8currentRow = KEYPAD_ROW_START; local_u8currentRow <= KEYPAD_ROW_END; local_u8currentRow++)
    2e14:	1d 8e       	std	Y+29, r1	; 0x1d
    2e16:	14 c1       	rjmp	.+552    	; 0x3040 <KeyPad_u8Pressed+0x254>
		{
			DIO_u8getPinVal(KEYPAD_PORT, local_u8currentRow, &local_u8currentRowStatus);
    2e18:	9e 01       	movw	r18, r28
    2e1a:	20 5e       	subi	r18, 0xE0	; 224
    2e1c:	3f 4f       	sbci	r19, 0xFF	; 255
    2e1e:	83 e0       	ldi	r24, 0x03	; 3
    2e20:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2e22:	a9 01       	movw	r20, r18
    2e24:	0e 94 cf 09 	call	0x139e	; 0x139e <DIO_u8getPinVal>

			if(local_u8currentRowStatus == LOW)
    2e28:	88 a1       	ldd	r24, Y+32	; 0x20
    2e2a:	88 23       	and	r24, r24
    2e2c:	09 f0       	breq	.+2      	; 0x2e30 <KeyPad_u8Pressed+0x44>
    2e2e:	05 c1       	rjmp	.+522    	; 0x303a <KeyPad_u8Pressed+0x24e>
			{
				//local_u8keyPressed = (((local_u8currentRow - KEYPAD_ROW_START) * KEYPAD_COLUMNS) + (local_u8currentColumn - KEYPAD_COLUMN_START));

				local_u8keyPressed = KEYPAD_u8KeyPadMap[local_u8currentRow-KEYPAD_ROW_START][local_u8currentColumn-KEYPAD_COLUMN_START];
    2e30:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e32:	48 2f       	mov	r20, r24
    2e34:	50 e0       	ldi	r21, 0x00	; 0
    2e36:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2e38:	88 2f       	mov	r24, r24
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	9c 01       	movw	r18, r24
    2e3e:	24 50       	subi	r18, 0x04	; 4
    2e40:	30 40       	sbci	r19, 0x00	; 0
    2e42:	ca 01       	movw	r24, r20
    2e44:	88 0f       	add	r24, r24
    2e46:	99 1f       	adc	r25, r25
    2e48:	88 0f       	add	r24, r24
    2e4a:	99 1f       	adc	r25, r25
    2e4c:	82 0f       	add	r24, r18
    2e4e:	93 1f       	adc	r25, r19
    2e50:	fc 01       	movw	r30, r24
    2e52:	e1 51       	subi	r30, 0x11	; 17
    2e54:	fe 4f       	sbci	r31, 0xFE	; 254
    2e56:	80 81       	ld	r24, Z
    2e58:	8f 8f       	std	Y+31, r24	; 0x1f
    2e5a:	80 e0       	ldi	r24, 0x00	; 0
    2e5c:	90 e0       	ldi	r25, 0x00	; 0
    2e5e:	a0 ea       	ldi	r26, 0xA0	; 160
    2e60:	b0 e4       	ldi	r27, 0x40	; 64
    2e62:	89 8f       	std	Y+25, r24	; 0x19
    2e64:	9a 8f       	std	Y+26, r25	; 0x1a
    2e66:	ab 8f       	std	Y+27, r26	; 0x1b
    2e68:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e6a:	69 8d       	ldd	r22, Y+25	; 0x19
    2e6c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e70:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e72:	20 e0       	ldi	r18, 0x00	; 0
    2e74:	30 e0       	ldi	r19, 0x00	; 0
    2e76:	4a ef       	ldi	r20, 0xFA	; 250
    2e78:	54 e4       	ldi	r21, 0x44	; 68
    2e7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e7e:	dc 01       	movw	r26, r24
    2e80:	cb 01       	movw	r24, r22
    2e82:	8d 8b       	std	Y+21, r24	; 0x15
    2e84:	9e 8b       	std	Y+22, r25	; 0x16
    2e86:	af 8b       	std	Y+23, r26	; 0x17
    2e88:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e8a:	6d 89       	ldd	r22, Y+21	; 0x15
    2e8c:	7e 89       	ldd	r23, Y+22	; 0x16
    2e8e:	8f 89       	ldd	r24, Y+23	; 0x17
    2e90:	98 8d       	ldd	r25, Y+24	; 0x18
    2e92:	20 e0       	ldi	r18, 0x00	; 0
    2e94:	30 e0       	ldi	r19, 0x00	; 0
    2e96:	40 e8       	ldi	r20, 0x80	; 128
    2e98:	5f e3       	ldi	r21, 0x3F	; 63
    2e9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e9e:	88 23       	and	r24, r24
    2ea0:	2c f4       	brge	.+10     	; 0x2eac <KeyPad_u8Pressed+0xc0>
		__ticks = 1;
    2ea2:	81 e0       	ldi	r24, 0x01	; 1
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	9c 8b       	std	Y+20, r25	; 0x14
    2ea8:	8b 8b       	std	Y+19, r24	; 0x13
    2eaa:	3f c0       	rjmp	.+126    	; 0x2f2a <KeyPad_u8Pressed+0x13e>
	else if (__tmp > 65535)
    2eac:	6d 89       	ldd	r22, Y+21	; 0x15
    2eae:	7e 89       	ldd	r23, Y+22	; 0x16
    2eb0:	8f 89       	ldd	r24, Y+23	; 0x17
    2eb2:	98 8d       	ldd	r25, Y+24	; 0x18
    2eb4:	20 e0       	ldi	r18, 0x00	; 0
    2eb6:	3f ef       	ldi	r19, 0xFF	; 255
    2eb8:	4f e7       	ldi	r20, 0x7F	; 127
    2eba:	57 e4       	ldi	r21, 0x47	; 71
    2ebc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ec0:	18 16       	cp	r1, r24
    2ec2:	4c f5       	brge	.+82     	; 0x2f16 <KeyPad_u8Pressed+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ec4:	69 8d       	ldd	r22, Y+25	; 0x19
    2ec6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ec8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2eca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ecc:	20 e0       	ldi	r18, 0x00	; 0
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	40 e2       	ldi	r20, 0x20	; 32
    2ed2:	51 e4       	ldi	r21, 0x41	; 65
    2ed4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ed8:	dc 01       	movw	r26, r24
    2eda:	cb 01       	movw	r24, r22
    2edc:	bc 01       	movw	r22, r24
    2ede:	cd 01       	movw	r24, r26
    2ee0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ee4:	dc 01       	movw	r26, r24
    2ee6:	cb 01       	movw	r24, r22
    2ee8:	9c 8b       	std	Y+20, r25	; 0x14
    2eea:	8b 8b       	std	Y+19, r24	; 0x13
    2eec:	0f c0       	rjmp	.+30     	; 0x2f0c <KeyPad_u8Pressed+0x120>
    2eee:	88 ec       	ldi	r24, 0xC8	; 200
    2ef0:	90 e0       	ldi	r25, 0x00	; 0
    2ef2:	9a 8b       	std	Y+18, r25	; 0x12
    2ef4:	89 8b       	std	Y+17, r24	; 0x11
    2ef6:	89 89       	ldd	r24, Y+17	; 0x11
    2ef8:	9a 89       	ldd	r25, Y+18	; 0x12
    2efa:	01 97       	sbiw	r24, 0x01	; 1
    2efc:	f1 f7       	brne	.-4      	; 0x2efa <KeyPad_u8Pressed+0x10e>
    2efe:	9a 8b       	std	Y+18, r25	; 0x12
    2f00:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f02:	8b 89       	ldd	r24, Y+19	; 0x13
    2f04:	9c 89       	ldd	r25, Y+20	; 0x14
    2f06:	01 97       	sbiw	r24, 0x01	; 1
    2f08:	9c 8b       	std	Y+20, r25	; 0x14
    2f0a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f0c:	8b 89       	ldd	r24, Y+19	; 0x13
    2f0e:	9c 89       	ldd	r25, Y+20	; 0x14
    2f10:	00 97       	sbiw	r24, 0x00	; 0
    2f12:	69 f7       	brne	.-38     	; 0x2eee <KeyPad_u8Pressed+0x102>
    2f14:	1d c0       	rjmp	.+58     	; 0x2f50 <KeyPad_u8Pressed+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f16:	6d 89       	ldd	r22, Y+21	; 0x15
    2f18:	7e 89       	ldd	r23, Y+22	; 0x16
    2f1a:	8f 89       	ldd	r24, Y+23	; 0x17
    2f1c:	98 8d       	ldd	r25, Y+24	; 0x18
    2f1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f22:	dc 01       	movw	r26, r24
    2f24:	cb 01       	movw	r24, r22
    2f26:	9c 8b       	std	Y+20, r25	; 0x14
    2f28:	8b 8b       	std	Y+19, r24	; 0x13
    2f2a:	8b 89       	ldd	r24, Y+19	; 0x13
    2f2c:	9c 89       	ldd	r25, Y+20	; 0x14
    2f2e:	98 8b       	std	Y+16, r25	; 0x10
    2f30:	8f 87       	std	Y+15, r24	; 0x0f
    2f32:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f34:	98 89       	ldd	r25, Y+16	; 0x10
    2f36:	01 97       	sbiw	r24, 0x01	; 1
    2f38:	f1 f7       	brne	.-4      	; 0x2f36 <KeyPad_u8Pressed+0x14a>
    2f3a:	98 8b       	std	Y+16, r25	; 0x10
    2f3c:	8f 87       	std	Y+15, r24	; 0x0f
    2f3e:	08 c0       	rjmp	.+16     	; 0x2f50 <KeyPad_u8Pressed+0x164>

				_delay_ms(5);
				while(local_u8currentRowStatus == LOW)
				{
					DIO_u8getPinVal(KEYPAD_PORT, local_u8currentRow, &local_u8currentRowStatus);
    2f40:	9e 01       	movw	r18, r28
    2f42:	20 5e       	subi	r18, 0xE0	; 224
    2f44:	3f 4f       	sbci	r19, 0xFF	; 255
    2f46:	83 e0       	ldi	r24, 0x03	; 3
    2f48:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2f4a:	a9 01       	movw	r20, r18
    2f4c:	0e 94 cf 09 	call	0x139e	; 0x139e <DIO_u8getPinVal>
				//local_u8keyPressed = (((local_u8currentRow - KEYPAD_ROW_START) * KEYPAD_COLUMNS) + (local_u8currentColumn - KEYPAD_COLUMN_START));

				local_u8keyPressed = KEYPAD_u8KeyPadMap[local_u8currentRow-KEYPAD_ROW_START][local_u8currentColumn-KEYPAD_COLUMN_START];

				_delay_ms(5);
				while(local_u8currentRowStatus == LOW)
    2f50:	88 a1       	ldd	r24, Y+32	; 0x20
    2f52:	88 23       	and	r24, r24
    2f54:	a9 f3       	breq	.-22     	; 0x2f40 <KeyPad_u8Pressed+0x154>
    2f56:	80 e0       	ldi	r24, 0x00	; 0
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	a0 ea       	ldi	r26, 0xA0	; 160
    2f5c:	b0 e4       	ldi	r27, 0x40	; 64
    2f5e:	8b 87       	std	Y+11, r24	; 0x0b
    2f60:	9c 87       	std	Y+12, r25	; 0x0c
    2f62:	ad 87       	std	Y+13, r26	; 0x0d
    2f64:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f66:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f68:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f6e:	20 e0       	ldi	r18, 0x00	; 0
    2f70:	30 e0       	ldi	r19, 0x00	; 0
    2f72:	4a ef       	ldi	r20, 0xFA	; 250
    2f74:	54 e4       	ldi	r21, 0x44	; 68
    2f76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f7a:	dc 01       	movw	r26, r24
    2f7c:	cb 01       	movw	r24, r22
    2f7e:	8f 83       	std	Y+7, r24	; 0x07
    2f80:	98 87       	std	Y+8, r25	; 0x08
    2f82:	a9 87       	std	Y+9, r26	; 0x09
    2f84:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f86:	6f 81       	ldd	r22, Y+7	; 0x07
    2f88:	78 85       	ldd	r23, Y+8	; 0x08
    2f8a:	89 85       	ldd	r24, Y+9	; 0x09
    2f8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f8e:	20 e0       	ldi	r18, 0x00	; 0
    2f90:	30 e0       	ldi	r19, 0x00	; 0
    2f92:	40 e8       	ldi	r20, 0x80	; 128
    2f94:	5f e3       	ldi	r21, 0x3F	; 63
    2f96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f9a:	88 23       	and	r24, r24
    2f9c:	2c f4       	brge	.+10     	; 0x2fa8 <KeyPad_u8Pressed+0x1bc>
		__ticks = 1;
    2f9e:	81 e0       	ldi	r24, 0x01	; 1
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	9e 83       	std	Y+6, r25	; 0x06
    2fa4:	8d 83       	std	Y+5, r24	; 0x05
    2fa6:	3f c0       	rjmp	.+126    	; 0x3026 <KeyPad_u8Pressed+0x23a>
	else if (__tmp > 65535)
    2fa8:	6f 81       	ldd	r22, Y+7	; 0x07
    2faa:	78 85       	ldd	r23, Y+8	; 0x08
    2fac:	89 85       	ldd	r24, Y+9	; 0x09
    2fae:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fb0:	20 e0       	ldi	r18, 0x00	; 0
    2fb2:	3f ef       	ldi	r19, 0xFF	; 255
    2fb4:	4f e7       	ldi	r20, 0x7F	; 127
    2fb6:	57 e4       	ldi	r21, 0x47	; 71
    2fb8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fbc:	18 16       	cp	r1, r24
    2fbe:	4c f5       	brge	.+82     	; 0x3012 <KeyPad_u8Pressed+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fc0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fc2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fc8:	20 e0       	ldi	r18, 0x00	; 0
    2fca:	30 e0       	ldi	r19, 0x00	; 0
    2fcc:	40 e2       	ldi	r20, 0x20	; 32
    2fce:	51 e4       	ldi	r21, 0x41	; 65
    2fd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd4:	dc 01       	movw	r26, r24
    2fd6:	cb 01       	movw	r24, r22
    2fd8:	bc 01       	movw	r22, r24
    2fda:	cd 01       	movw	r24, r26
    2fdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fe0:	dc 01       	movw	r26, r24
    2fe2:	cb 01       	movw	r24, r22
    2fe4:	9e 83       	std	Y+6, r25	; 0x06
    2fe6:	8d 83       	std	Y+5, r24	; 0x05
    2fe8:	0f c0       	rjmp	.+30     	; 0x3008 <KeyPad_u8Pressed+0x21c>
    2fea:	88 ec       	ldi	r24, 0xC8	; 200
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	9c 83       	std	Y+4, r25	; 0x04
    2ff0:	8b 83       	std	Y+3, r24	; 0x03
    2ff2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ff6:	01 97       	sbiw	r24, 0x01	; 1
    2ff8:	f1 f7       	brne	.-4      	; 0x2ff6 <KeyPad_u8Pressed+0x20a>
    2ffa:	9c 83       	std	Y+4, r25	; 0x04
    2ffc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    3000:	9e 81       	ldd	r25, Y+6	; 0x06
    3002:	01 97       	sbiw	r24, 0x01	; 1
    3004:	9e 83       	std	Y+6, r25	; 0x06
    3006:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3008:	8d 81       	ldd	r24, Y+5	; 0x05
    300a:	9e 81       	ldd	r25, Y+6	; 0x06
    300c:	00 97       	sbiw	r24, 0x00	; 0
    300e:	69 f7       	brne	.-38     	; 0x2fea <KeyPad_u8Pressed+0x1fe>
    3010:	14 c0       	rjmp	.+40     	; 0x303a <KeyPad_u8Pressed+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3012:	6f 81       	ldd	r22, Y+7	; 0x07
    3014:	78 85       	ldd	r23, Y+8	; 0x08
    3016:	89 85       	ldd	r24, Y+9	; 0x09
    3018:	9a 85       	ldd	r25, Y+10	; 0x0a
    301a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    301e:	dc 01       	movw	r26, r24
    3020:	cb 01       	movw	r24, r22
    3022:	9e 83       	std	Y+6, r25	; 0x06
    3024:	8d 83       	std	Y+5, r24	; 0x05
    3026:	8d 81       	ldd	r24, Y+5	; 0x05
    3028:	9e 81       	ldd	r25, Y+6	; 0x06
    302a:	9a 83       	std	Y+2, r25	; 0x02
    302c:	89 83       	std	Y+1, r24	; 0x01
    302e:	89 81       	ldd	r24, Y+1	; 0x01
    3030:	9a 81       	ldd	r25, Y+2	; 0x02
    3032:	01 97       	sbiw	r24, 0x01	; 1
    3034:	f1 f7       	brne	.-4      	; 0x3032 <KeyPad_u8Pressed+0x246>
    3036:	9a 83       	std	Y+2, r25	; 0x02
    3038:	89 83       	std	Y+1, r24	; 0x01

	for(local_u8currentColumn = KEYPAD_COLUMN_START; local_u8currentColumn <= KEYPAD_COLUMN_END; local_u8currentColumn++)
	{
		DIO_u8setPinVal(KEYPAD_PORT, local_u8currentColumn, LOW);

		for(local_u8currentRow = KEYPAD_ROW_START; local_u8currentRow <= KEYPAD_ROW_END; local_u8currentRow++)
    303a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    303c:	8f 5f       	subi	r24, 0xFF	; 255
    303e:	8d 8f       	std	Y+29, r24	; 0x1d
    3040:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3042:	84 30       	cpi	r24, 0x04	; 4
    3044:	08 f4       	brcc	.+2      	; 0x3048 <KeyPad_u8Pressed+0x25c>
    3046:	e8 ce       	rjmp	.-560    	; 0x2e18 <KeyPad_u8Pressed+0x2c>
				}
				_delay_ms(5);
			}
		}

		DIO_u8setPinVal(KEYPAD_PORT, local_u8currentColumn, HIGH);
    3048:	83 e0       	ldi	r24, 0x03	; 3
    304a:	6e 8d       	ldd	r22, Y+30	; 0x1e
    304c:	41 e0       	ldi	r20, 0x01	; 1
    304e:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_u8setPinVal>
	u8 local_u8keyPressed = NO_KEY_PRESSED;
	u8 local_u8currentColumn;
	u8 local_u8currentRow;
	u8 local_u8currentRowStatus;

	for(local_u8currentColumn = KEYPAD_COLUMN_START; local_u8currentColumn <= KEYPAD_COLUMN_END; local_u8currentColumn++)
    3052:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3054:	8f 5f       	subi	r24, 0xFF	; 255
    3056:	8e 8f       	std	Y+30, r24	; 0x1e
    3058:	8e 8d       	ldd	r24, Y+30	; 0x1e
    305a:	88 30       	cpi	r24, 0x08	; 8
    305c:	08 f4       	brcc	.+2      	; 0x3060 <KeyPad_u8Pressed+0x274>
    305e:	d5 ce       	rjmp	.-598    	; 0x2e0a <KeyPad_u8Pressed+0x1e>

		DIO_u8setPinVal(KEYPAD_PORT, local_u8currentColumn, HIGH);
	}


	return local_u8keyPressed;
    3060:	8f 8d       	ldd	r24, Y+31	; 0x1f
}
    3062:	a0 96       	adiw	r28, 0x20	; 32
    3064:	0f b6       	in	r0, 0x3f	; 63
    3066:	f8 94       	cli
    3068:	de bf       	out	0x3e, r29	; 62
    306a:	0f be       	out	0x3f, r0	; 63
    306c:	cd bf       	out	0x3d, r28	; 61
    306e:	cf 91       	pop	r28
    3070:	df 91       	pop	r29
    3072:	08 95       	ret

00003074 <DCMotor_vidInit>:
#include "DCMotor_config.h"
#include "../../Libs/stdtypes.h"
#include <util/delay.h>

void DCMotor_vidInit()
{
    3074:	df 93       	push	r29
    3076:	cf 93       	push	r28
    3078:	cd b7       	in	r28, 0x3d	; 61
    307a:	de b7       	in	r29, 0x3e	; 62
	DIO_u8setPinDir(DCMOTOR_PORT, DCMOTOR_TURN_LEFT_PIN, OUTPUT);
    307c:	81 e0       	ldi	r24, 0x01	; 1
    307e:	61 e0       	ldi	r22, 0x01	; 1
    3080:	41 e0       	ldi	r20, 0x01	; 1
    3082:	0e 94 ab 07 	call	0xf56	; 0xf56 <DIO_u8setPinDir>
	DIO_u8setPinDir(DCMOTOR_PORT, DCMOTOR_TURN_RIGHT_PIN, OUTPUT);
    3086:	81 e0       	ldi	r24, 0x01	; 1
    3088:	60 e0       	ldi	r22, 0x00	; 0
    308a:	41 e0       	ldi	r20, 0x01	; 1
    308c:	0e 94 ab 07 	call	0xf56	; 0xf56 <DIO_u8setPinDir>
	DIO_u8setPinVal(DCMOTOR_PORT, DCMOTOR_TURN_LEFT_PIN, LOW);
    3090:	81 e0       	ldi	r24, 0x01	; 1
    3092:	61 e0       	ldi	r22, 0x01	; 1
    3094:	40 e0       	ldi	r20, 0x00	; 0
    3096:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_u8setPinVal>
	DIO_u8setPinVal(DCMOTOR_PORT, DCMOTOR_TURN_RIGHT_PIN, LOW);
    309a:	81 e0       	ldi	r24, 0x01	; 1
    309c:	60 e0       	ldi	r22, 0x00	; 0
    309e:	40 e0       	ldi	r20, 0x00	; 0
    30a0:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_u8setPinVal>
}
    30a4:	cf 91       	pop	r28
    30a6:	df 91       	pop	r29
    30a8:	08 95       	ret

000030aa <DCMotor_vidTurnRight>:


void DCMotor_vidTurnRight(u8 copy_u8Period)
{
    30aa:	df 93       	push	r29
    30ac:	cf 93       	push	r28
    30ae:	cd b7       	in	r28, 0x3d	; 61
    30b0:	de b7       	in	r29, 0x3e	; 62
    30b2:	2f 97       	sbiw	r28, 0x0f	; 15
    30b4:	0f b6       	in	r0, 0x3f	; 63
    30b6:	f8 94       	cli
    30b8:	de bf       	out	0x3e, r29	; 62
    30ba:	0f be       	out	0x3f, r0	; 63
    30bc:	cd bf       	out	0x3d, r28	; 61
    30be:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8setPinVal(DCMOTOR_PORT, DCMOTOR_TURN_LEFT_PIN, LOW);
    30c0:	81 e0       	ldi	r24, 0x01	; 1
    30c2:	61 e0       	ldi	r22, 0x01	; 1
    30c4:	40 e0       	ldi	r20, 0x00	; 0
    30c6:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_u8setPinVal>
	DIO_u8setPinVal(DCMOTOR_PORT, DCMOTOR_TURN_RIGHT_PIN, HIGH);
    30ca:	81 e0       	ldi	r24, 0x01	; 1
    30cc:	60 e0       	ldi	r22, 0x00	; 0
    30ce:	41 e0       	ldi	r20, 0x01	; 1
    30d0:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_u8setPinVal>

	_delay_ms(copy_u8Period*1000);
    30d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    30d6:	28 2f       	mov	r18, r24
    30d8:	30 e0       	ldi	r19, 0x00	; 0
    30da:	88 ee       	ldi	r24, 0xE8	; 232
    30dc:	93 e0       	ldi	r25, 0x03	; 3
    30de:	ac 01       	movw	r20, r24
    30e0:	24 9f       	mul	r18, r20
    30e2:	c0 01       	movw	r24, r0
    30e4:	25 9f       	mul	r18, r21
    30e6:	90 0d       	add	r25, r0
    30e8:	34 9f       	mul	r19, r20
    30ea:	90 0d       	add	r25, r0
    30ec:	11 24       	eor	r1, r1
    30ee:	aa 27       	eor	r26, r26
    30f0:	97 fd       	sbrc	r25, 7
    30f2:	a0 95       	com	r26
    30f4:	ba 2f       	mov	r27, r26
    30f6:	bc 01       	movw	r22, r24
    30f8:	cd 01       	movw	r24, r26
    30fa:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    30fe:	dc 01       	movw	r26, r24
    3100:	cb 01       	movw	r24, r22
    3102:	8b 87       	std	Y+11, r24	; 0x0b
    3104:	9c 87       	std	Y+12, r25	; 0x0c
    3106:	ad 87       	std	Y+13, r26	; 0x0d
    3108:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    310a:	6b 85       	ldd	r22, Y+11	; 0x0b
    310c:	7c 85       	ldd	r23, Y+12	; 0x0c
    310e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3110:	9e 85       	ldd	r25, Y+14	; 0x0e
    3112:	20 e0       	ldi	r18, 0x00	; 0
    3114:	30 e0       	ldi	r19, 0x00	; 0
    3116:	4a ef       	ldi	r20, 0xFA	; 250
    3118:	54 e4       	ldi	r21, 0x44	; 68
    311a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    311e:	dc 01       	movw	r26, r24
    3120:	cb 01       	movw	r24, r22
    3122:	8f 83       	std	Y+7, r24	; 0x07
    3124:	98 87       	std	Y+8, r25	; 0x08
    3126:	a9 87       	std	Y+9, r26	; 0x09
    3128:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    312a:	6f 81       	ldd	r22, Y+7	; 0x07
    312c:	78 85       	ldd	r23, Y+8	; 0x08
    312e:	89 85       	ldd	r24, Y+9	; 0x09
    3130:	9a 85       	ldd	r25, Y+10	; 0x0a
    3132:	20 e0       	ldi	r18, 0x00	; 0
    3134:	30 e0       	ldi	r19, 0x00	; 0
    3136:	40 e8       	ldi	r20, 0x80	; 128
    3138:	5f e3       	ldi	r21, 0x3F	; 63
    313a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    313e:	88 23       	and	r24, r24
    3140:	2c f4       	brge	.+10     	; 0x314c <DCMotor_vidTurnRight+0xa2>
		__ticks = 1;
    3142:	81 e0       	ldi	r24, 0x01	; 1
    3144:	90 e0       	ldi	r25, 0x00	; 0
    3146:	9e 83       	std	Y+6, r25	; 0x06
    3148:	8d 83       	std	Y+5, r24	; 0x05
    314a:	3f c0       	rjmp	.+126    	; 0x31ca <DCMotor_vidTurnRight+0x120>
	else if (__tmp > 65535)
    314c:	6f 81       	ldd	r22, Y+7	; 0x07
    314e:	78 85       	ldd	r23, Y+8	; 0x08
    3150:	89 85       	ldd	r24, Y+9	; 0x09
    3152:	9a 85       	ldd	r25, Y+10	; 0x0a
    3154:	20 e0       	ldi	r18, 0x00	; 0
    3156:	3f ef       	ldi	r19, 0xFF	; 255
    3158:	4f e7       	ldi	r20, 0x7F	; 127
    315a:	57 e4       	ldi	r21, 0x47	; 71
    315c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3160:	18 16       	cp	r1, r24
    3162:	4c f5       	brge	.+82     	; 0x31b6 <DCMotor_vidTurnRight+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3164:	6b 85       	ldd	r22, Y+11	; 0x0b
    3166:	7c 85       	ldd	r23, Y+12	; 0x0c
    3168:	8d 85       	ldd	r24, Y+13	; 0x0d
    316a:	9e 85       	ldd	r25, Y+14	; 0x0e
    316c:	20 e0       	ldi	r18, 0x00	; 0
    316e:	30 e0       	ldi	r19, 0x00	; 0
    3170:	40 e2       	ldi	r20, 0x20	; 32
    3172:	51 e4       	ldi	r21, 0x41	; 65
    3174:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3178:	dc 01       	movw	r26, r24
    317a:	cb 01       	movw	r24, r22
    317c:	bc 01       	movw	r22, r24
    317e:	cd 01       	movw	r24, r26
    3180:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3184:	dc 01       	movw	r26, r24
    3186:	cb 01       	movw	r24, r22
    3188:	9e 83       	std	Y+6, r25	; 0x06
    318a:	8d 83       	std	Y+5, r24	; 0x05
    318c:	0f c0       	rjmp	.+30     	; 0x31ac <DCMotor_vidTurnRight+0x102>
    318e:	88 ec       	ldi	r24, 0xC8	; 200
    3190:	90 e0       	ldi	r25, 0x00	; 0
    3192:	9c 83       	std	Y+4, r25	; 0x04
    3194:	8b 83       	std	Y+3, r24	; 0x03
    3196:	8b 81       	ldd	r24, Y+3	; 0x03
    3198:	9c 81       	ldd	r25, Y+4	; 0x04
    319a:	01 97       	sbiw	r24, 0x01	; 1
    319c:	f1 f7       	brne	.-4      	; 0x319a <DCMotor_vidTurnRight+0xf0>
    319e:	9c 83       	std	Y+4, r25	; 0x04
    31a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31a2:	8d 81       	ldd	r24, Y+5	; 0x05
    31a4:	9e 81       	ldd	r25, Y+6	; 0x06
    31a6:	01 97       	sbiw	r24, 0x01	; 1
    31a8:	9e 83       	std	Y+6, r25	; 0x06
    31aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31ac:	8d 81       	ldd	r24, Y+5	; 0x05
    31ae:	9e 81       	ldd	r25, Y+6	; 0x06
    31b0:	00 97       	sbiw	r24, 0x00	; 0
    31b2:	69 f7       	brne	.-38     	; 0x318e <DCMotor_vidTurnRight+0xe4>
    31b4:	14 c0       	rjmp	.+40     	; 0x31de <DCMotor_vidTurnRight+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31b6:	6f 81       	ldd	r22, Y+7	; 0x07
    31b8:	78 85       	ldd	r23, Y+8	; 0x08
    31ba:	89 85       	ldd	r24, Y+9	; 0x09
    31bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    31be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31c2:	dc 01       	movw	r26, r24
    31c4:	cb 01       	movw	r24, r22
    31c6:	9e 83       	std	Y+6, r25	; 0x06
    31c8:	8d 83       	std	Y+5, r24	; 0x05
    31ca:	8d 81       	ldd	r24, Y+5	; 0x05
    31cc:	9e 81       	ldd	r25, Y+6	; 0x06
    31ce:	9a 83       	std	Y+2, r25	; 0x02
    31d0:	89 83       	std	Y+1, r24	; 0x01
    31d2:	89 81       	ldd	r24, Y+1	; 0x01
    31d4:	9a 81       	ldd	r25, Y+2	; 0x02
    31d6:	01 97       	sbiw	r24, 0x01	; 1
    31d8:	f1 f7       	brne	.-4      	; 0x31d6 <DCMotor_vidTurnRight+0x12c>
    31da:	9a 83       	std	Y+2, r25	; 0x02
    31dc:	89 83       	std	Y+1, r24	; 0x01

	DIO_u8setPinVal(DCMOTOR_PORT, DCMOTOR_TURN_LEFT_PIN, LOW);
    31de:	81 e0       	ldi	r24, 0x01	; 1
    31e0:	61 e0       	ldi	r22, 0x01	; 1
    31e2:	40 e0       	ldi	r20, 0x00	; 0
    31e4:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_u8setPinVal>
	DIO_u8setPinVal(DCMOTOR_PORT, DCMOTOR_TURN_RIGHT_PIN, LOW);
    31e8:	81 e0       	ldi	r24, 0x01	; 1
    31ea:	60 e0       	ldi	r22, 0x00	; 0
    31ec:	40 e0       	ldi	r20, 0x00	; 0
    31ee:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_u8setPinVal>
}
    31f2:	2f 96       	adiw	r28, 0x0f	; 15
    31f4:	0f b6       	in	r0, 0x3f	; 63
    31f6:	f8 94       	cli
    31f8:	de bf       	out	0x3e, r29	; 62
    31fa:	0f be       	out	0x3f, r0	; 63
    31fc:	cd bf       	out	0x3d, r28	; 61
    31fe:	cf 91       	pop	r28
    3200:	df 91       	pop	r29
    3202:	08 95       	ret

00003204 <DCMotor_vidTurnLeft>:

void DCMotor_vidTurnLeft(u8 copy_u8Period)
{
    3204:	df 93       	push	r29
    3206:	cf 93       	push	r28
    3208:	cd b7       	in	r28, 0x3d	; 61
    320a:	de b7       	in	r29, 0x3e	; 62
    320c:	2f 97       	sbiw	r28, 0x0f	; 15
    320e:	0f b6       	in	r0, 0x3f	; 63
    3210:	f8 94       	cli
    3212:	de bf       	out	0x3e, r29	; 62
    3214:	0f be       	out	0x3f, r0	; 63
    3216:	cd bf       	out	0x3d, r28	; 61
    3218:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8setPinVal(DCMOTOR_PORT, DCMOTOR_TURN_RIGHT_PIN, LOW);
    321a:	81 e0       	ldi	r24, 0x01	; 1
    321c:	60 e0       	ldi	r22, 0x00	; 0
    321e:	40 e0       	ldi	r20, 0x00	; 0
    3220:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_u8setPinVal>
	DIO_u8setPinVal(DCMOTOR_PORT, DCMOTOR_TURN_LEFT_PIN, HIGH);
    3224:	81 e0       	ldi	r24, 0x01	; 1
    3226:	61 e0       	ldi	r22, 0x01	; 1
    3228:	41 e0       	ldi	r20, 0x01	; 1
    322a:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_u8setPinVal>

	_delay_ms(copy_u8Period*1000);
    322e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3230:	28 2f       	mov	r18, r24
    3232:	30 e0       	ldi	r19, 0x00	; 0
    3234:	88 ee       	ldi	r24, 0xE8	; 232
    3236:	93 e0       	ldi	r25, 0x03	; 3
    3238:	ac 01       	movw	r20, r24
    323a:	24 9f       	mul	r18, r20
    323c:	c0 01       	movw	r24, r0
    323e:	25 9f       	mul	r18, r21
    3240:	90 0d       	add	r25, r0
    3242:	34 9f       	mul	r19, r20
    3244:	90 0d       	add	r25, r0
    3246:	11 24       	eor	r1, r1
    3248:	aa 27       	eor	r26, r26
    324a:	97 fd       	sbrc	r25, 7
    324c:	a0 95       	com	r26
    324e:	ba 2f       	mov	r27, r26
    3250:	bc 01       	movw	r22, r24
    3252:	cd 01       	movw	r24, r26
    3254:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    3258:	dc 01       	movw	r26, r24
    325a:	cb 01       	movw	r24, r22
    325c:	8b 87       	std	Y+11, r24	; 0x0b
    325e:	9c 87       	std	Y+12, r25	; 0x0c
    3260:	ad 87       	std	Y+13, r26	; 0x0d
    3262:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3264:	6b 85       	ldd	r22, Y+11	; 0x0b
    3266:	7c 85       	ldd	r23, Y+12	; 0x0c
    3268:	8d 85       	ldd	r24, Y+13	; 0x0d
    326a:	9e 85       	ldd	r25, Y+14	; 0x0e
    326c:	20 e0       	ldi	r18, 0x00	; 0
    326e:	30 e0       	ldi	r19, 0x00	; 0
    3270:	4a ef       	ldi	r20, 0xFA	; 250
    3272:	54 e4       	ldi	r21, 0x44	; 68
    3274:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3278:	dc 01       	movw	r26, r24
    327a:	cb 01       	movw	r24, r22
    327c:	8f 83       	std	Y+7, r24	; 0x07
    327e:	98 87       	std	Y+8, r25	; 0x08
    3280:	a9 87       	std	Y+9, r26	; 0x09
    3282:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3284:	6f 81       	ldd	r22, Y+7	; 0x07
    3286:	78 85       	ldd	r23, Y+8	; 0x08
    3288:	89 85       	ldd	r24, Y+9	; 0x09
    328a:	9a 85       	ldd	r25, Y+10	; 0x0a
    328c:	20 e0       	ldi	r18, 0x00	; 0
    328e:	30 e0       	ldi	r19, 0x00	; 0
    3290:	40 e8       	ldi	r20, 0x80	; 128
    3292:	5f e3       	ldi	r21, 0x3F	; 63
    3294:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3298:	88 23       	and	r24, r24
    329a:	2c f4       	brge	.+10     	; 0x32a6 <DCMotor_vidTurnLeft+0xa2>
		__ticks = 1;
    329c:	81 e0       	ldi	r24, 0x01	; 1
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	9e 83       	std	Y+6, r25	; 0x06
    32a2:	8d 83       	std	Y+5, r24	; 0x05
    32a4:	3f c0       	rjmp	.+126    	; 0x3324 <DCMotor_vidTurnLeft+0x120>
	else if (__tmp > 65535)
    32a6:	6f 81       	ldd	r22, Y+7	; 0x07
    32a8:	78 85       	ldd	r23, Y+8	; 0x08
    32aa:	89 85       	ldd	r24, Y+9	; 0x09
    32ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    32ae:	20 e0       	ldi	r18, 0x00	; 0
    32b0:	3f ef       	ldi	r19, 0xFF	; 255
    32b2:	4f e7       	ldi	r20, 0x7F	; 127
    32b4:	57 e4       	ldi	r21, 0x47	; 71
    32b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32ba:	18 16       	cp	r1, r24
    32bc:	4c f5       	brge	.+82     	; 0x3310 <DCMotor_vidTurnLeft+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32be:	6b 85       	ldd	r22, Y+11	; 0x0b
    32c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    32c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    32c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    32c6:	20 e0       	ldi	r18, 0x00	; 0
    32c8:	30 e0       	ldi	r19, 0x00	; 0
    32ca:	40 e2       	ldi	r20, 0x20	; 32
    32cc:	51 e4       	ldi	r21, 0x41	; 65
    32ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32d2:	dc 01       	movw	r26, r24
    32d4:	cb 01       	movw	r24, r22
    32d6:	bc 01       	movw	r22, r24
    32d8:	cd 01       	movw	r24, r26
    32da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32de:	dc 01       	movw	r26, r24
    32e0:	cb 01       	movw	r24, r22
    32e2:	9e 83       	std	Y+6, r25	; 0x06
    32e4:	8d 83       	std	Y+5, r24	; 0x05
    32e6:	0f c0       	rjmp	.+30     	; 0x3306 <DCMotor_vidTurnLeft+0x102>
    32e8:	88 ec       	ldi	r24, 0xC8	; 200
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	9c 83       	std	Y+4, r25	; 0x04
    32ee:	8b 83       	std	Y+3, r24	; 0x03
    32f0:	8b 81       	ldd	r24, Y+3	; 0x03
    32f2:	9c 81       	ldd	r25, Y+4	; 0x04
    32f4:	01 97       	sbiw	r24, 0x01	; 1
    32f6:	f1 f7       	brne	.-4      	; 0x32f4 <DCMotor_vidTurnLeft+0xf0>
    32f8:	9c 83       	std	Y+4, r25	; 0x04
    32fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32fc:	8d 81       	ldd	r24, Y+5	; 0x05
    32fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3300:	01 97       	sbiw	r24, 0x01	; 1
    3302:	9e 83       	std	Y+6, r25	; 0x06
    3304:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3306:	8d 81       	ldd	r24, Y+5	; 0x05
    3308:	9e 81       	ldd	r25, Y+6	; 0x06
    330a:	00 97       	sbiw	r24, 0x00	; 0
    330c:	69 f7       	brne	.-38     	; 0x32e8 <DCMotor_vidTurnLeft+0xe4>
    330e:	14 c0       	rjmp	.+40     	; 0x3338 <DCMotor_vidTurnLeft+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3310:	6f 81       	ldd	r22, Y+7	; 0x07
    3312:	78 85       	ldd	r23, Y+8	; 0x08
    3314:	89 85       	ldd	r24, Y+9	; 0x09
    3316:	9a 85       	ldd	r25, Y+10	; 0x0a
    3318:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    331c:	dc 01       	movw	r26, r24
    331e:	cb 01       	movw	r24, r22
    3320:	9e 83       	std	Y+6, r25	; 0x06
    3322:	8d 83       	std	Y+5, r24	; 0x05
    3324:	8d 81       	ldd	r24, Y+5	; 0x05
    3326:	9e 81       	ldd	r25, Y+6	; 0x06
    3328:	9a 83       	std	Y+2, r25	; 0x02
    332a:	89 83       	std	Y+1, r24	; 0x01
    332c:	89 81       	ldd	r24, Y+1	; 0x01
    332e:	9a 81       	ldd	r25, Y+2	; 0x02
    3330:	01 97       	sbiw	r24, 0x01	; 1
    3332:	f1 f7       	brne	.-4      	; 0x3330 <DCMotor_vidTurnLeft+0x12c>
    3334:	9a 83       	std	Y+2, r25	; 0x02
    3336:	89 83       	std	Y+1, r24	; 0x01

	DIO_u8setPinVal(DCMOTOR_PORT, DCMOTOR_TURN_LEFT_PIN, LOW);
    3338:	81 e0       	ldi	r24, 0x01	; 1
    333a:	61 e0       	ldi	r22, 0x01	; 1
    333c:	40 e0       	ldi	r20, 0x00	; 0
    333e:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_u8setPinVal>
	DIO_u8setPinVal(DCMOTOR_PORT, DCMOTOR_TURN_RIGHT_PIN, LOW);
    3342:	81 e0       	ldi	r24, 0x01	; 1
    3344:	60 e0       	ldi	r22, 0x00	; 0
    3346:	40 e0       	ldi	r20, 0x00	; 0
    3348:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_u8setPinVal>
}
    334c:	2f 96       	adiw	r28, 0x0f	; 15
    334e:	0f b6       	in	r0, 0x3f	; 63
    3350:	f8 94       	cli
    3352:	de bf       	out	0x3e, r29	; 62
    3354:	0f be       	out	0x3f, r0	; 63
    3356:	cd bf       	out	0x3d, r28	; 61
    3358:	cf 91       	pop	r28
    335a:	df 91       	pop	r29
    335c:	08 95       	ret

0000335e <Buzzer_vidInit>:
#include "../../Libs/stdtypes.h"
#include "Buzzer_config.h"
#include "util/delay.h"

void Buzzer_vidInit()
{
    335e:	df 93       	push	r29
    3360:	cf 93       	push	r28
    3362:	cd b7       	in	r28, 0x3d	; 61
    3364:	de b7       	in	r29, 0x3e	; 62
	DIO_u8setPinDir(BUZZER_PORT, BUZZER_PIN, OUTPUT);
    3366:	81 e0       	ldi	r24, 0x01	; 1
    3368:	64 e0       	ldi	r22, 0x04	; 4
    336a:	41 e0       	ldi	r20, 0x01	; 1
    336c:	0e 94 ab 07 	call	0xf56	; 0xf56 <DIO_u8setPinDir>
	DIO_u8setPinVal(BUZZER_PORT, BUZZER_PIN, LOW);
    3370:	81 e0       	ldi	r24, 0x01	; 1
    3372:	64 e0       	ldi	r22, 0x04	; 4
    3374:	40 e0       	ldi	r20, 0x00	; 0
    3376:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_u8setPinVal>
}
    337a:	cf 91       	pop	r28
    337c:	df 91       	pop	r29
    337e:	08 95       	ret

00003380 <Buzzer_vidTurnOn>:

void Buzzer_vidTurnOn(u8 copy_u8Period)
{
    3380:	df 93       	push	r29
    3382:	cf 93       	push	r28
    3384:	cd b7       	in	r28, 0x3d	; 61
    3386:	de b7       	in	r29, 0x3e	; 62
    3388:	2f 97       	sbiw	r28, 0x0f	; 15
    338a:	0f b6       	in	r0, 0x3f	; 63
    338c:	f8 94       	cli
    338e:	de bf       	out	0x3e, r29	; 62
    3390:	0f be       	out	0x3f, r0	; 63
    3392:	cd bf       	out	0x3d, r28	; 61
    3394:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8setPinVal(BUZZER_PORT, BUZZER_PIN, HIGH);
    3396:	81 e0       	ldi	r24, 0x01	; 1
    3398:	64 e0       	ldi	r22, 0x04	; 4
    339a:	41 e0       	ldi	r20, 0x01	; 1
    339c:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_u8setPinVal>

	_delay_ms(copy_u8Period*1000);
    33a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    33a2:	28 2f       	mov	r18, r24
    33a4:	30 e0       	ldi	r19, 0x00	; 0
    33a6:	88 ee       	ldi	r24, 0xE8	; 232
    33a8:	93 e0       	ldi	r25, 0x03	; 3
    33aa:	ac 01       	movw	r20, r24
    33ac:	24 9f       	mul	r18, r20
    33ae:	c0 01       	movw	r24, r0
    33b0:	25 9f       	mul	r18, r21
    33b2:	90 0d       	add	r25, r0
    33b4:	34 9f       	mul	r19, r20
    33b6:	90 0d       	add	r25, r0
    33b8:	11 24       	eor	r1, r1
    33ba:	aa 27       	eor	r26, r26
    33bc:	97 fd       	sbrc	r25, 7
    33be:	a0 95       	com	r26
    33c0:	ba 2f       	mov	r27, r26
    33c2:	bc 01       	movw	r22, r24
    33c4:	cd 01       	movw	r24, r26
    33c6:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    33ca:	dc 01       	movw	r26, r24
    33cc:	cb 01       	movw	r24, r22
    33ce:	8b 87       	std	Y+11, r24	; 0x0b
    33d0:	9c 87       	std	Y+12, r25	; 0x0c
    33d2:	ad 87       	std	Y+13, r26	; 0x0d
    33d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    33d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    33da:	8d 85       	ldd	r24, Y+13	; 0x0d
    33dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    33de:	20 e0       	ldi	r18, 0x00	; 0
    33e0:	30 e0       	ldi	r19, 0x00	; 0
    33e2:	4a ef       	ldi	r20, 0xFA	; 250
    33e4:	54 e4       	ldi	r21, 0x44	; 68
    33e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ea:	dc 01       	movw	r26, r24
    33ec:	cb 01       	movw	r24, r22
    33ee:	8f 83       	std	Y+7, r24	; 0x07
    33f0:	98 87       	std	Y+8, r25	; 0x08
    33f2:	a9 87       	std	Y+9, r26	; 0x09
    33f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33f6:	6f 81       	ldd	r22, Y+7	; 0x07
    33f8:	78 85       	ldd	r23, Y+8	; 0x08
    33fa:	89 85       	ldd	r24, Y+9	; 0x09
    33fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    33fe:	20 e0       	ldi	r18, 0x00	; 0
    3400:	30 e0       	ldi	r19, 0x00	; 0
    3402:	40 e8       	ldi	r20, 0x80	; 128
    3404:	5f e3       	ldi	r21, 0x3F	; 63
    3406:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    340a:	88 23       	and	r24, r24
    340c:	2c f4       	brge	.+10     	; 0x3418 <Buzzer_vidTurnOn+0x98>
		__ticks = 1;
    340e:	81 e0       	ldi	r24, 0x01	; 1
    3410:	90 e0       	ldi	r25, 0x00	; 0
    3412:	9e 83       	std	Y+6, r25	; 0x06
    3414:	8d 83       	std	Y+5, r24	; 0x05
    3416:	3f c0       	rjmp	.+126    	; 0x3496 <Buzzer_vidTurnOn+0x116>
	else if (__tmp > 65535)
    3418:	6f 81       	ldd	r22, Y+7	; 0x07
    341a:	78 85       	ldd	r23, Y+8	; 0x08
    341c:	89 85       	ldd	r24, Y+9	; 0x09
    341e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3420:	20 e0       	ldi	r18, 0x00	; 0
    3422:	3f ef       	ldi	r19, 0xFF	; 255
    3424:	4f e7       	ldi	r20, 0x7F	; 127
    3426:	57 e4       	ldi	r21, 0x47	; 71
    3428:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    342c:	18 16       	cp	r1, r24
    342e:	4c f5       	brge	.+82     	; 0x3482 <Buzzer_vidTurnOn+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3430:	6b 85       	ldd	r22, Y+11	; 0x0b
    3432:	7c 85       	ldd	r23, Y+12	; 0x0c
    3434:	8d 85       	ldd	r24, Y+13	; 0x0d
    3436:	9e 85       	ldd	r25, Y+14	; 0x0e
    3438:	20 e0       	ldi	r18, 0x00	; 0
    343a:	30 e0       	ldi	r19, 0x00	; 0
    343c:	40 e2       	ldi	r20, 0x20	; 32
    343e:	51 e4       	ldi	r21, 0x41	; 65
    3440:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3444:	dc 01       	movw	r26, r24
    3446:	cb 01       	movw	r24, r22
    3448:	bc 01       	movw	r22, r24
    344a:	cd 01       	movw	r24, r26
    344c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3450:	dc 01       	movw	r26, r24
    3452:	cb 01       	movw	r24, r22
    3454:	9e 83       	std	Y+6, r25	; 0x06
    3456:	8d 83       	std	Y+5, r24	; 0x05
    3458:	0f c0       	rjmp	.+30     	; 0x3478 <Buzzer_vidTurnOn+0xf8>
    345a:	88 ec       	ldi	r24, 0xC8	; 200
    345c:	90 e0       	ldi	r25, 0x00	; 0
    345e:	9c 83       	std	Y+4, r25	; 0x04
    3460:	8b 83       	std	Y+3, r24	; 0x03
    3462:	8b 81       	ldd	r24, Y+3	; 0x03
    3464:	9c 81       	ldd	r25, Y+4	; 0x04
    3466:	01 97       	sbiw	r24, 0x01	; 1
    3468:	f1 f7       	brne	.-4      	; 0x3466 <Buzzer_vidTurnOn+0xe6>
    346a:	9c 83       	std	Y+4, r25	; 0x04
    346c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    346e:	8d 81       	ldd	r24, Y+5	; 0x05
    3470:	9e 81       	ldd	r25, Y+6	; 0x06
    3472:	01 97       	sbiw	r24, 0x01	; 1
    3474:	9e 83       	std	Y+6, r25	; 0x06
    3476:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3478:	8d 81       	ldd	r24, Y+5	; 0x05
    347a:	9e 81       	ldd	r25, Y+6	; 0x06
    347c:	00 97       	sbiw	r24, 0x00	; 0
    347e:	69 f7       	brne	.-38     	; 0x345a <Buzzer_vidTurnOn+0xda>
    3480:	14 c0       	rjmp	.+40     	; 0x34aa <Buzzer_vidTurnOn+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3482:	6f 81       	ldd	r22, Y+7	; 0x07
    3484:	78 85       	ldd	r23, Y+8	; 0x08
    3486:	89 85       	ldd	r24, Y+9	; 0x09
    3488:	9a 85       	ldd	r25, Y+10	; 0x0a
    348a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    348e:	dc 01       	movw	r26, r24
    3490:	cb 01       	movw	r24, r22
    3492:	9e 83       	std	Y+6, r25	; 0x06
    3494:	8d 83       	std	Y+5, r24	; 0x05
    3496:	8d 81       	ldd	r24, Y+5	; 0x05
    3498:	9e 81       	ldd	r25, Y+6	; 0x06
    349a:	9a 83       	std	Y+2, r25	; 0x02
    349c:	89 83       	std	Y+1, r24	; 0x01
    349e:	89 81       	ldd	r24, Y+1	; 0x01
    34a0:	9a 81       	ldd	r25, Y+2	; 0x02
    34a2:	01 97       	sbiw	r24, 0x01	; 1
    34a4:	f1 f7       	brne	.-4      	; 0x34a2 <Buzzer_vidTurnOn+0x122>
    34a6:	9a 83       	std	Y+2, r25	; 0x02
    34a8:	89 83       	std	Y+1, r24	; 0x01

	DIO_u8setPinVal(BUZZER_PORT, BUZZER_PIN, LOW);
    34aa:	81 e0       	ldi	r24, 0x01	; 1
    34ac:	64 e0       	ldi	r22, 0x04	; 4
    34ae:	40 e0       	ldi	r20, 0x00	; 0
    34b0:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_u8setPinVal>
}
    34b4:	2f 96       	adiw	r28, 0x0f	; 15
    34b6:	0f b6       	in	r0, 0x3f	; 63
    34b8:	f8 94       	cli
    34ba:	de bf       	out	0x3e, r29	; 62
    34bc:	0f be       	out	0x3f, r0	; 63
    34be:	cd bf       	out	0x3d, r28	; 61
    34c0:	cf 91       	pop	r28
    34c2:	df 91       	pop	r29
    34c4:	08 95       	ret

000034c6 <Buzzer_vidAlarm>:

void Buzzer_vidAlarm(u8 copy_u8Period, u8 copy_u8OnOffPeriodIn_ms)
{
    34c6:	df 93       	push	r29
    34c8:	cf 93       	push	r28
    34ca:	cd b7       	in	r28, 0x3d	; 61
    34cc:	de b7       	in	r29, 0x3e	; 62
    34ce:	a0 97       	sbiw	r28, 0x20	; 32
    34d0:	0f b6       	in	r0, 0x3f	; 63
    34d2:	f8 94       	cli
    34d4:	de bf       	out	0x3e, r29	; 62
    34d6:	0f be       	out	0x3f, r0	; 63
    34d8:	cd bf       	out	0x3d, r28	; 61
    34da:	8f 8f       	std	Y+31, r24	; 0x1f
    34dc:	68 a3       	std	Y+32, r22	; 0x20
	for(u16 counter=0; counter<((1000*copy_u8Period)/(2*copy_u8OnOffPeriodIn_ms)); counter++)
    34de:	1e 8e       	std	Y+30, r1	; 0x1e
    34e0:	1d 8e       	std	Y+29, r1	; 0x1d
    34e2:	01 c1       	rjmp	.+514    	; 0x36e6 <Buzzer_vidAlarm+0x220>
	{
		DIO_u8setPinVal(BUZZER_PORT, BUZZER_PIN, HIGH);
    34e4:	81 e0       	ldi	r24, 0x01	; 1
    34e6:	64 e0       	ldi	r22, 0x04	; 4
    34e8:	41 e0       	ldi	r20, 0x01	; 1
    34ea:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_u8setPinVal>

		_delay_ms(copy_u8OnOffPeriodIn_ms);
    34ee:	88 a1       	ldd	r24, Y+32	; 0x20
    34f0:	88 2f       	mov	r24, r24
    34f2:	90 e0       	ldi	r25, 0x00	; 0
    34f4:	a0 e0       	ldi	r26, 0x00	; 0
    34f6:	b0 e0       	ldi	r27, 0x00	; 0
    34f8:	bc 01       	movw	r22, r24
    34fa:	cd 01       	movw	r24, r26
    34fc:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__floatunsisf>
    3500:	dc 01       	movw	r26, r24
    3502:	cb 01       	movw	r24, r22
    3504:	89 8f       	std	Y+25, r24	; 0x19
    3506:	9a 8f       	std	Y+26, r25	; 0x1a
    3508:	ab 8f       	std	Y+27, r26	; 0x1b
    350a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    350c:	69 8d       	ldd	r22, Y+25	; 0x19
    350e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3510:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3512:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3514:	20 e0       	ldi	r18, 0x00	; 0
    3516:	30 e0       	ldi	r19, 0x00	; 0
    3518:	4a ef       	ldi	r20, 0xFA	; 250
    351a:	54 e4       	ldi	r21, 0x44	; 68
    351c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3520:	dc 01       	movw	r26, r24
    3522:	cb 01       	movw	r24, r22
    3524:	8d 8b       	std	Y+21, r24	; 0x15
    3526:	9e 8b       	std	Y+22, r25	; 0x16
    3528:	af 8b       	std	Y+23, r26	; 0x17
    352a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    352c:	6d 89       	ldd	r22, Y+21	; 0x15
    352e:	7e 89       	ldd	r23, Y+22	; 0x16
    3530:	8f 89       	ldd	r24, Y+23	; 0x17
    3532:	98 8d       	ldd	r25, Y+24	; 0x18
    3534:	20 e0       	ldi	r18, 0x00	; 0
    3536:	30 e0       	ldi	r19, 0x00	; 0
    3538:	40 e8       	ldi	r20, 0x80	; 128
    353a:	5f e3       	ldi	r21, 0x3F	; 63
    353c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3540:	88 23       	and	r24, r24
    3542:	2c f4       	brge	.+10     	; 0x354e <Buzzer_vidAlarm+0x88>
		__ticks = 1;
    3544:	81 e0       	ldi	r24, 0x01	; 1
    3546:	90 e0       	ldi	r25, 0x00	; 0
    3548:	9c 8b       	std	Y+20, r25	; 0x14
    354a:	8b 8b       	std	Y+19, r24	; 0x13
    354c:	3f c0       	rjmp	.+126    	; 0x35cc <Buzzer_vidAlarm+0x106>
	else if (__tmp > 65535)
    354e:	6d 89       	ldd	r22, Y+21	; 0x15
    3550:	7e 89       	ldd	r23, Y+22	; 0x16
    3552:	8f 89       	ldd	r24, Y+23	; 0x17
    3554:	98 8d       	ldd	r25, Y+24	; 0x18
    3556:	20 e0       	ldi	r18, 0x00	; 0
    3558:	3f ef       	ldi	r19, 0xFF	; 255
    355a:	4f e7       	ldi	r20, 0x7F	; 127
    355c:	57 e4       	ldi	r21, 0x47	; 71
    355e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3562:	18 16       	cp	r1, r24
    3564:	4c f5       	brge	.+82     	; 0x35b8 <Buzzer_vidAlarm+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3566:	69 8d       	ldd	r22, Y+25	; 0x19
    3568:	7a 8d       	ldd	r23, Y+26	; 0x1a
    356a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    356c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    356e:	20 e0       	ldi	r18, 0x00	; 0
    3570:	30 e0       	ldi	r19, 0x00	; 0
    3572:	40 e2       	ldi	r20, 0x20	; 32
    3574:	51 e4       	ldi	r21, 0x41	; 65
    3576:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    357a:	dc 01       	movw	r26, r24
    357c:	cb 01       	movw	r24, r22
    357e:	bc 01       	movw	r22, r24
    3580:	cd 01       	movw	r24, r26
    3582:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3586:	dc 01       	movw	r26, r24
    3588:	cb 01       	movw	r24, r22
    358a:	9c 8b       	std	Y+20, r25	; 0x14
    358c:	8b 8b       	std	Y+19, r24	; 0x13
    358e:	0f c0       	rjmp	.+30     	; 0x35ae <Buzzer_vidAlarm+0xe8>
    3590:	88 ec       	ldi	r24, 0xC8	; 200
    3592:	90 e0       	ldi	r25, 0x00	; 0
    3594:	9a 8b       	std	Y+18, r25	; 0x12
    3596:	89 8b       	std	Y+17, r24	; 0x11
    3598:	89 89       	ldd	r24, Y+17	; 0x11
    359a:	9a 89       	ldd	r25, Y+18	; 0x12
    359c:	01 97       	sbiw	r24, 0x01	; 1
    359e:	f1 f7       	brne	.-4      	; 0x359c <Buzzer_vidAlarm+0xd6>
    35a0:	9a 8b       	std	Y+18, r25	; 0x12
    35a2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35a4:	8b 89       	ldd	r24, Y+19	; 0x13
    35a6:	9c 89       	ldd	r25, Y+20	; 0x14
    35a8:	01 97       	sbiw	r24, 0x01	; 1
    35aa:	9c 8b       	std	Y+20, r25	; 0x14
    35ac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35ae:	8b 89       	ldd	r24, Y+19	; 0x13
    35b0:	9c 89       	ldd	r25, Y+20	; 0x14
    35b2:	00 97       	sbiw	r24, 0x00	; 0
    35b4:	69 f7       	brne	.-38     	; 0x3590 <Buzzer_vidAlarm+0xca>
    35b6:	14 c0       	rjmp	.+40     	; 0x35e0 <Buzzer_vidAlarm+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35b8:	6d 89       	ldd	r22, Y+21	; 0x15
    35ba:	7e 89       	ldd	r23, Y+22	; 0x16
    35bc:	8f 89       	ldd	r24, Y+23	; 0x17
    35be:	98 8d       	ldd	r25, Y+24	; 0x18
    35c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35c4:	dc 01       	movw	r26, r24
    35c6:	cb 01       	movw	r24, r22
    35c8:	9c 8b       	std	Y+20, r25	; 0x14
    35ca:	8b 8b       	std	Y+19, r24	; 0x13
    35cc:	8b 89       	ldd	r24, Y+19	; 0x13
    35ce:	9c 89       	ldd	r25, Y+20	; 0x14
    35d0:	98 8b       	std	Y+16, r25	; 0x10
    35d2:	8f 87       	std	Y+15, r24	; 0x0f
    35d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    35d6:	98 89       	ldd	r25, Y+16	; 0x10
    35d8:	01 97       	sbiw	r24, 0x01	; 1
    35da:	f1 f7       	brne	.-4      	; 0x35d8 <Buzzer_vidAlarm+0x112>
    35dc:	98 8b       	std	Y+16, r25	; 0x10
    35de:	8f 87       	std	Y+15, r24	; 0x0f

		DIO_u8setPinVal(BUZZER_PORT, BUZZER_PIN, LOW);
    35e0:	81 e0       	ldi	r24, 0x01	; 1
    35e2:	64 e0       	ldi	r22, 0x04	; 4
    35e4:	40 e0       	ldi	r20, 0x00	; 0
    35e6:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_u8setPinVal>

		_delay_ms(copy_u8OnOffPeriodIn_ms);
    35ea:	88 a1       	ldd	r24, Y+32	; 0x20
    35ec:	88 2f       	mov	r24, r24
    35ee:	90 e0       	ldi	r25, 0x00	; 0
    35f0:	a0 e0       	ldi	r26, 0x00	; 0
    35f2:	b0 e0       	ldi	r27, 0x00	; 0
    35f4:	bc 01       	movw	r22, r24
    35f6:	cd 01       	movw	r24, r26
    35f8:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__floatunsisf>
    35fc:	dc 01       	movw	r26, r24
    35fe:	cb 01       	movw	r24, r22
    3600:	8b 87       	std	Y+11, r24	; 0x0b
    3602:	9c 87       	std	Y+12, r25	; 0x0c
    3604:	ad 87       	std	Y+13, r26	; 0x0d
    3606:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3608:	6b 85       	ldd	r22, Y+11	; 0x0b
    360a:	7c 85       	ldd	r23, Y+12	; 0x0c
    360c:	8d 85       	ldd	r24, Y+13	; 0x0d
    360e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3610:	20 e0       	ldi	r18, 0x00	; 0
    3612:	30 e0       	ldi	r19, 0x00	; 0
    3614:	4a ef       	ldi	r20, 0xFA	; 250
    3616:	54 e4       	ldi	r21, 0x44	; 68
    3618:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    361c:	dc 01       	movw	r26, r24
    361e:	cb 01       	movw	r24, r22
    3620:	8f 83       	std	Y+7, r24	; 0x07
    3622:	98 87       	std	Y+8, r25	; 0x08
    3624:	a9 87       	std	Y+9, r26	; 0x09
    3626:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3628:	6f 81       	ldd	r22, Y+7	; 0x07
    362a:	78 85       	ldd	r23, Y+8	; 0x08
    362c:	89 85       	ldd	r24, Y+9	; 0x09
    362e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3630:	20 e0       	ldi	r18, 0x00	; 0
    3632:	30 e0       	ldi	r19, 0x00	; 0
    3634:	40 e8       	ldi	r20, 0x80	; 128
    3636:	5f e3       	ldi	r21, 0x3F	; 63
    3638:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    363c:	88 23       	and	r24, r24
    363e:	2c f4       	brge	.+10     	; 0x364a <Buzzer_vidAlarm+0x184>
		__ticks = 1;
    3640:	81 e0       	ldi	r24, 0x01	; 1
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	9e 83       	std	Y+6, r25	; 0x06
    3646:	8d 83       	std	Y+5, r24	; 0x05
    3648:	3f c0       	rjmp	.+126    	; 0x36c8 <Buzzer_vidAlarm+0x202>
	else if (__tmp > 65535)
    364a:	6f 81       	ldd	r22, Y+7	; 0x07
    364c:	78 85       	ldd	r23, Y+8	; 0x08
    364e:	89 85       	ldd	r24, Y+9	; 0x09
    3650:	9a 85       	ldd	r25, Y+10	; 0x0a
    3652:	20 e0       	ldi	r18, 0x00	; 0
    3654:	3f ef       	ldi	r19, 0xFF	; 255
    3656:	4f e7       	ldi	r20, 0x7F	; 127
    3658:	57 e4       	ldi	r21, 0x47	; 71
    365a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    365e:	18 16       	cp	r1, r24
    3660:	4c f5       	brge	.+82     	; 0x36b4 <Buzzer_vidAlarm+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3662:	6b 85       	ldd	r22, Y+11	; 0x0b
    3664:	7c 85       	ldd	r23, Y+12	; 0x0c
    3666:	8d 85       	ldd	r24, Y+13	; 0x0d
    3668:	9e 85       	ldd	r25, Y+14	; 0x0e
    366a:	20 e0       	ldi	r18, 0x00	; 0
    366c:	30 e0       	ldi	r19, 0x00	; 0
    366e:	40 e2       	ldi	r20, 0x20	; 32
    3670:	51 e4       	ldi	r21, 0x41	; 65
    3672:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3676:	dc 01       	movw	r26, r24
    3678:	cb 01       	movw	r24, r22
    367a:	bc 01       	movw	r22, r24
    367c:	cd 01       	movw	r24, r26
    367e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3682:	dc 01       	movw	r26, r24
    3684:	cb 01       	movw	r24, r22
    3686:	9e 83       	std	Y+6, r25	; 0x06
    3688:	8d 83       	std	Y+5, r24	; 0x05
    368a:	0f c0       	rjmp	.+30     	; 0x36aa <Buzzer_vidAlarm+0x1e4>
    368c:	88 ec       	ldi	r24, 0xC8	; 200
    368e:	90 e0       	ldi	r25, 0x00	; 0
    3690:	9c 83       	std	Y+4, r25	; 0x04
    3692:	8b 83       	std	Y+3, r24	; 0x03
    3694:	8b 81       	ldd	r24, Y+3	; 0x03
    3696:	9c 81       	ldd	r25, Y+4	; 0x04
    3698:	01 97       	sbiw	r24, 0x01	; 1
    369a:	f1 f7       	brne	.-4      	; 0x3698 <Buzzer_vidAlarm+0x1d2>
    369c:	9c 83       	std	Y+4, r25	; 0x04
    369e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36a0:	8d 81       	ldd	r24, Y+5	; 0x05
    36a2:	9e 81       	ldd	r25, Y+6	; 0x06
    36a4:	01 97       	sbiw	r24, 0x01	; 1
    36a6:	9e 83       	std	Y+6, r25	; 0x06
    36a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36aa:	8d 81       	ldd	r24, Y+5	; 0x05
    36ac:	9e 81       	ldd	r25, Y+6	; 0x06
    36ae:	00 97       	sbiw	r24, 0x00	; 0
    36b0:	69 f7       	brne	.-38     	; 0x368c <Buzzer_vidAlarm+0x1c6>
    36b2:	14 c0       	rjmp	.+40     	; 0x36dc <Buzzer_vidAlarm+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36b4:	6f 81       	ldd	r22, Y+7	; 0x07
    36b6:	78 85       	ldd	r23, Y+8	; 0x08
    36b8:	89 85       	ldd	r24, Y+9	; 0x09
    36ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    36bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36c0:	dc 01       	movw	r26, r24
    36c2:	cb 01       	movw	r24, r22
    36c4:	9e 83       	std	Y+6, r25	; 0x06
    36c6:	8d 83       	std	Y+5, r24	; 0x05
    36c8:	8d 81       	ldd	r24, Y+5	; 0x05
    36ca:	9e 81       	ldd	r25, Y+6	; 0x06
    36cc:	9a 83       	std	Y+2, r25	; 0x02
    36ce:	89 83       	std	Y+1, r24	; 0x01
    36d0:	89 81       	ldd	r24, Y+1	; 0x01
    36d2:	9a 81       	ldd	r25, Y+2	; 0x02
    36d4:	01 97       	sbiw	r24, 0x01	; 1
    36d6:	f1 f7       	brne	.-4      	; 0x36d4 <Buzzer_vidAlarm+0x20e>
    36d8:	9a 83       	std	Y+2, r25	; 0x02
    36da:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8setPinVal(BUZZER_PORT, BUZZER_PIN, LOW);
}

void Buzzer_vidAlarm(u8 copy_u8Period, u8 copy_u8OnOffPeriodIn_ms)
{
	for(u16 counter=0; counter<((1000*copy_u8Period)/(2*copy_u8OnOffPeriodIn_ms)); counter++)
    36dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    36de:	9e 8d       	ldd	r25, Y+30	; 0x1e
    36e0:	01 96       	adiw	r24, 0x01	; 1
    36e2:	9e 8f       	std	Y+30, r25	; 0x1e
    36e4:	8d 8f       	std	Y+29, r24	; 0x1d
    36e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    36e8:	28 2f       	mov	r18, r24
    36ea:	30 e0       	ldi	r19, 0x00	; 0
    36ec:	88 ee       	ldi	r24, 0xE8	; 232
    36ee:	93 e0       	ldi	r25, 0x03	; 3
    36f0:	28 9f       	mul	r18, r24
    36f2:	a0 01       	movw	r20, r0
    36f4:	29 9f       	mul	r18, r25
    36f6:	50 0d       	add	r21, r0
    36f8:	38 9f       	mul	r19, r24
    36fa:	50 0d       	add	r21, r0
    36fc:	11 24       	eor	r1, r1
    36fe:	88 a1       	ldd	r24, Y+32	; 0x20
    3700:	88 2f       	mov	r24, r24
    3702:	90 e0       	ldi	r25, 0x00	; 0
    3704:	9c 01       	movw	r18, r24
    3706:	22 0f       	add	r18, r18
    3708:	33 1f       	adc	r19, r19
    370a:	ca 01       	movw	r24, r20
    370c:	b9 01       	movw	r22, r18
    370e:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <__divmodhi4>
    3712:	cb 01       	movw	r24, r22
    3714:	9c 01       	movw	r18, r24
    3716:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3718:	9e 8d       	ldd	r25, Y+30	; 0x1e
    371a:	82 17       	cp	r24, r18
    371c:	93 07       	cpc	r25, r19
    371e:	08 f4       	brcc	.+2      	; 0x3722 <Buzzer_vidAlarm+0x25c>
    3720:	e1 ce       	rjmp	.-574    	; 0x34e4 <Buzzer_vidAlarm+0x1e>

		DIO_u8setPinVal(BUZZER_PORT, BUZZER_PIN, LOW);

		_delay_ms(copy_u8OnOffPeriodIn_ms);
	}
}
    3722:	a0 96       	adiw	r28, 0x20	; 32
    3724:	0f b6       	in	r0, 0x3f	; 63
    3726:	f8 94       	cli
    3728:	de bf       	out	0x3e, r29	; 62
    372a:	0f be       	out	0x3f, r0	; 63
    372c:	cd bf       	out	0x3d, r28	; 61
    372e:	cf 91       	pop	r28
    3730:	df 91       	pop	r29
    3732:	08 95       	ret

00003734 <SafeLock_vidInit>:
u16 local_u16Num2 = 0;
u8 local_u8TrialsCounter = 0;
u16 Password = 1234;

void SafeLock_vidInit()
{
    3734:	df 93       	push	r29
    3736:	cf 93       	push	r28
    3738:	cd b7       	in	r28, 0x3d	; 61
    373a:	de b7       	in	r29, 0x3e	; 62
	LCD_vidInit();
    373c:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <LCD_vidInit>
	KeyPad_vidInit();
    3740:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <KeyPad_vidInit>
	Buzzer_vidInit();
    3744:	0e 94 af 19 	call	0x335e	; 0x335e <Buzzer_vidInit>
	DCMotor_vidInit();
    3748:	0e 94 3a 18 	call	0x3074	; 0x3074 <DCMotor_vidInit>
	DIO_u8setPinDir(LED_PORT, RED_LED, OUTPUT);
    374c:	81 e0       	ldi	r24, 0x01	; 1
    374e:	62 e0       	ldi	r22, 0x02	; 2
    3750:	41 e0       	ldi	r20, 0x01	; 1
    3752:	0e 94 ab 07 	call	0xf56	; 0xf56 <DIO_u8setPinDir>
	DIO_u8setPinDir(LED_PORT, GREEN_LED, OUTPUT);
    3756:	81 e0       	ldi	r24, 0x01	; 1
    3758:	63 e0       	ldi	r22, 0x03	; 3
    375a:	41 e0       	ldi	r20, 0x01	; 1
    375c:	0e 94 ab 07 	call	0xf56	; 0xf56 <DIO_u8setPinDir>
	DIO_u8setPinVal(LED_PORT, RED_LED, HIGH);
    3760:	81 e0       	ldi	r24, 0x01	; 1
    3762:	62 e0       	ldi	r22, 0x02	; 2
    3764:	41 e0       	ldi	r20, 0x01	; 1
    3766:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_u8setPinVal>
	DIO_u8setPinVal(LED_PORT, GREEN_LED, LOW);
    376a:	81 e0       	ldi	r24, 0x01	; 1
    376c:	63 e0       	ldi	r22, 0x03	; 3
    376e:	40 e0       	ldi	r20, 0x00	; 0
    3770:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_u8setPinVal>
}
    3774:	cf 91       	pop	r28
    3776:	df 91       	pop	r29
    3778:	08 95       	ret

0000377a <SafeLock_vidChangePassword>:

void SafeLock_vidChangePassword(void)
{
    377a:	0f 93       	push	r16
    377c:	1f 93       	push	r17
    377e:	df 93       	push	r29
    3780:	cf 93       	push	r28
    3782:	cd b7       	in	r28, 0x3d	; 61
    3784:	de b7       	in	r29, 0x3e	; 62
    3786:	62 97       	sbiw	r28, 0x12	; 18
    3788:	0f b6       	in	r0, 0x3f	; 63
    378a:	f8 94       	cli
    378c:	de bf       	out	0x3e, r29	; 62
    378e:	0f be       	out	0x3f, r0	; 63
    3790:	cd bf       	out	0x3d, r28	; 61
    3792:	1a c0       	rjmp	.+52     	; 0x37c8 <SafeLock_vidChangePassword+0x4e>
	while((KeyPad_u8Pressed()!='=')&&(local_u8Counter<4))
	{
		if((KeyPad_u8Pressed()>=0)&&(KeyPad_u8Pressed()<10))
    3794:	0e 94 f6 16 	call	0x2dec	; 0x2dec <KeyPad_u8Pressed>
    3798:	0e 94 f6 16 	call	0x2dec	; 0x2dec <KeyPad_u8Pressed>
    379c:	8a 30       	cpi	r24, 0x0A	; 10
    379e:	a0 f4       	brcc	.+40     	; 0x37c8 <SafeLock_vidChangePassword+0x4e>
		{
			LCD_u8sendData('*');
    37a0:	8a e2       	ldi	r24, 0x2A	; 42
    37a2:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <LCD_u8sendData>
			local_u8Numbers[local_u8Counter] = KeyPad_u8Pressed();
    37a6:	80 91 02 02 	lds	r24, 0x0202
    37aa:	08 2f       	mov	r16, r24
    37ac:	11 27       	eor	r17, r17
    37ae:	07 fd       	sbrc	r16, 7
    37b0:	10 95       	com	r17
    37b2:	0e 94 f6 16 	call	0x2dec	; 0x2dec <KeyPad_u8Pressed>
    37b6:	f8 01       	movw	r30, r16
    37b8:	e8 5f       	subi	r30, 0xF8	; 248
    37ba:	fd 4f       	sbci	r31, 0xFD	; 253
    37bc:	80 83       	st	Z, r24
			local_u8Counter++;
    37be:	80 91 02 02 	lds	r24, 0x0202
    37c2:	8f 5f       	subi	r24, 0xFF	; 255
    37c4:	80 93 02 02 	sts	0x0202, r24
	DIO_u8setPinVal(LED_PORT, GREEN_LED, LOW);
}

void SafeLock_vidChangePassword(void)
{
	while((KeyPad_u8Pressed()!='=')&&(local_u8Counter<4))
    37c8:	0e 94 f6 16 	call	0x2dec	; 0x2dec <KeyPad_u8Pressed>
    37cc:	8d 33       	cpi	r24, 0x3D	; 61
    37ce:	21 f0       	breq	.+8      	; 0x37d8 <SafeLock_vidChangePassword+0x5e>
    37d0:	80 91 02 02 	lds	r24, 0x0202
    37d4:	84 30       	cpi	r24, 0x04	; 4
    37d6:	f4 f2       	brlt	.-68     	; 0x3794 <SafeLock_vidChangePassword+0x1a>

		else
			continue;
	}

	while(KeyPad_u8Pressed() != '=');
    37d8:	0e 94 f6 16 	call	0x2dec	; 0x2dec <KeyPad_u8Pressed>
    37dc:	8d 33       	cpi	r24, 0x3D	; 61
    37de:	e1 f7       	brne	.-8      	; 0x37d8 <SafeLock_vidChangePassword+0x5e>

	if(KeyPad_u8Pressed() == '=')
    37e0:	0e 94 f6 16 	call	0x2dec	; 0x2dec <KeyPad_u8Pressed>
    37e4:	8d 33       	cpi	r24, 0x3D	; 61
    37e6:	09 f0       	breq	.+2      	; 0x37ea <SafeLock_vidChangePassword+0x70>
    37e8:	bd c0       	rjmp	.+378    	; 0x3964 <SafeLock_vidChangePassword+0x1ea>
	{
		for(u16 iterate=1; local_u8Counter>0; local_u8Counter--, iterate*=10)
    37ea:	81 e0       	ldi	r24, 0x01	; 1
    37ec:	90 e0       	ldi	r25, 0x00	; 0
    37ee:	9a 8b       	std	Y+18, r25	; 0x12
    37f0:	89 8b       	std	Y+17, r24	; 0x11
    37f2:	3d c0       	rjmp	.+122    	; 0x386e <SafeLock_vidChangePassword+0xf4>
		{
			local_u16Num1 += local_u8Numbers[local_u8Counter-1] * iterate;
    37f4:	80 91 02 02 	lds	r24, 0x0202
    37f8:	99 27       	eor	r25, r25
    37fa:	87 fd       	sbrc	r24, 7
    37fc:	90 95       	com	r25
    37fe:	01 97       	sbiw	r24, 0x01	; 1
    3800:	fc 01       	movw	r30, r24
    3802:	e8 5f       	subi	r30, 0xF8	; 248
    3804:	fd 4f       	sbci	r31, 0xFD	; 253
    3806:	80 81       	ld	r24, Z
    3808:	28 2f       	mov	r18, r24
    380a:	30 e0       	ldi	r19, 0x00	; 0
    380c:	89 89       	ldd	r24, Y+17	; 0x11
    380e:	9a 89       	ldd	r25, Y+18	; 0x12
    3810:	a9 01       	movw	r20, r18
    3812:	48 9f       	mul	r20, r24
    3814:	90 01       	movw	r18, r0
    3816:	49 9f       	mul	r20, r25
    3818:	30 0d       	add	r19, r0
    381a:	58 9f       	mul	r21, r24
    381c:	30 0d       	add	r19, r0
    381e:	11 24       	eor	r1, r1
    3820:	80 91 03 02 	lds	r24, 0x0203
    3824:	90 91 04 02 	lds	r25, 0x0204
    3828:	82 0f       	add	r24, r18
    382a:	93 1f       	adc	r25, r19
    382c:	90 93 04 02 	sts	0x0204, r25
    3830:	80 93 03 02 	sts	0x0203, r24
			local_u8Numbers[local_u8Counter-1] = 0;
    3834:	80 91 02 02 	lds	r24, 0x0202
    3838:	99 27       	eor	r25, r25
    383a:	87 fd       	sbrc	r24, 7
    383c:	90 95       	com	r25
    383e:	01 97       	sbiw	r24, 0x01	; 1
    3840:	fc 01       	movw	r30, r24
    3842:	e8 5f       	subi	r30, 0xF8	; 248
    3844:	fd 4f       	sbci	r31, 0xFD	; 253
    3846:	10 82       	st	Z, r1

	while(KeyPad_u8Pressed() != '=');

	if(KeyPad_u8Pressed() == '=')
	{
		for(u16 iterate=1; local_u8Counter>0; local_u8Counter--, iterate*=10)
    3848:	80 91 02 02 	lds	r24, 0x0202
    384c:	81 50       	subi	r24, 0x01	; 1
    384e:	80 93 02 02 	sts	0x0202, r24
    3852:	89 89       	ldd	r24, Y+17	; 0x11
    3854:	9a 89       	ldd	r25, Y+18	; 0x12
    3856:	9c 01       	movw	r18, r24
    3858:	22 0f       	add	r18, r18
    385a:	33 1f       	adc	r19, r19
    385c:	c9 01       	movw	r24, r18
    385e:	88 0f       	add	r24, r24
    3860:	99 1f       	adc	r25, r25
    3862:	88 0f       	add	r24, r24
    3864:	99 1f       	adc	r25, r25
    3866:	82 0f       	add	r24, r18
    3868:	93 1f       	adc	r25, r19
    386a:	9a 8b       	std	Y+18, r25	; 0x12
    386c:	89 8b       	std	Y+17, r24	; 0x11
    386e:	80 91 02 02 	lds	r24, 0x0202
    3872:	18 16       	cp	r1, r24
    3874:	0c f4       	brge	.+2      	; 0x3878 <SafeLock_vidChangePassword+0xfe>
    3876:	be cf       	rjmp	.-132    	; 0x37f4 <SafeLock_vidChangePassword+0x7a>
		{
			local_u16Num1 += local_u8Numbers[local_u8Counter-1] * iterate;
			local_u8Numbers[local_u8Counter-1] = 0;
		}

		LCD_vidClearDisplay();
    3878:	0e 94 79 12 	call	0x24f2	; 0x24f2 <LCD_vidClearDisplay>
		LCD_vidCenterString("ReEnter new pass", 0);
    387c:	80 e6       	ldi	r24, 0x60	; 96
    387e:	90 e0       	ldi	r25, 0x00	; 0
    3880:	60 e0       	ldi	r22, 0x00	; 0
    3882:	70 e0       	ldi	r23, 0x00	; 0
    3884:	0e 94 49 10 	call	0x2092	; 0x2092 <LCD_vidCenterString>
		LCD_vidGoToXY(6, 1);
    3888:	86 e0       	ldi	r24, 0x06	; 6
    388a:	61 e0       	ldi	r22, 0x01	; 1
    388c:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_vidGoToXY>
    3890:	1a c0       	rjmp	.+52     	; 0x38c6 <SafeLock_vidChangePassword+0x14c>

		while((KeyPad_u8Pressed()!='=')&&(local_u8Counter<4))
		{
			if((KeyPad_u8Pressed()>=0)&&(KeyPad_u8Pressed()<10))
    3892:	0e 94 f6 16 	call	0x2dec	; 0x2dec <KeyPad_u8Pressed>
    3896:	0e 94 f6 16 	call	0x2dec	; 0x2dec <KeyPad_u8Pressed>
    389a:	8a 30       	cpi	r24, 0x0A	; 10
    389c:	a0 f4       	brcc	.+40     	; 0x38c6 <SafeLock_vidChangePassword+0x14c>
			{
				LCD_u8sendData('*');
    389e:	8a e2       	ldi	r24, 0x2A	; 42
    38a0:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <LCD_u8sendData>
				local_u8Numbers[local_u8Counter] = KeyPad_u8Pressed();
    38a4:	80 91 02 02 	lds	r24, 0x0202
    38a8:	08 2f       	mov	r16, r24
    38aa:	11 27       	eor	r17, r17
    38ac:	07 fd       	sbrc	r16, 7
    38ae:	10 95       	com	r17
    38b0:	0e 94 f6 16 	call	0x2dec	; 0x2dec <KeyPad_u8Pressed>
    38b4:	f8 01       	movw	r30, r16
    38b6:	e8 5f       	subi	r30, 0xF8	; 248
    38b8:	fd 4f       	sbci	r31, 0xFD	; 253
    38ba:	80 83       	st	Z, r24
				local_u8Counter++;
    38bc:	80 91 02 02 	lds	r24, 0x0202
    38c0:	8f 5f       	subi	r24, 0xFF	; 255
    38c2:	80 93 02 02 	sts	0x0202, r24

		LCD_vidClearDisplay();
		LCD_vidCenterString("ReEnter new pass", 0);
		LCD_vidGoToXY(6, 1);

		while((KeyPad_u8Pressed()!='=')&&(local_u8Counter<4))
    38c6:	0e 94 f6 16 	call	0x2dec	; 0x2dec <KeyPad_u8Pressed>
    38ca:	8d 33       	cpi	r24, 0x3D	; 61
    38cc:	21 f0       	breq	.+8      	; 0x38d6 <SafeLock_vidChangePassword+0x15c>
    38ce:	80 91 02 02 	lds	r24, 0x0202
    38d2:	84 30       	cpi	r24, 0x04	; 4
    38d4:	f4 f2       	brlt	.-68     	; 0x3892 <SafeLock_vidChangePassword+0x118>

			else
				continue;
		}

		for(u16 iterate=1; local_u8Counter>0; local_u8Counter--, iterate*=10)
    38d6:	81 e0       	ldi	r24, 0x01	; 1
    38d8:	90 e0       	ldi	r25, 0x00	; 0
    38da:	98 8b       	std	Y+16, r25	; 0x10
    38dc:	8f 87       	std	Y+15, r24	; 0x0f
    38de:	3d c0       	rjmp	.+122    	; 0x395a <SafeLock_vidChangePassword+0x1e0>
		{
			local_u16Num2 += local_u8Numbers[local_u8Counter-1] * iterate;
    38e0:	80 91 02 02 	lds	r24, 0x0202
    38e4:	99 27       	eor	r25, r25
    38e6:	87 fd       	sbrc	r24, 7
    38e8:	90 95       	com	r25
    38ea:	01 97       	sbiw	r24, 0x01	; 1
    38ec:	fc 01       	movw	r30, r24
    38ee:	e8 5f       	subi	r30, 0xF8	; 248
    38f0:	fd 4f       	sbci	r31, 0xFD	; 253
    38f2:	80 81       	ld	r24, Z
    38f4:	28 2f       	mov	r18, r24
    38f6:	30 e0       	ldi	r19, 0x00	; 0
    38f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    38fa:	98 89       	ldd	r25, Y+16	; 0x10
    38fc:	a9 01       	movw	r20, r18
    38fe:	48 9f       	mul	r20, r24
    3900:	90 01       	movw	r18, r0
    3902:	49 9f       	mul	r20, r25
    3904:	30 0d       	add	r19, r0
    3906:	58 9f       	mul	r21, r24
    3908:	30 0d       	add	r19, r0
    390a:	11 24       	eor	r1, r1
    390c:	80 91 05 02 	lds	r24, 0x0205
    3910:	90 91 06 02 	lds	r25, 0x0206
    3914:	82 0f       	add	r24, r18
    3916:	93 1f       	adc	r25, r19
    3918:	90 93 06 02 	sts	0x0206, r25
    391c:	80 93 05 02 	sts	0x0205, r24
			local_u8Numbers[local_u8Counter-1] = 0;
    3920:	80 91 02 02 	lds	r24, 0x0202
    3924:	99 27       	eor	r25, r25
    3926:	87 fd       	sbrc	r24, 7
    3928:	90 95       	com	r25
    392a:	01 97       	sbiw	r24, 0x01	; 1
    392c:	fc 01       	movw	r30, r24
    392e:	e8 5f       	subi	r30, 0xF8	; 248
    3930:	fd 4f       	sbci	r31, 0xFD	; 253
    3932:	10 82       	st	Z, r1

			else
				continue;
		}

		for(u16 iterate=1; local_u8Counter>0; local_u8Counter--, iterate*=10)
    3934:	80 91 02 02 	lds	r24, 0x0202
    3938:	81 50       	subi	r24, 0x01	; 1
    393a:	80 93 02 02 	sts	0x0202, r24
    393e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3940:	98 89       	ldd	r25, Y+16	; 0x10
    3942:	9c 01       	movw	r18, r24
    3944:	22 0f       	add	r18, r18
    3946:	33 1f       	adc	r19, r19
    3948:	c9 01       	movw	r24, r18
    394a:	88 0f       	add	r24, r24
    394c:	99 1f       	adc	r25, r25
    394e:	88 0f       	add	r24, r24
    3950:	99 1f       	adc	r25, r25
    3952:	82 0f       	add	r24, r18
    3954:	93 1f       	adc	r25, r19
    3956:	98 8b       	std	Y+16, r25	; 0x10
    3958:	8f 87       	std	Y+15, r24	; 0x0f
    395a:	80 91 02 02 	lds	r24, 0x0202
    395e:	18 16       	cp	r1, r24
    3960:	0c f4       	brge	.+2      	; 0x3964 <SafeLock_vidChangePassword+0x1ea>
    3962:	be cf       	rjmp	.-132    	; 0x38e0 <SafeLock_vidChangePassword+0x166>
			local_u16Num2 += local_u8Numbers[local_u8Counter-1] * iterate;
			local_u8Numbers[local_u8Counter-1] = 0;
		}
	}

	if(local_u16Num1==local_u16Num2)
    3964:	20 91 03 02 	lds	r18, 0x0203
    3968:	30 91 04 02 	lds	r19, 0x0204
    396c:	80 91 05 02 	lds	r24, 0x0205
    3970:	90 91 06 02 	lds	r25, 0x0206
    3974:	28 17       	cp	r18, r24
    3976:	39 07       	cpc	r19, r25
    3978:	09 f0       	breq	.+2      	; 0x397c <SafeLock_vidChangePassword+0x202>
    397a:	76 c0       	rjmp	.+236    	; 0x3a68 <SafeLock_vidChangePassword+0x2ee>
	{
		LCD_vidCenterString("Password's changed!");
    397c:	81 e7       	ldi	r24, 0x71	; 113
    397e:	90 e0       	ldi	r25, 0x00	; 0
    3980:	0e 94 49 10 	call	0x2092	; 0x2092 <LCD_vidCenterString>
    3984:	80 e0       	ldi	r24, 0x00	; 0
    3986:	90 e0       	ldi	r25, 0x00	; 0
    3988:	aa e7       	ldi	r26, 0x7A	; 122
    398a:	b4 e4       	ldi	r27, 0x44	; 68
    398c:	8b 87       	std	Y+11, r24	; 0x0b
    398e:	9c 87       	std	Y+12, r25	; 0x0c
    3990:	ad 87       	std	Y+13, r26	; 0x0d
    3992:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3994:	6b 85       	ldd	r22, Y+11	; 0x0b
    3996:	7c 85       	ldd	r23, Y+12	; 0x0c
    3998:	8d 85       	ldd	r24, Y+13	; 0x0d
    399a:	9e 85       	ldd	r25, Y+14	; 0x0e
    399c:	20 e0       	ldi	r18, 0x00	; 0
    399e:	30 e0       	ldi	r19, 0x00	; 0
    39a0:	4a ef       	ldi	r20, 0xFA	; 250
    39a2:	54 e4       	ldi	r21, 0x44	; 68
    39a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39a8:	dc 01       	movw	r26, r24
    39aa:	cb 01       	movw	r24, r22
    39ac:	8f 83       	std	Y+7, r24	; 0x07
    39ae:	98 87       	std	Y+8, r25	; 0x08
    39b0:	a9 87       	std	Y+9, r26	; 0x09
    39b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39b4:	6f 81       	ldd	r22, Y+7	; 0x07
    39b6:	78 85       	ldd	r23, Y+8	; 0x08
    39b8:	89 85       	ldd	r24, Y+9	; 0x09
    39ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    39bc:	20 e0       	ldi	r18, 0x00	; 0
    39be:	30 e0       	ldi	r19, 0x00	; 0
    39c0:	40 e8       	ldi	r20, 0x80	; 128
    39c2:	5f e3       	ldi	r21, 0x3F	; 63
    39c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    39c8:	88 23       	and	r24, r24
    39ca:	2c f4       	brge	.+10     	; 0x39d6 <SafeLock_vidChangePassword+0x25c>
		__ticks = 1;
    39cc:	81 e0       	ldi	r24, 0x01	; 1
    39ce:	90 e0       	ldi	r25, 0x00	; 0
    39d0:	9e 83       	std	Y+6, r25	; 0x06
    39d2:	8d 83       	std	Y+5, r24	; 0x05
    39d4:	3f c0       	rjmp	.+126    	; 0x3a54 <SafeLock_vidChangePassword+0x2da>
	else if (__tmp > 65535)
    39d6:	6f 81       	ldd	r22, Y+7	; 0x07
    39d8:	78 85       	ldd	r23, Y+8	; 0x08
    39da:	89 85       	ldd	r24, Y+9	; 0x09
    39dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    39de:	20 e0       	ldi	r18, 0x00	; 0
    39e0:	3f ef       	ldi	r19, 0xFF	; 255
    39e2:	4f e7       	ldi	r20, 0x7F	; 127
    39e4:	57 e4       	ldi	r21, 0x47	; 71
    39e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    39ea:	18 16       	cp	r1, r24
    39ec:	4c f5       	brge	.+82     	; 0x3a40 <SafeLock_vidChangePassword+0x2c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    39f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    39f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    39f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    39f6:	20 e0       	ldi	r18, 0x00	; 0
    39f8:	30 e0       	ldi	r19, 0x00	; 0
    39fa:	40 e2       	ldi	r20, 0x20	; 32
    39fc:	51 e4       	ldi	r21, 0x41	; 65
    39fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a02:	dc 01       	movw	r26, r24
    3a04:	cb 01       	movw	r24, r22
    3a06:	bc 01       	movw	r22, r24
    3a08:	cd 01       	movw	r24, r26
    3a0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a0e:	dc 01       	movw	r26, r24
    3a10:	cb 01       	movw	r24, r22
    3a12:	9e 83       	std	Y+6, r25	; 0x06
    3a14:	8d 83       	std	Y+5, r24	; 0x05
    3a16:	0f c0       	rjmp	.+30     	; 0x3a36 <SafeLock_vidChangePassword+0x2bc>
    3a18:	88 ec       	ldi	r24, 0xC8	; 200
    3a1a:	90 e0       	ldi	r25, 0x00	; 0
    3a1c:	9c 83       	std	Y+4, r25	; 0x04
    3a1e:	8b 83       	std	Y+3, r24	; 0x03
    3a20:	8b 81       	ldd	r24, Y+3	; 0x03
    3a22:	9c 81       	ldd	r25, Y+4	; 0x04
    3a24:	01 97       	sbiw	r24, 0x01	; 1
    3a26:	f1 f7       	brne	.-4      	; 0x3a24 <SafeLock_vidChangePassword+0x2aa>
    3a28:	9c 83       	std	Y+4, r25	; 0x04
    3a2a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a2c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a2e:	9e 81       	ldd	r25, Y+6	; 0x06
    3a30:	01 97       	sbiw	r24, 0x01	; 1
    3a32:	9e 83       	std	Y+6, r25	; 0x06
    3a34:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a36:	8d 81       	ldd	r24, Y+5	; 0x05
    3a38:	9e 81       	ldd	r25, Y+6	; 0x06
    3a3a:	00 97       	sbiw	r24, 0x00	; 0
    3a3c:	69 f7       	brne	.-38     	; 0x3a18 <SafeLock_vidChangePassword+0x29e>
    3a3e:	14 c0       	rjmp	.+40     	; 0x3a68 <SafeLock_vidChangePassword+0x2ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a40:	6f 81       	ldd	r22, Y+7	; 0x07
    3a42:	78 85       	ldd	r23, Y+8	; 0x08
    3a44:	89 85       	ldd	r24, Y+9	; 0x09
    3a46:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a4c:	dc 01       	movw	r26, r24
    3a4e:	cb 01       	movw	r24, r22
    3a50:	9e 83       	std	Y+6, r25	; 0x06
    3a52:	8d 83       	std	Y+5, r24	; 0x05
    3a54:	8d 81       	ldd	r24, Y+5	; 0x05
    3a56:	9e 81       	ldd	r25, Y+6	; 0x06
    3a58:	9a 83       	std	Y+2, r25	; 0x02
    3a5a:	89 83       	std	Y+1, r24	; 0x01
    3a5c:	89 81       	ldd	r24, Y+1	; 0x01
    3a5e:	9a 81       	ldd	r25, Y+2	; 0x02
    3a60:	01 97       	sbiw	r24, 0x01	; 1
    3a62:	f1 f7       	brne	.-4      	; 0x3a60 <SafeLock_vidChangePassword+0x2e6>
    3a64:	9a 83       	std	Y+2, r25	; 0x02
    3a66:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
	}
}
    3a68:	62 96       	adiw	r28, 0x12	; 18
    3a6a:	0f b6       	in	r0, 0x3f	; 63
    3a6c:	f8 94       	cli
    3a6e:	de bf       	out	0x3e, r29	; 62
    3a70:	0f be       	out	0x3f, r0	; 63
    3a72:	cd bf       	out	0x3d, r28	; 61
    3a74:	cf 91       	pop	r28
    3a76:	df 91       	pop	r29
    3a78:	1f 91       	pop	r17
    3a7a:	0f 91       	pop	r16
    3a7c:	08 95       	ret

00003a7e <SafeLock_vidOpenSystem>:

void SafeLock_vidOpenSystem(void)
{
    3a7e:	df 93       	push	r29
    3a80:	cf 93       	push	r28
    3a82:	cd b7       	in	r28, 0x3d	; 61
    3a84:	de b7       	in	r29, 0x3e	; 62
	LCD_vidClearDisplay();
    3a86:	0e 94 79 12 	call	0x24f2	; 0x24f2 <LCD_vidClearDisplay>
	LCD_vidCenterString("WELCOME", 0);
    3a8a:	85 e8       	ldi	r24, 0x85	; 133
    3a8c:	90 e0       	ldi	r25, 0x00	; 0
    3a8e:	60 e0       	ldi	r22, 0x00	; 0
    3a90:	70 e0       	ldi	r23, 0x00	; 0
    3a92:	0e 94 49 10 	call	0x2092	; 0x2092 <LCD_vidCenterString>
	DIO_u8setPinVal(LED_PORT, RED_LED, LOW);
    3a96:	81 e0       	ldi	r24, 0x01	; 1
    3a98:	62 e0       	ldi	r22, 0x02	; 2
    3a9a:	40 e0       	ldi	r20, 0x00	; 0
    3a9c:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_u8setPinVal>
	DIO_u8setPinVal(LED_PORT, GREEN_LED, HIGH);
    3aa0:	81 e0       	ldi	r24, 0x01	; 1
    3aa2:	63 e0       	ldi	r22, 0x03	; 3
    3aa4:	41 e0       	ldi	r20, 0x01	; 1
    3aa6:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_u8setPinVal>
	DCMotor_vidTurnRight(2);
    3aaa:	82 e0       	ldi	r24, 0x02	; 2
    3aac:	0e 94 55 18 	call	0x30aa	; 0x30aa <DCMotor_vidTurnRight>
}
    3ab0:	cf 91       	pop	r28
    3ab2:	df 91       	pop	r29
    3ab4:	08 95       	ret

00003ab6 <SafeLock_vidCloseSystem>:

void SafeLock_vidCloseSystem(void)
{
    3ab6:	df 93       	push	r29
    3ab8:	cf 93       	push	r28
    3aba:	cd b7       	in	r28, 0x3d	; 61
    3abc:	de b7       	in	r29, 0x3e	; 62
	LCD_vidClearDisplay();
    3abe:	0e 94 79 12 	call	0x24f2	; 0x24f2 <LCD_vidClearDisplay>
	LCD_vidCenterString("Closing system!", 0);
    3ac2:	8d e8       	ldi	r24, 0x8D	; 141
    3ac4:	90 e0       	ldi	r25, 0x00	; 0
    3ac6:	60 e0       	ldi	r22, 0x00	; 0
    3ac8:	70 e0       	ldi	r23, 0x00	; 0
    3aca:	0e 94 49 10 	call	0x2092	; 0x2092 <LCD_vidCenterString>
	DIO_u8setPinVal(LED_PORT, RED_LED, HIGH);
    3ace:	81 e0       	ldi	r24, 0x01	; 1
    3ad0:	62 e0       	ldi	r22, 0x02	; 2
    3ad2:	41 e0       	ldi	r20, 0x01	; 1
    3ad4:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_u8setPinVal>
	DIO_u8setPinVal(LED_PORT, GREEN_LED, LOW);
    3ad8:	81 e0       	ldi	r24, 0x01	; 1
    3ada:	63 e0       	ldi	r22, 0x03	; 3
    3adc:	40 e0       	ldi	r20, 0x00	; 0
    3ade:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_u8setPinVal>
	DCMotor_vidTurnLeft(2);
    3ae2:	82 e0       	ldi	r24, 0x02	; 2
    3ae4:	0e 94 02 19 	call	0x3204	; 0x3204 <DCMotor_vidTurnLeft>
}
    3ae8:	cf 91       	pop	r28
    3aea:	df 91       	pop	r29
    3aec:	08 95       	ret

00003aee <SafeLock_vidLogin>:

void SafeLock_vidLogin()
{
    3aee:	0f 93       	push	r16
    3af0:	1f 93       	push	r17
    3af2:	df 93       	push	r29
    3af4:	cf 93       	push	r28
    3af6:	cd b7       	in	r28, 0x3d	; 61
    3af8:	de b7       	in	r29, 0x3e	; 62
    3afa:	6e 97       	sbiw	r28, 0x1e	; 30
    3afc:	0f b6       	in	r0, 0x3f	; 63
    3afe:	f8 94       	cli
    3b00:	de bf       	out	0x3e, r29	; 62
    3b02:	0f be       	out	0x3f, r0	; 63
    3b04:	cd bf       	out	0x3d, r28	; 61
	while(1)
	{
		LCD_vidClearDisplay();
    3b06:	0e 94 79 12 	call	0x24f2	; 0x24f2 <LCD_vidClearDisplay>

		LCD_vidCenterString("Enter Password!", 0);
    3b0a:	8d e9       	ldi	r24, 0x9D	; 157
    3b0c:	90 e0       	ldi	r25, 0x00	; 0
    3b0e:	60 e0       	ldi	r22, 0x00	; 0
    3b10:	70 e0       	ldi	r23, 0x00	; 0
    3b12:	0e 94 49 10 	call	0x2092	; 0x2092 <LCD_vidCenterString>

		LCD_vidGoToXY(6, 1);
    3b16:	86 e0       	ldi	r24, 0x06	; 6
    3b18:	61 e0       	ldi	r22, 0x01	; 1
    3b1a:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_vidGoToXY>
    3b1e:	1a c0       	rjmp	.+52     	; 0x3b54 <SafeLock_vidLogin+0x66>

		while((KeyPad_u8Pressed()!='=')&&(local_u8Counter<4))
		{
			if((KeyPad_u8Pressed()>=0)&&(KeyPad_u8Pressed()<10))
    3b20:	0e 94 f6 16 	call	0x2dec	; 0x2dec <KeyPad_u8Pressed>
    3b24:	0e 94 f6 16 	call	0x2dec	; 0x2dec <KeyPad_u8Pressed>
    3b28:	8a 30       	cpi	r24, 0x0A	; 10
    3b2a:	a0 f4       	brcc	.+40     	; 0x3b54 <SafeLock_vidLogin+0x66>
			{
				LCD_u8sendData('*');
    3b2c:	8a e2       	ldi	r24, 0x2A	; 42
    3b2e:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <LCD_u8sendData>
				local_u8Numbers[local_u8Counter] = KeyPad_u8Pressed();
    3b32:	80 91 02 02 	lds	r24, 0x0202
    3b36:	08 2f       	mov	r16, r24
    3b38:	11 27       	eor	r17, r17
    3b3a:	07 fd       	sbrc	r16, 7
    3b3c:	10 95       	com	r17
    3b3e:	0e 94 f6 16 	call	0x2dec	; 0x2dec <KeyPad_u8Pressed>
    3b42:	f8 01       	movw	r30, r16
    3b44:	e8 5f       	subi	r30, 0xF8	; 248
    3b46:	fd 4f       	sbci	r31, 0xFD	; 253
    3b48:	80 83       	st	Z, r24
				local_u8Counter++;
    3b4a:	80 91 02 02 	lds	r24, 0x0202
    3b4e:	8f 5f       	subi	r24, 0xFF	; 255
    3b50:	80 93 02 02 	sts	0x0202, r24

		LCD_vidCenterString("Enter Password!", 0);

		LCD_vidGoToXY(6, 1);

		while((KeyPad_u8Pressed()!='=')&&(local_u8Counter<4))
    3b54:	0e 94 f6 16 	call	0x2dec	; 0x2dec <KeyPad_u8Pressed>
    3b58:	8d 33       	cpi	r24, 0x3D	; 61
    3b5a:	21 f0       	breq	.+8      	; 0x3b64 <SafeLock_vidLogin+0x76>
    3b5c:	80 91 02 02 	lds	r24, 0x0202
    3b60:	84 30       	cpi	r24, 0x04	; 4
    3b62:	f4 f2       	brlt	.-68     	; 0x3b20 <SafeLock_vidLogin+0x32>

			else
				continue;
		}

		while(KeyPad_u8Pressed() != '=');
    3b64:	0e 94 f6 16 	call	0x2dec	; 0x2dec <KeyPad_u8Pressed>
    3b68:	8d 33       	cpi	r24, 0x3D	; 61
    3b6a:	e1 f7       	brne	.-8      	; 0x3b64 <SafeLock_vidLogin+0x76>

		if(KeyPad_u8Pressed() == '=')
    3b6c:	0e 94 f6 16 	call	0x2dec	; 0x2dec <KeyPad_u8Pressed>
    3b70:	8d 33       	cpi	r24, 0x3D	; 61
    3b72:	09 f0       	breq	.+2      	; 0x3b76 <SafeLock_vidLogin+0x88>
    3b74:	47 c0       	rjmp	.+142    	; 0x3c04 <SafeLock_vidLogin+0x116>
		{
			for(u16 iterate=1; local_u8Counter>0; local_u8Counter--, iterate*=10)
    3b76:	81 e0       	ldi	r24, 0x01	; 1
    3b78:	90 e0       	ldi	r25, 0x00	; 0
    3b7a:	9e 8f       	std	Y+30, r25	; 0x1e
    3b7c:	8d 8f       	std	Y+29, r24	; 0x1d
    3b7e:	3d c0       	rjmp	.+122    	; 0x3bfa <SafeLock_vidLogin+0x10c>
			{
				local_u16Num1 += local_u8Numbers[local_u8Counter-1] * iterate;
    3b80:	80 91 02 02 	lds	r24, 0x0202
    3b84:	99 27       	eor	r25, r25
    3b86:	87 fd       	sbrc	r24, 7
    3b88:	90 95       	com	r25
    3b8a:	01 97       	sbiw	r24, 0x01	; 1
    3b8c:	fc 01       	movw	r30, r24
    3b8e:	e8 5f       	subi	r30, 0xF8	; 248
    3b90:	fd 4f       	sbci	r31, 0xFD	; 253
    3b92:	80 81       	ld	r24, Z
    3b94:	28 2f       	mov	r18, r24
    3b96:	30 e0       	ldi	r19, 0x00	; 0
    3b98:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b9a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3b9c:	a9 01       	movw	r20, r18
    3b9e:	48 9f       	mul	r20, r24
    3ba0:	90 01       	movw	r18, r0
    3ba2:	49 9f       	mul	r20, r25
    3ba4:	30 0d       	add	r19, r0
    3ba6:	58 9f       	mul	r21, r24
    3ba8:	30 0d       	add	r19, r0
    3baa:	11 24       	eor	r1, r1
    3bac:	80 91 03 02 	lds	r24, 0x0203
    3bb0:	90 91 04 02 	lds	r25, 0x0204
    3bb4:	82 0f       	add	r24, r18
    3bb6:	93 1f       	adc	r25, r19
    3bb8:	90 93 04 02 	sts	0x0204, r25
    3bbc:	80 93 03 02 	sts	0x0203, r24
				local_u8Numbers[local_u8Counter-1] = 0;
    3bc0:	80 91 02 02 	lds	r24, 0x0202
    3bc4:	99 27       	eor	r25, r25
    3bc6:	87 fd       	sbrc	r24, 7
    3bc8:	90 95       	com	r25
    3bca:	01 97       	sbiw	r24, 0x01	; 1
    3bcc:	fc 01       	movw	r30, r24
    3bce:	e8 5f       	subi	r30, 0xF8	; 248
    3bd0:	fd 4f       	sbci	r31, 0xFD	; 253
    3bd2:	10 82       	st	Z, r1

		while(KeyPad_u8Pressed() != '=');

		if(KeyPad_u8Pressed() == '=')
		{
			for(u16 iterate=1; local_u8Counter>0; local_u8Counter--, iterate*=10)
    3bd4:	80 91 02 02 	lds	r24, 0x0202
    3bd8:	81 50       	subi	r24, 0x01	; 1
    3bda:	80 93 02 02 	sts	0x0202, r24
    3bde:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3be0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3be2:	9c 01       	movw	r18, r24
    3be4:	22 0f       	add	r18, r18
    3be6:	33 1f       	adc	r19, r19
    3be8:	c9 01       	movw	r24, r18
    3bea:	88 0f       	add	r24, r24
    3bec:	99 1f       	adc	r25, r25
    3bee:	88 0f       	add	r24, r24
    3bf0:	99 1f       	adc	r25, r25
    3bf2:	82 0f       	add	r24, r18
    3bf4:	93 1f       	adc	r25, r19
    3bf6:	9e 8f       	std	Y+30, r25	; 0x1e
    3bf8:	8d 8f       	std	Y+29, r24	; 0x1d
    3bfa:	80 91 02 02 	lds	r24, 0x0202
    3bfe:	18 16       	cp	r1, r24
    3c00:	0c f4       	brge	.+2      	; 0x3c04 <SafeLock_vidLogin+0x116>
    3c02:	be cf       	rjmp	.-132    	; 0x3b80 <SafeLock_vidLogin+0x92>
				local_u8Numbers[local_u8Counter-1] = 0;
			}
		}


		if(local_u16Num1 == Password)
    3c04:	20 91 03 02 	lds	r18, 0x0203
    3c08:	30 91 04 02 	lds	r19, 0x0204
    3c0c:	80 91 ff 01 	lds	r24, 0x01FF
    3c10:	90 91 00 02 	lds	r25, 0x0200
    3c14:	28 17       	cp	r18, r24
    3c16:	39 07       	cpc	r19, r25
    3c18:	c9 f4       	brne	.+50     	; 0x3c4c <SafeLock_vidLogin+0x15e>
		{
			SafeLock_vidOpenSystem();
    3c1a:	0e 94 3f 1d 	call	0x3a7e	; 0x3a7e <SafeLock_vidOpenSystem>
			while((KeyPad_u8Pressed() != 'c')||(KeyPad_u8Pressed() != '/'));
    3c1e:	0e 94 f6 16 	call	0x2dec	; 0x2dec <KeyPad_u8Pressed>
    3c22:	83 36       	cpi	r24, 0x63	; 99
    3c24:	e1 f7       	brne	.-8      	; 0x3c1e <SafeLock_vidLogin+0x130>
    3c26:	0e 94 f6 16 	call	0x2dec	; 0x2dec <KeyPad_u8Pressed>
    3c2a:	8f 32       	cpi	r24, 0x2F	; 47
    3c2c:	c1 f7       	brne	.-16     	; 0x3c1e <SafeLock_vidLogin+0x130>


			if(KeyPad_u8Pressed() == '/')
    3c2e:	0e 94 f6 16 	call	0x2dec	; 0x2dec <KeyPad_u8Pressed>
    3c32:	8f 32       	cpi	r24, 0x2F	; 47
    3c34:	19 f4       	brne	.+6      	; 0x3c3c <SafeLock_vidLogin+0x14e>
			{
				SafeLock_vidChangePassword();
    3c36:	0e 94 bd 1b 	call	0x377a	; 0x377a <SafeLock_vidChangePassword>
    3c3a:	65 cf       	rjmp	.-310    	; 0x3b06 <SafeLock_vidLogin+0x18>
			}

			else if(KeyPad_u8Pressed() == 'c')
    3c3c:	0e 94 f6 16 	call	0x2dec	; 0x2dec <KeyPad_u8Pressed>
    3c40:	83 36       	cpi	r24, 0x63	; 99
    3c42:	09 f0       	breq	.+2      	; 0x3c46 <SafeLock_vidLogin+0x158>
    3c44:	60 cf       	rjmp	.-320    	; 0x3b06 <SafeLock_vidLogin+0x18>
			{
				SafeLock_vidCloseSystem();
    3c46:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <SafeLock_vidCloseSystem>
    3c4a:	5d cf       	rjmp	.-326    	; 0x3b06 <SafeLock_vidLogin+0x18>
				continue;
			}
		}

		else if(local_u16Num1 != Password)
    3c4c:	20 91 03 02 	lds	r18, 0x0203
    3c50:	30 91 04 02 	lds	r19, 0x0204
    3c54:	80 91 ff 01 	lds	r24, 0x01FF
    3c58:	90 91 00 02 	lds	r25, 0x0200
    3c5c:	28 17       	cp	r18, r24
    3c5e:	39 07       	cpc	r19, r25
    3c60:	09 f4       	brne	.+2      	; 0x3c64 <SafeLock_vidLogin+0x176>
    3c62:	51 cf       	rjmp	.-350    	; 0x3b06 <SafeLock_vidLogin+0x18>
		{
			if(local_u8TrialsCounter<3)
    3c64:	80 91 07 02 	lds	r24, 0x0207
    3c68:	83 30       	cpi	r24, 0x03	; 3
    3c6a:	08 f0       	brcs	.+2      	; 0x3c6e <SafeLock_vidLogin+0x180>
    3c6c:	80 c0       	rjmp	.+256    	; 0x3d6e <SafeLock_vidLogin+0x280>
			{
			LCD_vidGlitchString("Wrong password!");
    3c6e:	8d ea       	ldi	r24, 0xAD	; 173
    3c70:	90 e0       	ldi	r25, 0x00	; 0
    3c72:	0e 94 59 13 	call	0x26b2	; 0x26b2 <LCD_vidGlitchString>
    3c76:	80 e0       	ldi	r24, 0x00	; 0
    3c78:	90 e0       	ldi	r25, 0x00	; 0
    3c7a:	aa e7       	ldi	r26, 0x7A	; 122
    3c7c:	b4 e4       	ldi	r27, 0x44	; 68
    3c7e:	89 8f       	std	Y+25, r24	; 0x19
    3c80:	9a 8f       	std	Y+26, r25	; 0x1a
    3c82:	ab 8f       	std	Y+27, r26	; 0x1b
    3c84:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c86:	69 8d       	ldd	r22, Y+25	; 0x19
    3c88:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c8e:	20 e0       	ldi	r18, 0x00	; 0
    3c90:	30 e0       	ldi	r19, 0x00	; 0
    3c92:	4a ef       	ldi	r20, 0xFA	; 250
    3c94:	54 e4       	ldi	r21, 0x44	; 68
    3c96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c9a:	dc 01       	movw	r26, r24
    3c9c:	cb 01       	movw	r24, r22
    3c9e:	8d 8b       	std	Y+21, r24	; 0x15
    3ca0:	9e 8b       	std	Y+22, r25	; 0x16
    3ca2:	af 8b       	std	Y+23, r26	; 0x17
    3ca4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3ca6:	6d 89       	ldd	r22, Y+21	; 0x15
    3ca8:	7e 89       	ldd	r23, Y+22	; 0x16
    3caa:	8f 89       	ldd	r24, Y+23	; 0x17
    3cac:	98 8d       	ldd	r25, Y+24	; 0x18
    3cae:	20 e0       	ldi	r18, 0x00	; 0
    3cb0:	30 e0       	ldi	r19, 0x00	; 0
    3cb2:	40 e8       	ldi	r20, 0x80	; 128
    3cb4:	5f e3       	ldi	r21, 0x3F	; 63
    3cb6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3cba:	88 23       	and	r24, r24
    3cbc:	2c f4       	brge	.+10     	; 0x3cc8 <SafeLock_vidLogin+0x1da>
		__ticks = 1;
    3cbe:	81 e0       	ldi	r24, 0x01	; 1
    3cc0:	90 e0       	ldi	r25, 0x00	; 0
    3cc2:	9c 8b       	std	Y+20, r25	; 0x14
    3cc4:	8b 8b       	std	Y+19, r24	; 0x13
    3cc6:	3f c0       	rjmp	.+126    	; 0x3d46 <SafeLock_vidLogin+0x258>
	else if (__tmp > 65535)
    3cc8:	6d 89       	ldd	r22, Y+21	; 0x15
    3cca:	7e 89       	ldd	r23, Y+22	; 0x16
    3ccc:	8f 89       	ldd	r24, Y+23	; 0x17
    3cce:	98 8d       	ldd	r25, Y+24	; 0x18
    3cd0:	20 e0       	ldi	r18, 0x00	; 0
    3cd2:	3f ef       	ldi	r19, 0xFF	; 255
    3cd4:	4f e7       	ldi	r20, 0x7F	; 127
    3cd6:	57 e4       	ldi	r21, 0x47	; 71
    3cd8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3cdc:	18 16       	cp	r1, r24
    3cde:	4c f5       	brge	.+82     	; 0x3d32 <SafeLock_vidLogin+0x244>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ce0:	69 8d       	ldd	r22, Y+25	; 0x19
    3ce2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ce4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ce6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ce8:	20 e0       	ldi	r18, 0x00	; 0
    3cea:	30 e0       	ldi	r19, 0x00	; 0
    3cec:	40 e2       	ldi	r20, 0x20	; 32
    3cee:	51 e4       	ldi	r21, 0x41	; 65
    3cf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cf4:	dc 01       	movw	r26, r24
    3cf6:	cb 01       	movw	r24, r22
    3cf8:	bc 01       	movw	r22, r24
    3cfa:	cd 01       	movw	r24, r26
    3cfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d00:	dc 01       	movw	r26, r24
    3d02:	cb 01       	movw	r24, r22
    3d04:	9c 8b       	std	Y+20, r25	; 0x14
    3d06:	8b 8b       	std	Y+19, r24	; 0x13
    3d08:	0f c0       	rjmp	.+30     	; 0x3d28 <SafeLock_vidLogin+0x23a>
    3d0a:	88 ec       	ldi	r24, 0xC8	; 200
    3d0c:	90 e0       	ldi	r25, 0x00	; 0
    3d0e:	9a 8b       	std	Y+18, r25	; 0x12
    3d10:	89 8b       	std	Y+17, r24	; 0x11
    3d12:	89 89       	ldd	r24, Y+17	; 0x11
    3d14:	9a 89       	ldd	r25, Y+18	; 0x12
    3d16:	01 97       	sbiw	r24, 0x01	; 1
    3d18:	f1 f7       	brne	.-4      	; 0x3d16 <SafeLock_vidLogin+0x228>
    3d1a:	9a 8b       	std	Y+18, r25	; 0x12
    3d1c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d1e:	8b 89       	ldd	r24, Y+19	; 0x13
    3d20:	9c 89       	ldd	r25, Y+20	; 0x14
    3d22:	01 97       	sbiw	r24, 0x01	; 1
    3d24:	9c 8b       	std	Y+20, r25	; 0x14
    3d26:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d28:	8b 89       	ldd	r24, Y+19	; 0x13
    3d2a:	9c 89       	ldd	r25, Y+20	; 0x14
    3d2c:	00 97       	sbiw	r24, 0x00	; 0
    3d2e:	69 f7       	brne	.-38     	; 0x3d0a <SafeLock_vidLogin+0x21c>
    3d30:	14 c0       	rjmp	.+40     	; 0x3d5a <SafeLock_vidLogin+0x26c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d32:	6d 89       	ldd	r22, Y+21	; 0x15
    3d34:	7e 89       	ldd	r23, Y+22	; 0x16
    3d36:	8f 89       	ldd	r24, Y+23	; 0x17
    3d38:	98 8d       	ldd	r25, Y+24	; 0x18
    3d3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d3e:	dc 01       	movw	r26, r24
    3d40:	cb 01       	movw	r24, r22
    3d42:	9c 8b       	std	Y+20, r25	; 0x14
    3d44:	8b 8b       	std	Y+19, r24	; 0x13
    3d46:	8b 89       	ldd	r24, Y+19	; 0x13
    3d48:	9c 89       	ldd	r25, Y+20	; 0x14
    3d4a:	98 8b       	std	Y+16, r25	; 0x10
    3d4c:	8f 87       	std	Y+15, r24	; 0x0f
    3d4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d50:	98 89       	ldd	r25, Y+16	; 0x10
    3d52:	01 97       	sbiw	r24, 0x01	; 1
    3d54:	f1 f7       	brne	.-4      	; 0x3d52 <SafeLock_vidLogin+0x264>
    3d56:	98 8b       	std	Y+16, r25	; 0x10
    3d58:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);
			LCD_vidCenterString("Try again");
    3d5a:	8d eb       	ldi	r24, 0xBD	; 189
    3d5c:	90 e0       	ldi	r25, 0x00	; 0
    3d5e:	0e 94 49 10 	call	0x2092	; 0x2092 <LCD_vidCenterString>
			local_u8TrialsCounter++;
    3d62:	80 91 07 02 	lds	r24, 0x0207
    3d66:	8f 5f       	subi	r24, 0xFF	; 255
    3d68:	80 93 07 02 	sts	0x0207, r24
    3d6c:	cc ce       	rjmp	.-616    	; 0x3b06 <SafeLock_vidLogin+0x18>
			}

			else
			{
				LCD_vidGlitchString("Too much trials!");
    3d6e:	87 ec       	ldi	r24, 0xC7	; 199
    3d70:	90 e0       	ldi	r25, 0x00	; 0
    3d72:	0e 94 59 13 	call	0x26b2	; 0x26b2 <LCD_vidGlitchString>
    3d76:	80 e0       	ldi	r24, 0x00	; 0
    3d78:	90 e0       	ldi	r25, 0x00	; 0
    3d7a:	aa ef       	ldi	r26, 0xFA	; 250
    3d7c:	b4 e4       	ldi	r27, 0x44	; 68
    3d7e:	8b 87       	std	Y+11, r24	; 0x0b
    3d80:	9c 87       	std	Y+12, r25	; 0x0c
    3d82:	ad 87       	std	Y+13, r26	; 0x0d
    3d84:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d86:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d88:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d8e:	20 e0       	ldi	r18, 0x00	; 0
    3d90:	30 e0       	ldi	r19, 0x00	; 0
    3d92:	4a ef       	ldi	r20, 0xFA	; 250
    3d94:	54 e4       	ldi	r21, 0x44	; 68
    3d96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d9a:	dc 01       	movw	r26, r24
    3d9c:	cb 01       	movw	r24, r22
    3d9e:	8f 83       	std	Y+7, r24	; 0x07
    3da0:	98 87       	std	Y+8, r25	; 0x08
    3da2:	a9 87       	std	Y+9, r26	; 0x09
    3da4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3da6:	6f 81       	ldd	r22, Y+7	; 0x07
    3da8:	78 85       	ldd	r23, Y+8	; 0x08
    3daa:	89 85       	ldd	r24, Y+9	; 0x09
    3dac:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dae:	20 e0       	ldi	r18, 0x00	; 0
    3db0:	30 e0       	ldi	r19, 0x00	; 0
    3db2:	40 e8       	ldi	r20, 0x80	; 128
    3db4:	5f e3       	ldi	r21, 0x3F	; 63
    3db6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3dba:	88 23       	and	r24, r24
    3dbc:	2c f4       	brge	.+10     	; 0x3dc8 <SafeLock_vidLogin+0x2da>
		__ticks = 1;
    3dbe:	81 e0       	ldi	r24, 0x01	; 1
    3dc0:	90 e0       	ldi	r25, 0x00	; 0
    3dc2:	9e 83       	std	Y+6, r25	; 0x06
    3dc4:	8d 83       	std	Y+5, r24	; 0x05
    3dc6:	3f c0       	rjmp	.+126    	; 0x3e46 <SafeLock_vidLogin+0x358>
	else if (__tmp > 65535)
    3dc8:	6f 81       	ldd	r22, Y+7	; 0x07
    3dca:	78 85       	ldd	r23, Y+8	; 0x08
    3dcc:	89 85       	ldd	r24, Y+9	; 0x09
    3dce:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dd0:	20 e0       	ldi	r18, 0x00	; 0
    3dd2:	3f ef       	ldi	r19, 0xFF	; 255
    3dd4:	4f e7       	ldi	r20, 0x7F	; 127
    3dd6:	57 e4       	ldi	r21, 0x47	; 71
    3dd8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ddc:	18 16       	cp	r1, r24
    3dde:	4c f5       	brge	.+82     	; 0x3e32 <SafeLock_vidLogin+0x344>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3de0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3de2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3de4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3de6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3de8:	20 e0       	ldi	r18, 0x00	; 0
    3dea:	30 e0       	ldi	r19, 0x00	; 0
    3dec:	40 e2       	ldi	r20, 0x20	; 32
    3dee:	51 e4       	ldi	r21, 0x41	; 65
    3df0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3df4:	dc 01       	movw	r26, r24
    3df6:	cb 01       	movw	r24, r22
    3df8:	bc 01       	movw	r22, r24
    3dfa:	cd 01       	movw	r24, r26
    3dfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e00:	dc 01       	movw	r26, r24
    3e02:	cb 01       	movw	r24, r22
    3e04:	9e 83       	std	Y+6, r25	; 0x06
    3e06:	8d 83       	std	Y+5, r24	; 0x05
    3e08:	0f c0       	rjmp	.+30     	; 0x3e28 <SafeLock_vidLogin+0x33a>
    3e0a:	88 ec       	ldi	r24, 0xC8	; 200
    3e0c:	90 e0       	ldi	r25, 0x00	; 0
    3e0e:	9c 83       	std	Y+4, r25	; 0x04
    3e10:	8b 83       	std	Y+3, r24	; 0x03
    3e12:	8b 81       	ldd	r24, Y+3	; 0x03
    3e14:	9c 81       	ldd	r25, Y+4	; 0x04
    3e16:	01 97       	sbiw	r24, 0x01	; 1
    3e18:	f1 f7       	brne	.-4      	; 0x3e16 <SafeLock_vidLogin+0x328>
    3e1a:	9c 83       	std	Y+4, r25	; 0x04
    3e1c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e1e:	8d 81       	ldd	r24, Y+5	; 0x05
    3e20:	9e 81       	ldd	r25, Y+6	; 0x06
    3e22:	01 97       	sbiw	r24, 0x01	; 1
    3e24:	9e 83       	std	Y+6, r25	; 0x06
    3e26:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e28:	8d 81       	ldd	r24, Y+5	; 0x05
    3e2a:	9e 81       	ldd	r25, Y+6	; 0x06
    3e2c:	00 97       	sbiw	r24, 0x00	; 0
    3e2e:	69 f7       	brne	.-38     	; 0x3e0a <SafeLock_vidLogin+0x31c>
    3e30:	14 c0       	rjmp	.+40     	; 0x3e5a <SafeLock_vidLogin+0x36c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e32:	6f 81       	ldd	r22, Y+7	; 0x07
    3e34:	78 85       	ldd	r23, Y+8	; 0x08
    3e36:	89 85       	ldd	r24, Y+9	; 0x09
    3e38:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e3e:	dc 01       	movw	r26, r24
    3e40:	cb 01       	movw	r24, r22
    3e42:	9e 83       	std	Y+6, r25	; 0x06
    3e44:	8d 83       	std	Y+5, r24	; 0x05
    3e46:	8d 81       	ldd	r24, Y+5	; 0x05
    3e48:	9e 81       	ldd	r25, Y+6	; 0x06
    3e4a:	9a 83       	std	Y+2, r25	; 0x02
    3e4c:	89 83       	std	Y+1, r24	; 0x01
    3e4e:	89 81       	ldd	r24, Y+1	; 0x01
    3e50:	9a 81       	ldd	r25, Y+2	; 0x02
    3e52:	01 97       	sbiw	r24, 0x01	; 1
    3e54:	f1 f7       	brne	.-4      	; 0x3e52 <SafeLock_vidLogin+0x364>
    3e56:	9a 83       	std	Y+2, r25	; 0x02
    3e58:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(2000);
				LCD_vidGlitchString("System Locked!");
    3e5a:	88 ed       	ldi	r24, 0xD8	; 216
    3e5c:	90 e0       	ldi	r25, 0x00	; 0
    3e5e:	0e 94 59 13 	call	0x26b2	; 0x26b2 <LCD_vidGlitchString>
    3e62:	ff cf       	rjmp	.-2      	; 0x3e62 <SafeLock_vidLogin+0x374>

00003e64 <main>:
#include "../HAL/Buzzer/Buzzer_int.h"
#include "../HAL/LCD/LCD_int.h"
#include "SafeLock/SafeLock_int.h"

void main(void)
{
    3e64:	df 93       	push	r29
    3e66:	cf 93       	push	r28
    3e68:	cd b7       	in	r28, 0x3d	; 61
    3e6a:	de b7       	in	r29, 0x3e	; 62
	SafeLock_vidInit();
    3e6c:	0e 94 9a 1b 	call	0x3734	; 0x3734 <SafeLock_vidInit>

	SafeLock_vidLogin();
    3e70:	0e 94 77 1d 	call	0x3aee	; 0x3aee <SafeLock_vidLogin>
}
    3e74:	cf 91       	pop	r28
    3e76:	df 91       	pop	r29
    3e78:	08 95       	ret

00003e7a <__divmodhi4>:
    3e7a:	97 fb       	bst	r25, 7
    3e7c:	09 2e       	mov	r0, r25
    3e7e:	07 26       	eor	r0, r23
    3e80:	0a d0       	rcall	.+20     	; 0x3e96 <__divmodhi4_neg1>
    3e82:	77 fd       	sbrc	r23, 7
    3e84:	04 d0       	rcall	.+8      	; 0x3e8e <__divmodhi4_neg2>
    3e86:	27 d0       	rcall	.+78     	; 0x3ed6 <__udivmodhi4>
    3e88:	06 d0       	rcall	.+12     	; 0x3e96 <__divmodhi4_neg1>
    3e8a:	00 20       	and	r0, r0
    3e8c:	1a f4       	brpl	.+6      	; 0x3e94 <__divmodhi4_exit>

00003e8e <__divmodhi4_neg2>:
    3e8e:	70 95       	com	r23
    3e90:	61 95       	neg	r22
    3e92:	7f 4f       	sbci	r23, 0xFF	; 255

00003e94 <__divmodhi4_exit>:
    3e94:	08 95       	ret

00003e96 <__divmodhi4_neg1>:
    3e96:	f6 f7       	brtc	.-4      	; 0x3e94 <__divmodhi4_exit>
    3e98:	90 95       	com	r25
    3e9a:	81 95       	neg	r24
    3e9c:	9f 4f       	sbci	r25, 0xFF	; 255
    3e9e:	08 95       	ret

00003ea0 <__divmodsi4>:
    3ea0:	97 fb       	bst	r25, 7
    3ea2:	09 2e       	mov	r0, r25
    3ea4:	05 26       	eor	r0, r21
    3ea6:	0e d0       	rcall	.+28     	; 0x3ec4 <__divmodsi4_neg1>
    3ea8:	57 fd       	sbrc	r21, 7
    3eaa:	04 d0       	rcall	.+8      	; 0x3eb4 <__divmodsi4_neg2>
    3eac:	28 d0       	rcall	.+80     	; 0x3efe <__udivmodsi4>
    3eae:	0a d0       	rcall	.+20     	; 0x3ec4 <__divmodsi4_neg1>
    3eb0:	00 1c       	adc	r0, r0
    3eb2:	38 f4       	brcc	.+14     	; 0x3ec2 <__divmodsi4_exit>

00003eb4 <__divmodsi4_neg2>:
    3eb4:	50 95       	com	r21
    3eb6:	40 95       	com	r20
    3eb8:	30 95       	com	r19
    3eba:	21 95       	neg	r18
    3ebc:	3f 4f       	sbci	r19, 0xFF	; 255
    3ebe:	4f 4f       	sbci	r20, 0xFF	; 255
    3ec0:	5f 4f       	sbci	r21, 0xFF	; 255

00003ec2 <__divmodsi4_exit>:
    3ec2:	08 95       	ret

00003ec4 <__divmodsi4_neg1>:
    3ec4:	f6 f7       	brtc	.-4      	; 0x3ec2 <__divmodsi4_exit>
    3ec6:	90 95       	com	r25
    3ec8:	80 95       	com	r24
    3eca:	70 95       	com	r23
    3ecc:	61 95       	neg	r22
    3ece:	7f 4f       	sbci	r23, 0xFF	; 255
    3ed0:	8f 4f       	sbci	r24, 0xFF	; 255
    3ed2:	9f 4f       	sbci	r25, 0xFF	; 255
    3ed4:	08 95       	ret

00003ed6 <__udivmodhi4>:
    3ed6:	aa 1b       	sub	r26, r26
    3ed8:	bb 1b       	sub	r27, r27
    3eda:	51 e1       	ldi	r21, 0x11	; 17
    3edc:	07 c0       	rjmp	.+14     	; 0x3eec <__udivmodhi4_ep>

00003ede <__udivmodhi4_loop>:
    3ede:	aa 1f       	adc	r26, r26
    3ee0:	bb 1f       	adc	r27, r27
    3ee2:	a6 17       	cp	r26, r22
    3ee4:	b7 07       	cpc	r27, r23
    3ee6:	10 f0       	brcs	.+4      	; 0x3eec <__udivmodhi4_ep>
    3ee8:	a6 1b       	sub	r26, r22
    3eea:	b7 0b       	sbc	r27, r23

00003eec <__udivmodhi4_ep>:
    3eec:	88 1f       	adc	r24, r24
    3eee:	99 1f       	adc	r25, r25
    3ef0:	5a 95       	dec	r21
    3ef2:	a9 f7       	brne	.-22     	; 0x3ede <__udivmodhi4_loop>
    3ef4:	80 95       	com	r24
    3ef6:	90 95       	com	r25
    3ef8:	bc 01       	movw	r22, r24
    3efa:	cd 01       	movw	r24, r26
    3efc:	08 95       	ret

00003efe <__udivmodsi4>:
    3efe:	a1 e2       	ldi	r26, 0x21	; 33
    3f00:	1a 2e       	mov	r1, r26
    3f02:	aa 1b       	sub	r26, r26
    3f04:	bb 1b       	sub	r27, r27
    3f06:	fd 01       	movw	r30, r26
    3f08:	0d c0       	rjmp	.+26     	; 0x3f24 <__udivmodsi4_ep>

00003f0a <__udivmodsi4_loop>:
    3f0a:	aa 1f       	adc	r26, r26
    3f0c:	bb 1f       	adc	r27, r27
    3f0e:	ee 1f       	adc	r30, r30
    3f10:	ff 1f       	adc	r31, r31
    3f12:	a2 17       	cp	r26, r18
    3f14:	b3 07       	cpc	r27, r19
    3f16:	e4 07       	cpc	r30, r20
    3f18:	f5 07       	cpc	r31, r21
    3f1a:	20 f0       	brcs	.+8      	; 0x3f24 <__udivmodsi4_ep>
    3f1c:	a2 1b       	sub	r26, r18
    3f1e:	b3 0b       	sbc	r27, r19
    3f20:	e4 0b       	sbc	r30, r20
    3f22:	f5 0b       	sbc	r31, r21

00003f24 <__udivmodsi4_ep>:
    3f24:	66 1f       	adc	r22, r22
    3f26:	77 1f       	adc	r23, r23
    3f28:	88 1f       	adc	r24, r24
    3f2a:	99 1f       	adc	r25, r25
    3f2c:	1a 94       	dec	r1
    3f2e:	69 f7       	brne	.-38     	; 0x3f0a <__udivmodsi4_loop>
    3f30:	60 95       	com	r22
    3f32:	70 95       	com	r23
    3f34:	80 95       	com	r24
    3f36:	90 95       	com	r25
    3f38:	9b 01       	movw	r18, r22
    3f3a:	ac 01       	movw	r20, r24
    3f3c:	bd 01       	movw	r22, r26
    3f3e:	cf 01       	movw	r24, r30
    3f40:	08 95       	ret

00003f42 <__prologue_saves__>:
    3f42:	2f 92       	push	r2
    3f44:	3f 92       	push	r3
    3f46:	4f 92       	push	r4
    3f48:	5f 92       	push	r5
    3f4a:	6f 92       	push	r6
    3f4c:	7f 92       	push	r7
    3f4e:	8f 92       	push	r8
    3f50:	9f 92       	push	r9
    3f52:	af 92       	push	r10
    3f54:	bf 92       	push	r11
    3f56:	cf 92       	push	r12
    3f58:	df 92       	push	r13
    3f5a:	ef 92       	push	r14
    3f5c:	ff 92       	push	r15
    3f5e:	0f 93       	push	r16
    3f60:	1f 93       	push	r17
    3f62:	cf 93       	push	r28
    3f64:	df 93       	push	r29
    3f66:	cd b7       	in	r28, 0x3d	; 61
    3f68:	de b7       	in	r29, 0x3e	; 62
    3f6a:	ca 1b       	sub	r28, r26
    3f6c:	db 0b       	sbc	r29, r27
    3f6e:	0f b6       	in	r0, 0x3f	; 63
    3f70:	f8 94       	cli
    3f72:	de bf       	out	0x3e, r29	; 62
    3f74:	0f be       	out	0x3f, r0	; 63
    3f76:	cd bf       	out	0x3d, r28	; 61
    3f78:	09 94       	ijmp

00003f7a <__epilogue_restores__>:
    3f7a:	2a 88       	ldd	r2, Y+18	; 0x12
    3f7c:	39 88       	ldd	r3, Y+17	; 0x11
    3f7e:	48 88       	ldd	r4, Y+16	; 0x10
    3f80:	5f 84       	ldd	r5, Y+15	; 0x0f
    3f82:	6e 84       	ldd	r6, Y+14	; 0x0e
    3f84:	7d 84       	ldd	r7, Y+13	; 0x0d
    3f86:	8c 84       	ldd	r8, Y+12	; 0x0c
    3f88:	9b 84       	ldd	r9, Y+11	; 0x0b
    3f8a:	aa 84       	ldd	r10, Y+10	; 0x0a
    3f8c:	b9 84       	ldd	r11, Y+9	; 0x09
    3f8e:	c8 84       	ldd	r12, Y+8	; 0x08
    3f90:	df 80       	ldd	r13, Y+7	; 0x07
    3f92:	ee 80       	ldd	r14, Y+6	; 0x06
    3f94:	fd 80       	ldd	r15, Y+5	; 0x05
    3f96:	0c 81       	ldd	r16, Y+4	; 0x04
    3f98:	1b 81       	ldd	r17, Y+3	; 0x03
    3f9a:	aa 81       	ldd	r26, Y+2	; 0x02
    3f9c:	b9 81       	ldd	r27, Y+1	; 0x01
    3f9e:	ce 0f       	add	r28, r30
    3fa0:	d1 1d       	adc	r29, r1
    3fa2:	0f b6       	in	r0, 0x3f	; 63
    3fa4:	f8 94       	cli
    3fa6:	de bf       	out	0x3e, r29	; 62
    3fa8:	0f be       	out	0x3f, r0	; 63
    3faa:	cd bf       	out	0x3d, r28	; 61
    3fac:	ed 01       	movw	r28, r26
    3fae:	08 95       	ret

00003fb0 <_exit>:
    3fb0:	f8 94       	cli

00003fb2 <__stop_program>:
    3fb2:	ff cf       	rjmp	.-2      	; 0x3fb2 <__stop_program>
