
safe_lock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000da  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000348  00000000  00000000  00000130  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000777  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "avr/io.h"
#include "util/delay.h"

void main(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	DDRA |= 0b00000101;
  74:	aa e3       	ldi	r26, 0x3A	; 58
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	ea e3       	ldi	r30, 0x3A	; 58
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	85 60       	ori	r24, 0x05	; 5
  80:	8c 93       	st	X, r24
	DDRC = 0;
  82:	e4 e3       	ldi	r30, 0x34	; 52
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	10 82       	st	Z, r1
	PORTC = 0xff;
  88:	e5 e3       	ldi	r30, 0x35	; 53
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	8f ef       	ldi	r24, 0xFF	; 255
  8e:	80 83       	st	Z, r24
  90:	0e c0       	rjmp	.+28     	; 0xae <main+0x42>

	while(1)
	{
		while(PINC == 0b11010110){
			PORTA |= 0b00000100;
  92:	ab e3       	ldi	r26, 0x3B	; 59
  94:	b0 e0       	ldi	r27, 0x00	; 0
  96:	eb e3       	ldi	r30, 0x3B	; 59
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	84 60       	ori	r24, 0x04	; 4
  9e:	8c 93       	st	X, r24
			PORTA &= 0b11111110;
  a0:	ab e3       	ldi	r26, 0x3B	; 59
  a2:	b0 e0       	ldi	r27, 0x00	; 0
  a4:	eb e3       	ldi	r30, 0x3B	; 59
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	8e 7f       	andi	r24, 0xFE	; 254
  ac:	8c 93       	st	X, r24
	DDRC = 0;
	PORTC = 0xff;

	while(1)
	{
		while(PINC == 0b11010110){
  ae:	e3 e3       	ldi	r30, 0x33	; 51
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	86 3d       	cpi	r24, 0xD6	; 214
  b6:	69 f3       	breq	.-38     	; 0x92 <main+0x26>
			PORTA |= 0b00000100;
			PORTA &= 0b11111110;
		}

		PORTA |= 0b00000001;
  b8:	ab e3       	ldi	r26, 0x3B	; 59
  ba:	b0 e0       	ldi	r27, 0x00	; 0
  bc:	eb e3       	ldi	r30, 0x3B	; 59
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	81 60       	ori	r24, 0x01	; 1
  c4:	8c 93       	st	X, r24
		PORTA &= 0b11111011;
  c6:	ab e3       	ldi	r26, 0x3B	; 59
  c8:	b0 e0       	ldi	r27, 0x00	; 0
  ca:	eb e3       	ldi	r30, 0x3B	; 59
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	8b 7f       	andi	r24, 0xFB	; 251
  d2:	8c 93       	st	X, r24
  d4:	ec cf       	rjmp	.-40     	; 0xae <main+0x42>

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>
