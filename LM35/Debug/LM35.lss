
LM35.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003410  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000120  00800060  00003410  00003484  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002a48  00000000  00000000  000035a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000f79  00000000  00000000  00005fec  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00006f65  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  00007105  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  000072f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  00009702  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  0000aa88  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000bc60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0000be20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000c116  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000ca84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e1       	ldi	r30, 0x10	; 16
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 cb 18 	call	0x3196	; 0x3196 <main>
      7a:	0c 94 06 1a 	jmp	0x340c	; 0x340c <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 cf 19 	jmp	0x339e	; 0x339e <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a8 e6       	ldi	r26, 0x68	; 104
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 eb 19 	jmp	0x33d6	; 0x33d6 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 db 19 	jmp	0x33b6	; 0x33b6 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 f7 19 	jmp	0x33ee	; 0x33ee <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 db 19 	jmp	0x33b6	; 0x33b6 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 f7 19 	jmp	0x33ee	; 0x33ee <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 cf 19 	jmp	0x339e	; 0x339e <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	88 e6       	ldi	r24, 0x68	; 104
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 eb 19 	jmp	0x33d6	; 0x33d6 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 d7 19 	jmp	0x33ae	; 0x33ae <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	68 e6       	ldi	r22, 0x68	; 104
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 f3 19 	jmp	0x33e6	; 0x33e6 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 db 19 	jmp	0x33b6	; 0x33b6 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 f7 19 	jmp	0x33ee	; 0x33ee <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 db 19 	jmp	0x33b6	; 0x33b6 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 f7 19 	jmp	0x33ee	; 0x33ee <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 db 19 	jmp	0x33b6	; 0x33b6 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 f7 19 	jmp	0x33ee	; 0x33ee <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 df 19 	jmp	0x33be	; 0x33be <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 d7 19 	jmp	0x33ae	; 0x33ae <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 f3 19 	jmp	0x33e6	; 0x33e6 <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	e0 59       	subi	r30, 0x90	; 144
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <DIO_u8setPortDir>:
#include "DIO_Reg.h"
#include "../../Libs/bitmath.h"

/*PORT level*/
u8 DIO_u8setPortDir(u8 Copy_u8port , u8 Copy_u8dir)
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	00 d0       	rcall	.+0      	; 0xe24 <DIO_u8setPortDir+0x6>
     e24:	00 d0       	rcall	.+0      	; 0xe26 <DIO_u8setPortDir+0x8>
     e26:	0f 92       	push	r0
     e28:	cd b7       	in	r28, 0x3d	; 61
     e2a:	de b7       	in	r29, 0x3e	; 62
     e2c:	8a 83       	std	Y+2, r24	; 0x02
     e2e:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8errStatus = RT_OK ;
     e30:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8port)
     e32:	8a 81       	ldd	r24, Y+2	; 0x02
     e34:	28 2f       	mov	r18, r24
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	3d 83       	std	Y+5, r19	; 0x05
     e3a:	2c 83       	std	Y+4, r18	; 0x04
     e3c:	8c 81       	ldd	r24, Y+4	; 0x04
     e3e:	9d 81       	ldd	r25, Y+5	; 0x05
     e40:	81 30       	cpi	r24, 0x01	; 1
     e42:	91 05       	cpc	r25, r1
     e44:	d1 f0       	breq	.+52     	; 0xe7a <DIO_u8setPortDir+0x5c>
     e46:	2c 81       	ldd	r18, Y+4	; 0x04
     e48:	3d 81       	ldd	r19, Y+5	; 0x05
     e4a:	22 30       	cpi	r18, 0x02	; 2
     e4c:	31 05       	cpc	r19, r1
     e4e:	2c f4       	brge	.+10     	; 0xe5a <DIO_u8setPortDir+0x3c>
     e50:	8c 81       	ldd	r24, Y+4	; 0x04
     e52:	9d 81       	ldd	r25, Y+5	; 0x05
     e54:	00 97       	sbiw	r24, 0x00	; 0
     e56:	61 f0       	breq	.+24     	; 0xe70 <DIO_u8setPortDir+0x52>
     e58:	1f c0       	rjmp	.+62     	; 0xe98 <DIO_u8setPortDir+0x7a>
     e5a:	2c 81       	ldd	r18, Y+4	; 0x04
     e5c:	3d 81       	ldd	r19, Y+5	; 0x05
     e5e:	22 30       	cpi	r18, 0x02	; 2
     e60:	31 05       	cpc	r19, r1
     e62:	81 f0       	breq	.+32     	; 0xe84 <DIO_u8setPortDir+0x66>
     e64:	8c 81       	ldd	r24, Y+4	; 0x04
     e66:	9d 81       	ldd	r25, Y+5	; 0x05
     e68:	83 30       	cpi	r24, 0x03	; 3
     e6a:	91 05       	cpc	r25, r1
     e6c:	81 f0       	breq	.+32     	; 0xe8e <DIO_u8setPortDir+0x70>
     e6e:	14 c0       	rjmp	.+40     	; 0xe98 <DIO_u8setPortDir+0x7a>
	{
	case PORT_A:
		DDRA_REG=Copy_u8dir;
     e70:	ea e3       	ldi	r30, 0x3A	; 58
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	8b 81       	ldd	r24, Y+3	; 0x03
     e76:	80 83       	st	Z, r24
     e78:	11 c0       	rjmp	.+34     	; 0xe9c <DIO_u8setPortDir+0x7e>
		break;
	case PORT_B:
		DDRB_REG=Copy_u8dir;
     e7a:	e7 e3       	ldi	r30, 0x37	; 55
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	8b 81       	ldd	r24, Y+3	; 0x03
     e80:	80 83       	st	Z, r24
     e82:	0c c0       	rjmp	.+24     	; 0xe9c <DIO_u8setPortDir+0x7e>
		break;
	case PORT_C:
		DDRC_REG=Copy_u8dir;
     e84:	e4 e3       	ldi	r30, 0x34	; 52
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	8b 81       	ldd	r24, Y+3	; 0x03
     e8a:	80 83       	st	Z, r24
     e8c:	07 c0       	rjmp	.+14     	; 0xe9c <DIO_u8setPortDir+0x7e>
		break;
	case PORT_D:
		DDRD_REG=Copy_u8dir;
     e8e:	e1 e3       	ldi	r30, 0x31	; 49
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	8b 81       	ldd	r24, Y+3	; 0x03
     e94:	80 83       	st	Z, r24
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <DIO_u8setPortDir+0x7e>
		break;
	default:
		local_u8errStatus = RT_NOK ;
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8errStatus ;
     e9c:	89 81       	ldd	r24, Y+1	; 0x01
}
     e9e:	0f 90       	pop	r0
     ea0:	0f 90       	pop	r0
     ea2:	0f 90       	pop	r0
     ea4:	0f 90       	pop	r0
     ea6:	0f 90       	pop	r0
     ea8:	cf 91       	pop	r28
     eaa:	df 91       	pop	r29
     eac:	08 95       	ret

00000eae <DIO_u8setPortVal>:

u8 DIO_u8setPortVal(u8 Copy_u8port , u8 Copy_u8dval)
{
     eae:	df 93       	push	r29
     eb0:	cf 93       	push	r28
     eb2:	00 d0       	rcall	.+0      	; 0xeb4 <DIO_u8setPortVal+0x6>
     eb4:	00 d0       	rcall	.+0      	; 0xeb6 <DIO_u8setPortVal+0x8>
     eb6:	0f 92       	push	r0
     eb8:	cd b7       	in	r28, 0x3d	; 61
     eba:	de b7       	in	r29, 0x3e	; 62
     ebc:	8a 83       	std	Y+2, r24	; 0x02
     ebe:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8errStatus = RT_OK ;
     ec0:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8port)
     ec2:	8a 81       	ldd	r24, Y+2	; 0x02
     ec4:	28 2f       	mov	r18, r24
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	3d 83       	std	Y+5, r19	; 0x05
     eca:	2c 83       	std	Y+4, r18	; 0x04
     ecc:	8c 81       	ldd	r24, Y+4	; 0x04
     ece:	9d 81       	ldd	r25, Y+5	; 0x05
     ed0:	81 30       	cpi	r24, 0x01	; 1
     ed2:	91 05       	cpc	r25, r1
     ed4:	d1 f0       	breq	.+52     	; 0xf0a <DIO_u8setPortVal+0x5c>
     ed6:	2c 81       	ldd	r18, Y+4	; 0x04
     ed8:	3d 81       	ldd	r19, Y+5	; 0x05
     eda:	22 30       	cpi	r18, 0x02	; 2
     edc:	31 05       	cpc	r19, r1
     ede:	2c f4       	brge	.+10     	; 0xeea <DIO_u8setPortVal+0x3c>
     ee0:	8c 81       	ldd	r24, Y+4	; 0x04
     ee2:	9d 81       	ldd	r25, Y+5	; 0x05
     ee4:	00 97       	sbiw	r24, 0x00	; 0
     ee6:	61 f0       	breq	.+24     	; 0xf00 <DIO_u8setPortVal+0x52>
     ee8:	1f c0       	rjmp	.+62     	; 0xf28 <DIO_u8setPortVal+0x7a>
     eea:	2c 81       	ldd	r18, Y+4	; 0x04
     eec:	3d 81       	ldd	r19, Y+5	; 0x05
     eee:	22 30       	cpi	r18, 0x02	; 2
     ef0:	31 05       	cpc	r19, r1
     ef2:	81 f0       	breq	.+32     	; 0xf14 <DIO_u8setPortVal+0x66>
     ef4:	8c 81       	ldd	r24, Y+4	; 0x04
     ef6:	9d 81       	ldd	r25, Y+5	; 0x05
     ef8:	83 30       	cpi	r24, 0x03	; 3
     efa:	91 05       	cpc	r25, r1
     efc:	81 f0       	breq	.+32     	; 0xf1e <DIO_u8setPortVal+0x70>
     efe:	14 c0       	rjmp	.+40     	; 0xf28 <DIO_u8setPortVal+0x7a>
	{
	case PORT_A:
		PORTA_REG=Copy_u8dval;
     f00:	eb e3       	ldi	r30, 0x3B	; 59
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	8b 81       	ldd	r24, Y+3	; 0x03
     f06:	80 83       	st	Z, r24
     f08:	11 c0       	rjmp	.+34     	; 0xf2c <DIO_u8setPortVal+0x7e>
		break;
	case PORT_B:
		PORTB_REG=Copy_u8dval;
     f0a:	e8 e3       	ldi	r30, 0x38	; 56
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	8b 81       	ldd	r24, Y+3	; 0x03
     f10:	80 83       	st	Z, r24
     f12:	0c c0       	rjmp	.+24     	; 0xf2c <DIO_u8setPortVal+0x7e>
		break;
	case PORT_C:
		PORTC_REG=Copy_u8dval;
     f14:	e5 e3       	ldi	r30, 0x35	; 53
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	8b 81       	ldd	r24, Y+3	; 0x03
     f1a:	80 83       	st	Z, r24
     f1c:	07 c0       	rjmp	.+14     	; 0xf2c <DIO_u8setPortVal+0x7e>
		break;
	case PORT_D:
		PORTD_REG=Copy_u8dval;
     f1e:	e2 e3       	ldi	r30, 0x32	; 50
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	8b 81       	ldd	r24, Y+3	; 0x03
     f24:	80 83       	st	Z, r24
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <DIO_u8setPortVal+0x7e>
		break;
	default:
		local_u8errStatus = RT_NOK ;
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8errStatus ;
     f2c:	89 81       	ldd	r24, Y+1	; 0x01
}
     f2e:	0f 90       	pop	r0
     f30:	0f 90       	pop	r0
     f32:	0f 90       	pop	r0
     f34:	0f 90       	pop	r0
     f36:	0f 90       	pop	r0
     f38:	cf 91       	pop	r28
     f3a:	df 91       	pop	r29
     f3c:	08 95       	ret

00000f3e <DIO_u8getPortVal>:

u8 DIO_u8getPortVal(u8 Copy_u8port , u8* Copy_u8pval)
{
     f3e:	df 93       	push	r29
     f40:	cf 93       	push	r28
     f42:	00 d0       	rcall	.+0      	; 0xf44 <DIO_u8getPortVal+0x6>
     f44:	00 d0       	rcall	.+0      	; 0xf46 <DIO_u8getPortVal+0x8>
     f46:	00 d0       	rcall	.+0      	; 0xf48 <DIO_u8getPortVal+0xa>
     f48:	cd b7       	in	r28, 0x3d	; 61
     f4a:	de b7       	in	r29, 0x3e	; 62
     f4c:	8a 83       	std	Y+2, r24	; 0x02
     f4e:	7c 83       	std	Y+4, r23	; 0x04
     f50:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8errStatus = RT_OK ;
     f52:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8port)
     f54:	8a 81       	ldd	r24, Y+2	; 0x02
     f56:	28 2f       	mov	r18, r24
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	3e 83       	std	Y+6, r19	; 0x06
     f5c:	2d 83       	std	Y+5, r18	; 0x05
     f5e:	8d 81       	ldd	r24, Y+5	; 0x05
     f60:	9e 81       	ldd	r25, Y+6	; 0x06
     f62:	81 30       	cpi	r24, 0x01	; 1
     f64:	91 05       	cpc	r25, r1
     f66:	e1 f0       	breq	.+56     	; 0xfa0 <DIO_u8getPortVal+0x62>
     f68:	2d 81       	ldd	r18, Y+5	; 0x05
     f6a:	3e 81       	ldd	r19, Y+6	; 0x06
     f6c:	22 30       	cpi	r18, 0x02	; 2
     f6e:	31 05       	cpc	r19, r1
     f70:	2c f4       	brge	.+10     	; 0xf7c <DIO_u8getPortVal+0x3e>
     f72:	8d 81       	ldd	r24, Y+5	; 0x05
     f74:	9e 81       	ldd	r25, Y+6	; 0x06
     f76:	00 97       	sbiw	r24, 0x00	; 0
     f78:	61 f0       	breq	.+24     	; 0xf92 <DIO_u8getPortVal+0x54>
     f7a:	27 c0       	rjmp	.+78     	; 0xfca <DIO_u8getPortVal+0x8c>
     f7c:	2d 81       	ldd	r18, Y+5	; 0x05
     f7e:	3e 81       	ldd	r19, Y+6	; 0x06
     f80:	22 30       	cpi	r18, 0x02	; 2
     f82:	31 05       	cpc	r19, r1
     f84:	a1 f0       	breq	.+40     	; 0xfae <DIO_u8getPortVal+0x70>
     f86:	8d 81       	ldd	r24, Y+5	; 0x05
     f88:	9e 81       	ldd	r25, Y+6	; 0x06
     f8a:	83 30       	cpi	r24, 0x03	; 3
     f8c:	91 05       	cpc	r25, r1
     f8e:	b1 f0       	breq	.+44     	; 0xfbc <DIO_u8getPortVal+0x7e>
     f90:	1c c0       	rjmp	.+56     	; 0xfca <DIO_u8getPortVal+0x8c>
	{
	case PORT_A:
		*Copy_u8pval=PINA_REG;
     f92:	e9 e3       	ldi	r30, 0x39	; 57
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	eb 81       	ldd	r30, Y+3	; 0x03
     f9a:	fc 81       	ldd	r31, Y+4	; 0x04
     f9c:	80 83       	st	Z, r24
     f9e:	17 c0       	rjmp	.+46     	; 0xfce <DIO_u8getPortVal+0x90>
		break;
	case PORT_B:
		*Copy_u8pval=PINB_REG;
     fa0:	e6 e3       	ldi	r30, 0x36	; 54
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	eb 81       	ldd	r30, Y+3	; 0x03
     fa8:	fc 81       	ldd	r31, Y+4	; 0x04
     faa:	80 83       	st	Z, r24
     fac:	10 c0       	rjmp	.+32     	; 0xfce <DIO_u8getPortVal+0x90>
		break;
	case PORT_C:
		*Copy_u8pval=PINC_REG;
     fae:	e3 e3       	ldi	r30, 0x33	; 51
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	eb 81       	ldd	r30, Y+3	; 0x03
     fb6:	fc 81       	ldd	r31, Y+4	; 0x04
     fb8:	80 83       	st	Z, r24
     fba:	09 c0       	rjmp	.+18     	; 0xfce <DIO_u8getPortVal+0x90>
		break;
	case PORT_D:
		*Copy_u8pval=PIND_REG;
     fbc:	e0 e3       	ldi	r30, 0x30	; 48
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	eb 81       	ldd	r30, Y+3	; 0x03
     fc4:	fc 81       	ldd	r31, Y+4	; 0x04
     fc6:	80 83       	st	Z, r24
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <DIO_u8getPortVal+0x90>
		break;
	default:
		local_u8errStatus = RT_NOK ;
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8errStatus ;
     fce:	89 81       	ldd	r24, Y+1	; 0x01
}
     fd0:	26 96       	adiw	r28, 0x06	; 6
     fd2:	0f b6       	in	r0, 0x3f	; 63
     fd4:	f8 94       	cli
     fd6:	de bf       	out	0x3e, r29	; 62
     fd8:	0f be       	out	0x3f, r0	; 63
     fda:	cd bf       	out	0x3d, r28	; 61
     fdc:	cf 91       	pop	r28
     fde:	df 91       	pop	r29
     fe0:	08 95       	ret

00000fe2 <DIO_u8setPinDir>:
/*PIN level*/
u8 DIO_u8setPinDir(u8 Copy_u8port , u8 Copy_u8pin , u8 Copy_u8dir)
{
     fe2:	df 93       	push	r29
     fe4:	cf 93       	push	r28
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
     fea:	28 97       	sbiw	r28, 0x08	; 8
     fec:	0f b6       	in	r0, 0x3f	; 63
     fee:	f8 94       	cli
     ff0:	de bf       	out	0x3e, r29	; 62
     ff2:	0f be       	out	0x3f, r0	; 63
     ff4:	cd bf       	out	0x3d, r28	; 61
     ff6:	8a 83       	std	Y+2, r24	; 0x02
     ff8:	6b 83       	std	Y+3, r22	; 0x03
     ffa:	4c 83       	std	Y+4, r20	; 0x04
	u8 local_u8errStatus = RT_OK ;
     ffc:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8pin >= PIN_0 && Copy_u8pin <= PIN_7 )
     ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    1000:	88 30       	cpi	r24, 0x08	; 8
    1002:	08 f0       	brcs	.+2      	; 0x1006 <DIO_u8setPinDir+0x24>
    1004:	f4 c0       	rjmp	.+488    	; 0x11ee <DIO_u8setPinDir+0x20c>
	{
		if(Copy_u8dir == INPUT)
    1006:	8c 81       	ldd	r24, Y+4	; 0x04
    1008:	88 23       	and	r24, r24
    100a:	09 f0       	breq	.+2      	; 0x100e <DIO_u8setPinDir+0x2c>
    100c:	77 c0       	rjmp	.+238    	; 0x10fc <DIO_u8setPinDir+0x11a>
		{
			switch(Copy_u8port)
    100e:	8a 81       	ldd	r24, Y+2	; 0x02
    1010:	28 2f       	mov	r18, r24
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	38 87       	std	Y+8, r19	; 0x08
    1016:	2f 83       	std	Y+7, r18	; 0x07
    1018:	8f 81       	ldd	r24, Y+7	; 0x07
    101a:	98 85       	ldd	r25, Y+8	; 0x08
    101c:	81 30       	cpi	r24, 0x01	; 1
    101e:	91 05       	cpc	r25, r1
    1020:	59 f1       	breq	.+86     	; 0x1078 <DIO_u8setPinDir+0x96>
    1022:	2f 81       	ldd	r18, Y+7	; 0x07
    1024:	38 85       	ldd	r19, Y+8	; 0x08
    1026:	22 30       	cpi	r18, 0x02	; 2
    1028:	31 05       	cpc	r19, r1
    102a:	2c f4       	brge	.+10     	; 0x1036 <DIO_u8setPinDir+0x54>
    102c:	8f 81       	ldd	r24, Y+7	; 0x07
    102e:	98 85       	ldd	r25, Y+8	; 0x08
    1030:	00 97       	sbiw	r24, 0x00	; 0
    1032:	69 f0       	breq	.+26     	; 0x104e <DIO_u8setPinDir+0x6c>
    1034:	60 c0       	rjmp	.+192    	; 0x10f6 <DIO_u8setPinDir+0x114>
    1036:	2f 81       	ldd	r18, Y+7	; 0x07
    1038:	38 85       	ldd	r19, Y+8	; 0x08
    103a:	22 30       	cpi	r18, 0x02	; 2
    103c:	31 05       	cpc	r19, r1
    103e:	89 f1       	breq	.+98     	; 0x10a2 <DIO_u8setPinDir+0xc0>
    1040:	8f 81       	ldd	r24, Y+7	; 0x07
    1042:	98 85       	ldd	r25, Y+8	; 0x08
    1044:	83 30       	cpi	r24, 0x03	; 3
    1046:	91 05       	cpc	r25, r1
    1048:	09 f4       	brne	.+2      	; 0x104c <DIO_u8setPinDir+0x6a>
    104a:	40 c0       	rjmp	.+128    	; 0x10cc <DIO_u8setPinDir+0xea>
    104c:	54 c0       	rjmp	.+168    	; 0x10f6 <DIO_u8setPinDir+0x114>
			{
			case PORT_A:
				CLR_BIT(DDRA_REG,Copy_u8pin);
    104e:	aa e3       	ldi	r26, 0x3A	; 58
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	ea e3       	ldi	r30, 0x3A	; 58
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	48 2f       	mov	r20, r24
    105a:	8b 81       	ldd	r24, Y+3	; 0x03
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	02 2e       	mov	r0, r18
    1066:	02 c0       	rjmp	.+4      	; 0x106c <DIO_u8setPinDir+0x8a>
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	0a 94       	dec	r0
    106e:	e2 f7       	brpl	.-8      	; 0x1068 <DIO_u8setPinDir+0x86>
    1070:	80 95       	com	r24
    1072:	84 23       	and	r24, r20
    1074:	8c 93       	st	X, r24
    1076:	bd c0       	rjmp	.+378    	; 0x11f2 <DIO_u8setPinDir+0x210>
				break;
			case PORT_B:
				CLR_BIT(DDRB_REG,Copy_u8pin);
    1078:	a7 e3       	ldi	r26, 0x37	; 55
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	e7 e3       	ldi	r30, 0x37	; 55
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	48 2f       	mov	r20, r24
    1084:	8b 81       	ldd	r24, Y+3	; 0x03
    1086:	28 2f       	mov	r18, r24
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	02 2e       	mov	r0, r18
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <DIO_u8setPinDir+0xb4>
    1092:	88 0f       	add	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	0a 94       	dec	r0
    1098:	e2 f7       	brpl	.-8      	; 0x1092 <DIO_u8setPinDir+0xb0>
    109a:	80 95       	com	r24
    109c:	84 23       	and	r24, r20
    109e:	8c 93       	st	X, r24
    10a0:	a8 c0       	rjmp	.+336    	; 0x11f2 <DIO_u8setPinDir+0x210>
				break;
			case PORT_C:
				CLR_BIT(DDRC_REG,Copy_u8pin);
    10a2:	a4 e3       	ldi	r26, 0x34	; 52
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	e4 e3       	ldi	r30, 0x34	; 52
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	48 2f       	mov	r20, r24
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	28 2f       	mov	r18, r24
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	02 2e       	mov	r0, r18
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <DIO_u8setPinDir+0xde>
    10bc:	88 0f       	add	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	0a 94       	dec	r0
    10c2:	e2 f7       	brpl	.-8      	; 0x10bc <DIO_u8setPinDir+0xda>
    10c4:	80 95       	com	r24
    10c6:	84 23       	and	r24, r20
    10c8:	8c 93       	st	X, r24
    10ca:	93 c0       	rjmp	.+294    	; 0x11f2 <DIO_u8setPinDir+0x210>
				break;
			case PORT_D:
				CLR_BIT(DDRD_REG,Copy_u8pin);
    10cc:	a1 e3       	ldi	r26, 0x31	; 49
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	e1 e3       	ldi	r30, 0x31	; 49
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	48 2f       	mov	r20, r24
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	28 2f       	mov	r18, r24
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	02 2e       	mov	r0, r18
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <DIO_u8setPinDir+0x108>
    10e6:	88 0f       	add	r24, r24
    10e8:	99 1f       	adc	r25, r25
    10ea:	0a 94       	dec	r0
    10ec:	e2 f7       	brpl	.-8      	; 0x10e6 <DIO_u8setPinDir+0x104>
    10ee:	80 95       	com	r24
    10f0:	84 23       	and	r24, r20
    10f2:	8c 93       	st	X, r24
    10f4:	7e c0       	rjmp	.+252    	; 0x11f2 <DIO_u8setPinDir+0x210>
				break;
			default:
				local_u8errStatus = RT_NOK ;
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	89 83       	std	Y+1, r24	; 0x01
    10fa:	7b c0       	rjmp	.+246    	; 0x11f2 <DIO_u8setPinDir+0x210>
			}
		}
		else if(Copy_u8dir == OUTPUT)
    10fc:	8c 81       	ldd	r24, Y+4	; 0x04
    10fe:	81 30       	cpi	r24, 0x01	; 1
    1100:	09 f0       	breq	.+2      	; 0x1104 <DIO_u8setPinDir+0x122>
    1102:	72 c0       	rjmp	.+228    	; 0x11e8 <DIO_u8setPinDir+0x206>
		{
			switch(Copy_u8port)
    1104:	8a 81       	ldd	r24, Y+2	; 0x02
    1106:	28 2f       	mov	r18, r24
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	3e 83       	std	Y+6, r19	; 0x06
    110c:	2d 83       	std	Y+5, r18	; 0x05
    110e:	8d 81       	ldd	r24, Y+5	; 0x05
    1110:	9e 81       	ldd	r25, Y+6	; 0x06
    1112:	81 30       	cpi	r24, 0x01	; 1
    1114:	91 05       	cpc	r25, r1
    1116:	49 f1       	breq	.+82     	; 0x116a <DIO_u8setPinDir+0x188>
    1118:	2d 81       	ldd	r18, Y+5	; 0x05
    111a:	3e 81       	ldd	r19, Y+6	; 0x06
    111c:	22 30       	cpi	r18, 0x02	; 2
    111e:	31 05       	cpc	r19, r1
    1120:	2c f4       	brge	.+10     	; 0x112c <DIO_u8setPinDir+0x14a>
    1122:	8d 81       	ldd	r24, Y+5	; 0x05
    1124:	9e 81       	ldd	r25, Y+6	; 0x06
    1126:	00 97       	sbiw	r24, 0x00	; 0
    1128:	61 f0       	breq	.+24     	; 0x1142 <DIO_u8setPinDir+0x160>
    112a:	5b c0       	rjmp	.+182    	; 0x11e2 <DIO_u8setPinDir+0x200>
    112c:	2d 81       	ldd	r18, Y+5	; 0x05
    112e:	3e 81       	ldd	r19, Y+6	; 0x06
    1130:	22 30       	cpi	r18, 0x02	; 2
    1132:	31 05       	cpc	r19, r1
    1134:	71 f1       	breq	.+92     	; 0x1192 <DIO_u8setPinDir+0x1b0>
    1136:	8d 81       	ldd	r24, Y+5	; 0x05
    1138:	9e 81       	ldd	r25, Y+6	; 0x06
    113a:	83 30       	cpi	r24, 0x03	; 3
    113c:	91 05       	cpc	r25, r1
    113e:	e9 f1       	breq	.+122    	; 0x11ba <DIO_u8setPinDir+0x1d8>
    1140:	50 c0       	rjmp	.+160    	; 0x11e2 <DIO_u8setPinDir+0x200>
			{
			case PORT_A:
				SET_BIT(DDRA_REG,Copy_u8pin);
    1142:	aa e3       	ldi	r26, 0x3A	; 58
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	ea e3       	ldi	r30, 0x3A	; 58
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	48 2f       	mov	r20, r24
    114e:	8b 81       	ldd	r24, Y+3	; 0x03
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	02 2e       	mov	r0, r18
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <DIO_u8setPinDir+0x17e>
    115c:	88 0f       	add	r24, r24
    115e:	99 1f       	adc	r25, r25
    1160:	0a 94       	dec	r0
    1162:	e2 f7       	brpl	.-8      	; 0x115c <DIO_u8setPinDir+0x17a>
    1164:	84 2b       	or	r24, r20
    1166:	8c 93       	st	X, r24
    1168:	44 c0       	rjmp	.+136    	; 0x11f2 <DIO_u8setPinDir+0x210>
				break;
			case PORT_B:
				SET_BIT(DDRB_REG,Copy_u8pin);
    116a:	a7 e3       	ldi	r26, 0x37	; 55
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	e7 e3       	ldi	r30, 0x37	; 55
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	48 2f       	mov	r20, r24
    1176:	8b 81       	ldd	r24, Y+3	; 0x03
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	02 2e       	mov	r0, r18
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <DIO_u8setPinDir+0x1a6>
    1184:	88 0f       	add	r24, r24
    1186:	99 1f       	adc	r25, r25
    1188:	0a 94       	dec	r0
    118a:	e2 f7       	brpl	.-8      	; 0x1184 <DIO_u8setPinDir+0x1a2>
    118c:	84 2b       	or	r24, r20
    118e:	8c 93       	st	X, r24
    1190:	30 c0       	rjmp	.+96     	; 0x11f2 <DIO_u8setPinDir+0x210>
				break;
			case PORT_C:
				SET_BIT(DDRC_REG,Copy_u8pin);
    1192:	a4 e3       	ldi	r26, 0x34	; 52
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	e4 e3       	ldi	r30, 0x34	; 52
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	48 2f       	mov	r20, r24
    119e:	8b 81       	ldd	r24, Y+3	; 0x03
    11a0:	28 2f       	mov	r18, r24
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	02 2e       	mov	r0, r18
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <DIO_u8setPinDir+0x1ce>
    11ac:	88 0f       	add	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	0a 94       	dec	r0
    11b2:	e2 f7       	brpl	.-8      	; 0x11ac <DIO_u8setPinDir+0x1ca>
    11b4:	84 2b       	or	r24, r20
    11b6:	8c 93       	st	X, r24
    11b8:	1c c0       	rjmp	.+56     	; 0x11f2 <DIO_u8setPinDir+0x210>
				break;
			case PORT_D:
				SET_BIT(DDRD_REG,Copy_u8pin);
    11ba:	a1 e3       	ldi	r26, 0x31	; 49
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	e1 e3       	ldi	r30, 0x31	; 49
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	48 2f       	mov	r20, r24
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	02 2e       	mov	r0, r18
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <DIO_u8setPinDir+0x1f6>
    11d4:	88 0f       	add	r24, r24
    11d6:	99 1f       	adc	r25, r25
    11d8:	0a 94       	dec	r0
    11da:	e2 f7       	brpl	.-8      	; 0x11d4 <DIO_u8setPinDir+0x1f2>
    11dc:	84 2b       	or	r24, r20
    11de:	8c 93       	st	X, r24
    11e0:	08 c0       	rjmp	.+16     	; 0x11f2 <DIO_u8setPinDir+0x210>
				break;
			default:
				local_u8errStatus = RT_NOK ;
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	89 83       	std	Y+1, r24	; 0x01
    11e6:	05 c0       	rjmp	.+10     	; 0x11f2 <DIO_u8setPinDir+0x210>
			}
		}
		else
		{
			local_u8errStatus = RT_NOK ;
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	89 83       	std	Y+1, r24	; 0x01
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <DIO_u8setPinDir+0x210>
		}
	}
	else
	{
		local_u8errStatus = RT_NOK ;
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8errStatus ;
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11f4:	28 96       	adiw	r28, 0x08	; 8
    11f6:	0f b6       	in	r0, 0x3f	; 63
    11f8:	f8 94       	cli
    11fa:	de bf       	out	0x3e, r29	; 62
    11fc:	0f be       	out	0x3f, r0	; 63
    11fe:	cd bf       	out	0x3d, r28	; 61
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	08 95       	ret

00001206 <DIO_u8setPinVal>:

u8 DIO_u8setPinVal(u8 Copy_u8port , u8 Copy_u8pin , u8 Copy_u8val)
{
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62
    120e:	28 97       	sbiw	r28, 0x08	; 8
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	f8 94       	cli
    1214:	de bf       	out	0x3e, r29	; 62
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	cd bf       	out	0x3d, r28	; 61
    121a:	8a 83       	std	Y+2, r24	; 0x02
    121c:	6b 83       	std	Y+3, r22	; 0x03
    121e:	4c 83       	std	Y+4, r20	; 0x04
	u8 local_u8errStatus = RT_OK ;
    1220:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8pin >= PIN_0 && Copy_u8pin <= PIN_7 )
    1222:	8b 81       	ldd	r24, Y+3	; 0x03
    1224:	88 30       	cpi	r24, 0x08	; 8
    1226:	08 f0       	brcs	.+2      	; 0x122a <DIO_u8setPinVal+0x24>
    1228:	f4 c0       	rjmp	.+488    	; 0x1412 <DIO_u8setPinVal+0x20c>
	{
		if(Copy_u8val == LOW)
    122a:	8c 81       	ldd	r24, Y+4	; 0x04
    122c:	88 23       	and	r24, r24
    122e:	09 f0       	breq	.+2      	; 0x1232 <DIO_u8setPinVal+0x2c>
    1230:	77 c0       	rjmp	.+238    	; 0x1320 <DIO_u8setPinVal+0x11a>
		{
			switch(Copy_u8port)
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	38 87       	std	Y+8, r19	; 0x08
    123a:	2f 83       	std	Y+7, r18	; 0x07
    123c:	8f 81       	ldd	r24, Y+7	; 0x07
    123e:	98 85       	ldd	r25, Y+8	; 0x08
    1240:	81 30       	cpi	r24, 0x01	; 1
    1242:	91 05       	cpc	r25, r1
    1244:	59 f1       	breq	.+86     	; 0x129c <DIO_u8setPinVal+0x96>
    1246:	2f 81       	ldd	r18, Y+7	; 0x07
    1248:	38 85       	ldd	r19, Y+8	; 0x08
    124a:	22 30       	cpi	r18, 0x02	; 2
    124c:	31 05       	cpc	r19, r1
    124e:	2c f4       	brge	.+10     	; 0x125a <DIO_u8setPinVal+0x54>
    1250:	8f 81       	ldd	r24, Y+7	; 0x07
    1252:	98 85       	ldd	r25, Y+8	; 0x08
    1254:	00 97       	sbiw	r24, 0x00	; 0
    1256:	69 f0       	breq	.+26     	; 0x1272 <DIO_u8setPinVal+0x6c>
    1258:	60 c0       	rjmp	.+192    	; 0x131a <DIO_u8setPinVal+0x114>
    125a:	2f 81       	ldd	r18, Y+7	; 0x07
    125c:	38 85       	ldd	r19, Y+8	; 0x08
    125e:	22 30       	cpi	r18, 0x02	; 2
    1260:	31 05       	cpc	r19, r1
    1262:	89 f1       	breq	.+98     	; 0x12c6 <DIO_u8setPinVal+0xc0>
    1264:	8f 81       	ldd	r24, Y+7	; 0x07
    1266:	98 85       	ldd	r25, Y+8	; 0x08
    1268:	83 30       	cpi	r24, 0x03	; 3
    126a:	91 05       	cpc	r25, r1
    126c:	09 f4       	brne	.+2      	; 0x1270 <DIO_u8setPinVal+0x6a>
    126e:	40 c0       	rjmp	.+128    	; 0x12f0 <DIO_u8setPinVal+0xea>
    1270:	54 c0       	rjmp	.+168    	; 0x131a <DIO_u8setPinVal+0x114>
			{
			case PORT_A:
				CLR_BIT(PORTA_REG,Copy_u8pin);
    1272:	ab e3       	ldi	r26, 0x3B	; 59
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	eb e3       	ldi	r30, 0x3B	; 59
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	48 2f       	mov	r20, r24
    127e:	8b 81       	ldd	r24, Y+3	; 0x03
    1280:	28 2f       	mov	r18, r24
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	02 2e       	mov	r0, r18
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <DIO_u8setPinVal+0x8a>
    128c:	88 0f       	add	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	0a 94       	dec	r0
    1292:	e2 f7       	brpl	.-8      	; 0x128c <DIO_u8setPinVal+0x86>
    1294:	80 95       	com	r24
    1296:	84 23       	and	r24, r20
    1298:	8c 93       	st	X, r24
    129a:	bd c0       	rjmp	.+378    	; 0x1416 <DIO_u8setPinVal+0x210>
				break;
			case PORT_B:
				CLR_BIT(PORTB_REG,Copy_u8pin);
    129c:	a8 e3       	ldi	r26, 0x38	; 56
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e8 e3       	ldi	r30, 0x38	; 56
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	48 2f       	mov	r20, r24
    12a8:	8b 81       	ldd	r24, Y+3	; 0x03
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	02 2e       	mov	r0, r18
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <DIO_u8setPinVal+0xb4>
    12b6:	88 0f       	add	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	0a 94       	dec	r0
    12bc:	e2 f7       	brpl	.-8      	; 0x12b6 <DIO_u8setPinVal+0xb0>
    12be:	80 95       	com	r24
    12c0:	84 23       	and	r24, r20
    12c2:	8c 93       	st	X, r24
    12c4:	a8 c0       	rjmp	.+336    	; 0x1416 <DIO_u8setPinVal+0x210>
				break;
			case PORT_C:
				CLR_BIT(PORTC_REG,Copy_u8pin);
    12c6:	a5 e3       	ldi	r26, 0x35	; 53
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	e5 e3       	ldi	r30, 0x35	; 53
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	48 2f       	mov	r20, r24
    12d2:	8b 81       	ldd	r24, Y+3	; 0x03
    12d4:	28 2f       	mov	r18, r24
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	02 2e       	mov	r0, r18
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <DIO_u8setPinVal+0xde>
    12e0:	88 0f       	add	r24, r24
    12e2:	99 1f       	adc	r25, r25
    12e4:	0a 94       	dec	r0
    12e6:	e2 f7       	brpl	.-8      	; 0x12e0 <DIO_u8setPinVal+0xda>
    12e8:	80 95       	com	r24
    12ea:	84 23       	and	r24, r20
    12ec:	8c 93       	st	X, r24
    12ee:	93 c0       	rjmp	.+294    	; 0x1416 <DIO_u8setPinVal+0x210>
				break;
			case PORT_D:
				CLR_BIT(PORTD_REG,Copy_u8pin);
    12f0:	a2 e3       	ldi	r26, 0x32	; 50
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	e2 e3       	ldi	r30, 0x32	; 50
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	48 2f       	mov	r20, r24
    12fc:	8b 81       	ldd	r24, Y+3	; 0x03
    12fe:	28 2f       	mov	r18, r24
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	02 2e       	mov	r0, r18
    1308:	02 c0       	rjmp	.+4      	; 0x130e <DIO_u8setPinVal+0x108>
    130a:	88 0f       	add	r24, r24
    130c:	99 1f       	adc	r25, r25
    130e:	0a 94       	dec	r0
    1310:	e2 f7       	brpl	.-8      	; 0x130a <DIO_u8setPinVal+0x104>
    1312:	80 95       	com	r24
    1314:	84 23       	and	r24, r20
    1316:	8c 93       	st	X, r24
    1318:	7e c0       	rjmp	.+252    	; 0x1416 <DIO_u8setPinVal+0x210>
				break;
			default:
				local_u8errStatus = RT_NOK ;
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	89 83       	std	Y+1, r24	; 0x01
    131e:	7b c0       	rjmp	.+246    	; 0x1416 <DIO_u8setPinVal+0x210>
			}
		}
		else if(Copy_u8val == HIGH)
    1320:	8c 81       	ldd	r24, Y+4	; 0x04
    1322:	81 30       	cpi	r24, 0x01	; 1
    1324:	09 f0       	breq	.+2      	; 0x1328 <DIO_u8setPinVal+0x122>
    1326:	72 c0       	rjmp	.+228    	; 0x140c <DIO_u8setPinVal+0x206>
		{
			switch(Copy_u8port)
    1328:	8a 81       	ldd	r24, Y+2	; 0x02
    132a:	28 2f       	mov	r18, r24
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	3e 83       	std	Y+6, r19	; 0x06
    1330:	2d 83       	std	Y+5, r18	; 0x05
    1332:	8d 81       	ldd	r24, Y+5	; 0x05
    1334:	9e 81       	ldd	r25, Y+6	; 0x06
    1336:	81 30       	cpi	r24, 0x01	; 1
    1338:	91 05       	cpc	r25, r1
    133a:	49 f1       	breq	.+82     	; 0x138e <DIO_u8setPinVal+0x188>
    133c:	2d 81       	ldd	r18, Y+5	; 0x05
    133e:	3e 81       	ldd	r19, Y+6	; 0x06
    1340:	22 30       	cpi	r18, 0x02	; 2
    1342:	31 05       	cpc	r19, r1
    1344:	2c f4       	brge	.+10     	; 0x1350 <DIO_u8setPinVal+0x14a>
    1346:	8d 81       	ldd	r24, Y+5	; 0x05
    1348:	9e 81       	ldd	r25, Y+6	; 0x06
    134a:	00 97       	sbiw	r24, 0x00	; 0
    134c:	61 f0       	breq	.+24     	; 0x1366 <DIO_u8setPinVal+0x160>
    134e:	5b c0       	rjmp	.+182    	; 0x1406 <DIO_u8setPinVal+0x200>
    1350:	2d 81       	ldd	r18, Y+5	; 0x05
    1352:	3e 81       	ldd	r19, Y+6	; 0x06
    1354:	22 30       	cpi	r18, 0x02	; 2
    1356:	31 05       	cpc	r19, r1
    1358:	71 f1       	breq	.+92     	; 0x13b6 <DIO_u8setPinVal+0x1b0>
    135a:	8d 81       	ldd	r24, Y+5	; 0x05
    135c:	9e 81       	ldd	r25, Y+6	; 0x06
    135e:	83 30       	cpi	r24, 0x03	; 3
    1360:	91 05       	cpc	r25, r1
    1362:	e9 f1       	breq	.+122    	; 0x13de <DIO_u8setPinVal+0x1d8>
    1364:	50 c0       	rjmp	.+160    	; 0x1406 <DIO_u8setPinVal+0x200>
			{
			case PORT_A:
				SET_BIT(PORTA_REG,Copy_u8pin);
    1366:	ab e3       	ldi	r26, 0x3B	; 59
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	eb e3       	ldi	r30, 0x3B	; 59
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	48 2f       	mov	r20, r24
    1372:	8b 81       	ldd	r24, Y+3	; 0x03
    1374:	28 2f       	mov	r18, r24
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	02 2e       	mov	r0, r18
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <DIO_u8setPinVal+0x17e>
    1380:	88 0f       	add	r24, r24
    1382:	99 1f       	adc	r25, r25
    1384:	0a 94       	dec	r0
    1386:	e2 f7       	brpl	.-8      	; 0x1380 <DIO_u8setPinVal+0x17a>
    1388:	84 2b       	or	r24, r20
    138a:	8c 93       	st	X, r24
    138c:	44 c0       	rjmp	.+136    	; 0x1416 <DIO_u8setPinVal+0x210>
				break;
			case PORT_B:
				SET_BIT(PORTB_REG,Copy_u8pin);
    138e:	a8 e3       	ldi	r26, 0x38	; 56
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	e8 e3       	ldi	r30, 0x38	; 56
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	48 2f       	mov	r20, r24
    139a:	8b 81       	ldd	r24, Y+3	; 0x03
    139c:	28 2f       	mov	r18, r24
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	02 2e       	mov	r0, r18
    13a6:	02 c0       	rjmp	.+4      	; 0x13ac <DIO_u8setPinVal+0x1a6>
    13a8:	88 0f       	add	r24, r24
    13aa:	99 1f       	adc	r25, r25
    13ac:	0a 94       	dec	r0
    13ae:	e2 f7       	brpl	.-8      	; 0x13a8 <DIO_u8setPinVal+0x1a2>
    13b0:	84 2b       	or	r24, r20
    13b2:	8c 93       	st	X, r24
    13b4:	30 c0       	rjmp	.+96     	; 0x1416 <DIO_u8setPinVal+0x210>
				break;
			case PORT_C:
				SET_BIT(PORTC_REG,Copy_u8pin);
    13b6:	a5 e3       	ldi	r26, 0x35	; 53
    13b8:	b0 e0       	ldi	r27, 0x00	; 0
    13ba:	e5 e3       	ldi	r30, 0x35	; 53
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	48 2f       	mov	r20, r24
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	28 2f       	mov	r18, r24
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	02 2e       	mov	r0, r18
    13ce:	02 c0       	rjmp	.+4      	; 0x13d4 <DIO_u8setPinVal+0x1ce>
    13d0:	88 0f       	add	r24, r24
    13d2:	99 1f       	adc	r25, r25
    13d4:	0a 94       	dec	r0
    13d6:	e2 f7       	brpl	.-8      	; 0x13d0 <DIO_u8setPinVal+0x1ca>
    13d8:	84 2b       	or	r24, r20
    13da:	8c 93       	st	X, r24
    13dc:	1c c0       	rjmp	.+56     	; 0x1416 <DIO_u8setPinVal+0x210>
				break;
			case PORT_D:
				SET_BIT(PORTD_REG,Copy_u8pin);
    13de:	a2 e3       	ldi	r26, 0x32	; 50
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	e2 e3       	ldi	r30, 0x32	; 50
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	48 2f       	mov	r20, r24
    13ea:	8b 81       	ldd	r24, Y+3	; 0x03
    13ec:	28 2f       	mov	r18, r24
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	02 2e       	mov	r0, r18
    13f6:	02 c0       	rjmp	.+4      	; 0x13fc <DIO_u8setPinVal+0x1f6>
    13f8:	88 0f       	add	r24, r24
    13fa:	99 1f       	adc	r25, r25
    13fc:	0a 94       	dec	r0
    13fe:	e2 f7       	brpl	.-8      	; 0x13f8 <DIO_u8setPinVal+0x1f2>
    1400:	84 2b       	or	r24, r20
    1402:	8c 93       	st	X, r24
    1404:	08 c0       	rjmp	.+16     	; 0x1416 <DIO_u8setPinVal+0x210>
				break;
			default:
				local_u8errStatus = RT_NOK ;
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	89 83       	std	Y+1, r24	; 0x01
    140a:	05 c0       	rjmp	.+10     	; 0x1416 <DIO_u8setPinVal+0x210>
			}
		}
		else
		{
			local_u8errStatus = RT_NOK ;
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	89 83       	std	Y+1, r24	; 0x01
    1410:	02 c0       	rjmp	.+4      	; 0x1416 <DIO_u8setPinVal+0x210>
		}
	}
	else
	{
		local_u8errStatus = RT_NOK ;
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8errStatus ;
    1416:	89 81       	ldd	r24, Y+1	; 0x01
}
    1418:	28 96       	adiw	r28, 0x08	; 8
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	f8 94       	cli
    141e:	de bf       	out	0x3e, r29	; 62
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	cd bf       	out	0x3d, r28	; 61
    1424:	cf 91       	pop	r28
    1426:	df 91       	pop	r29
    1428:	08 95       	ret

0000142a <DIO_u8getPinVal>:

u8 DIO_u8getPinVal(u8 Copy_u8port , u8 Copy_u8pin , u8* Copy_u8pval)
{
    142a:	df 93       	push	r29
    142c:	cf 93       	push	r28
    142e:	cd b7       	in	r28, 0x3d	; 61
    1430:	de b7       	in	r29, 0x3e	; 62
    1432:	27 97       	sbiw	r28, 0x07	; 7
    1434:	0f b6       	in	r0, 0x3f	; 63
    1436:	f8 94       	cli
    1438:	de bf       	out	0x3e, r29	; 62
    143a:	0f be       	out	0x3f, r0	; 63
    143c:	cd bf       	out	0x3d, r28	; 61
    143e:	8a 83       	std	Y+2, r24	; 0x02
    1440:	6b 83       	std	Y+3, r22	; 0x03
    1442:	5d 83       	std	Y+5, r21	; 0x05
    1444:	4c 83       	std	Y+4, r20	; 0x04
	u8 local_u8errStatus = RT_OK ;
    1446:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8pin <= PIN_7 )
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	88 30       	cpi	r24, 0x08	; 8
    144c:	08 f0       	brcs	.+2      	; 0x1450 <DIO_u8getPinVal+0x26>
    144e:	74 c0       	rjmp	.+232    	; 0x1538 <DIO_u8getPinVal+0x10e>
	{
		switch(Copy_u8port)
    1450:	8a 81       	ldd	r24, Y+2	; 0x02
    1452:	28 2f       	mov	r18, r24
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	3f 83       	std	Y+7, r19	; 0x07
    1458:	2e 83       	std	Y+6, r18	; 0x06
    145a:	4e 81       	ldd	r20, Y+6	; 0x06
    145c:	5f 81       	ldd	r21, Y+7	; 0x07
    145e:	41 30       	cpi	r20, 0x01	; 1
    1460:	51 05       	cpc	r21, r1
    1462:	59 f1       	breq	.+86     	; 0x14ba <DIO_u8getPinVal+0x90>
    1464:	8e 81       	ldd	r24, Y+6	; 0x06
    1466:	9f 81       	ldd	r25, Y+7	; 0x07
    1468:	82 30       	cpi	r24, 0x02	; 2
    146a:	91 05       	cpc	r25, r1
    146c:	34 f4       	brge	.+12     	; 0x147a <DIO_u8getPinVal+0x50>
    146e:	2e 81       	ldd	r18, Y+6	; 0x06
    1470:	3f 81       	ldd	r19, Y+7	; 0x07
    1472:	21 15       	cp	r18, r1
    1474:	31 05       	cpc	r19, r1
    1476:	69 f0       	breq	.+26     	; 0x1492 <DIO_u8getPinVal+0x68>
    1478:	5c c0       	rjmp	.+184    	; 0x1532 <DIO_u8getPinVal+0x108>
    147a:	4e 81       	ldd	r20, Y+6	; 0x06
    147c:	5f 81       	ldd	r21, Y+7	; 0x07
    147e:	42 30       	cpi	r20, 0x02	; 2
    1480:	51 05       	cpc	r21, r1
    1482:	79 f1       	breq	.+94     	; 0x14e2 <DIO_u8getPinVal+0xb8>
    1484:	8e 81       	ldd	r24, Y+6	; 0x06
    1486:	9f 81       	ldd	r25, Y+7	; 0x07
    1488:	83 30       	cpi	r24, 0x03	; 3
    148a:	91 05       	cpc	r25, r1
    148c:	09 f4       	brne	.+2      	; 0x1490 <DIO_u8getPinVal+0x66>
    148e:	3d c0       	rjmp	.+122    	; 0x150a <DIO_u8getPinVal+0xe0>
    1490:	50 c0       	rjmp	.+160    	; 0x1532 <DIO_u8getPinVal+0x108>
		{
		case PORT_A:
			*Copy_u8pval=GET_BIT(PINA_REG,Copy_u8pin);
    1492:	e9 e3       	ldi	r30, 0x39	; 57
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	28 2f       	mov	r18, r24
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	8b 81       	ldd	r24, Y+3	; 0x03
    149e:	88 2f       	mov	r24, r24
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	a9 01       	movw	r20, r18
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <DIO_u8getPinVal+0x80>
    14a6:	55 95       	asr	r21
    14a8:	47 95       	ror	r20
    14aa:	8a 95       	dec	r24
    14ac:	e2 f7       	brpl	.-8      	; 0x14a6 <DIO_u8getPinVal+0x7c>
    14ae:	ca 01       	movw	r24, r20
    14b0:	81 70       	andi	r24, 0x01	; 1
    14b2:	ec 81       	ldd	r30, Y+4	; 0x04
    14b4:	fd 81       	ldd	r31, Y+5	; 0x05
    14b6:	80 83       	st	Z, r24
    14b8:	41 c0       	rjmp	.+130    	; 0x153c <DIO_u8getPinVal+0x112>
			break;
		case PORT_B:
			*Copy_u8pval=GET_BIT(PINB_REG,Copy_u8pin);
    14ba:	e6 e3       	ldi	r30, 0x36	; 54
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	28 2f       	mov	r18, r24
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	8b 81       	ldd	r24, Y+3	; 0x03
    14c6:	88 2f       	mov	r24, r24
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	a9 01       	movw	r20, r18
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <DIO_u8getPinVal+0xa8>
    14ce:	55 95       	asr	r21
    14d0:	47 95       	ror	r20
    14d2:	8a 95       	dec	r24
    14d4:	e2 f7       	brpl	.-8      	; 0x14ce <DIO_u8getPinVal+0xa4>
    14d6:	ca 01       	movw	r24, r20
    14d8:	81 70       	andi	r24, 0x01	; 1
    14da:	ec 81       	ldd	r30, Y+4	; 0x04
    14dc:	fd 81       	ldd	r31, Y+5	; 0x05
    14de:	80 83       	st	Z, r24
    14e0:	2d c0       	rjmp	.+90     	; 0x153c <DIO_u8getPinVal+0x112>
			break;
		case PORT_C:
			*Copy_u8pval=GET_BIT(PINC_REG,Copy_u8pin);
    14e2:	e3 e3       	ldi	r30, 0x33	; 51
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	28 2f       	mov	r18, r24
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	8b 81       	ldd	r24, Y+3	; 0x03
    14ee:	88 2f       	mov	r24, r24
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	a9 01       	movw	r20, r18
    14f4:	02 c0       	rjmp	.+4      	; 0x14fa <DIO_u8getPinVal+0xd0>
    14f6:	55 95       	asr	r21
    14f8:	47 95       	ror	r20
    14fa:	8a 95       	dec	r24
    14fc:	e2 f7       	brpl	.-8      	; 0x14f6 <DIO_u8getPinVal+0xcc>
    14fe:	ca 01       	movw	r24, r20
    1500:	81 70       	andi	r24, 0x01	; 1
    1502:	ec 81       	ldd	r30, Y+4	; 0x04
    1504:	fd 81       	ldd	r31, Y+5	; 0x05
    1506:	80 83       	st	Z, r24
    1508:	19 c0       	rjmp	.+50     	; 0x153c <DIO_u8getPinVal+0x112>
			break;
		case PORT_D:
			*Copy_u8pval=GET_BIT(PIND_REG,Copy_u8pin);
    150a:	e0 e3       	ldi	r30, 0x30	; 48
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	28 2f       	mov	r18, r24
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	8b 81       	ldd	r24, Y+3	; 0x03
    1516:	88 2f       	mov	r24, r24
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	a9 01       	movw	r20, r18
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <DIO_u8getPinVal+0xf8>
    151e:	55 95       	asr	r21
    1520:	47 95       	ror	r20
    1522:	8a 95       	dec	r24
    1524:	e2 f7       	brpl	.-8      	; 0x151e <DIO_u8getPinVal+0xf4>
    1526:	ca 01       	movw	r24, r20
    1528:	81 70       	andi	r24, 0x01	; 1
    152a:	ec 81       	ldd	r30, Y+4	; 0x04
    152c:	fd 81       	ldd	r31, Y+5	; 0x05
    152e:	80 83       	st	Z, r24
    1530:	05 c0       	rjmp	.+10     	; 0x153c <DIO_u8getPinVal+0x112>
			break;
		default:
			local_u8errStatus = RT_NOK ;
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	89 83       	std	Y+1, r24	; 0x01
    1536:	02 c0       	rjmp	.+4      	; 0x153c <DIO_u8getPinVal+0x112>
		}
	}
	else
	{
		local_u8errStatus = RT_NOK ;
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8errStatus ;
    153c:	89 81       	ldd	r24, Y+1	; 0x01
}
    153e:	27 96       	adiw	r28, 0x07	; 7
    1540:	0f b6       	in	r0, 0x3f	; 63
    1542:	f8 94       	cli
    1544:	de bf       	out	0x3e, r29	; 62
    1546:	0f be       	out	0x3f, r0	; 63
    1548:	cd bf       	out	0x3d, r28	; 61
    154a:	cf 91       	pop	r28
    154c:	df 91       	pop	r29
    154e:	08 95       	ret

00001550 <ADC_vidADCInit>:
#include "../DIO/DIO_int.h"
#include "../../Libs/bitmath.h"


void ADC_vidADCInit(void)
{
    1550:	df 93       	push	r29
    1552:	cf 93       	push	r28
    1554:	cd b7       	in	r28, 0x3d	; 61
    1556:	de b7       	in	r29, 0x3e	; 62
	/*ENABLE*/
	SET_BIT(ADCSRA_REG, 7);
    1558:	a6 e2       	ldi	r26, 0x26	; 38
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	e6 e2       	ldi	r30, 0x26	; 38
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	80 68       	ori	r24, 0x80	; 128
    1564:	8c 93       	st	X, r24

	/*VRef*/
	SET_BIT(ADMUX_REG, 6);
    1566:	a7 e2       	ldi	r26, 0x27	; 39
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	e7 e2       	ldi	r30, 0x27	; 39
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	80 64       	ori	r24, 0x40	; 64
    1572:	8c 93       	st	X, r24
	CLR_BIT(ADMUX_REG, 7);
    1574:	a7 e2       	ldi	r26, 0x27	; 39
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	e7 e2       	ldi	r30, 0x27	; 39
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	8f 77       	andi	r24, 0x7F	; 127
    1580:	8c 93       	st	X, r24

	/*Res = 10 bit*/
	CLR_BIT(ADMUX_REG, 5);
    1582:	a7 e2       	ldi	r26, 0x27	; 39
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	e7 e2       	ldi	r30, 0x27	; 39
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	8f 7d       	andi	r24, 0xDF	; 223
    158e:	8c 93       	st	X, r24

	/*Single Conv*/
	CLR_BIT(ADCSRA_REG, 5);
    1590:	a6 e2       	ldi	r26, 0x26	; 38
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	e6 e2       	ldi	r30, 0x26	; 38
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	8f 7d       	andi	r24, 0xDF	; 223
    159c:	8c 93       	st	X, r24

	/*Prescalar*/
	SET_BIT(ADCSRA_REG, 0);
    159e:	a6 e2       	ldi	r26, 0x26	; 38
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e6 e2       	ldi	r30, 0x26	; 38
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	81 60       	ori	r24, 0x01	; 1
    15aa:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA_REG, 1);
    15ac:	a6 e2       	ldi	r26, 0x26	; 38
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	e6 e2       	ldi	r30, 0x26	; 38
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	8d 7f       	andi	r24, 0xFD	; 253
    15b8:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG, 2);
    15ba:	a6 e2       	ldi	r26, 0x26	; 38
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	e6 e2       	ldi	r30, 0x26	; 38
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	84 60       	ori	r24, 0x04	; 4
    15c6:	8c 93       	st	X, r24
}
    15c8:	cf 91       	pop	r28
    15ca:	df 91       	pop	r29
    15cc:	08 95       	ret

000015ce <ADC_u8ADCRead>:



u16 ADC_u8ADCRead(u8 copy_u8Channel)
{
    15ce:	df 93       	push	r29
    15d0:	cf 93       	push	r28
    15d2:	00 d0       	rcall	.+0      	; 0x15d4 <ADC_u8ADCRead+0x6>
    15d4:	0f 92       	push	r0
    15d6:	cd b7       	in	r28, 0x3d	; 61
    15d8:	de b7       	in	r29, 0x3e	; 62
    15da:	8b 83       	std	Y+3, r24	; 0x03
	u16 local_u16DigitalRead;
	ADMUX_REG &= 0b11100000;
    15dc:	a7 e2       	ldi	r26, 0x27	; 39
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	e7 e2       	ldi	r30, 0x27	; 39
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	80 7e       	andi	r24, 0xE0	; 224
    15e8:	8c 93       	st	X, r24
	ADMUX_REG |= copy_u8Channel;
    15ea:	a7 e2       	ldi	r26, 0x27	; 39
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	e7 e2       	ldi	r30, 0x27	; 39
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	90 81       	ld	r25, Z
    15f4:	8b 81       	ldd	r24, Y+3	; 0x03
    15f6:	89 2b       	or	r24, r25
    15f8:	8c 93       	st	X, r24

	SET_BIT(ADCSRA_REG, 6);
    15fa:	a6 e2       	ldi	r26, 0x26	; 38
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	e6 e2       	ldi	r30, 0x26	; 38
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	80 64       	ori	r24, 0x40	; 64
    1606:	8c 93       	st	X, r24

	while(GET_BIT(ADCSRA_REG, 4)==0);
    1608:	e6 e2       	ldi	r30, 0x26	; 38
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	82 95       	swap	r24
    1610:	8f 70       	andi	r24, 0x0F	; 15
    1612:	88 2f       	mov	r24, r24
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	81 70       	andi	r24, 0x01	; 1
    1618:	90 70       	andi	r25, 0x00	; 0
    161a:	00 97       	sbiw	r24, 0x00	; 0
    161c:	a9 f3       	breq	.-22     	; 0x1608 <ADC_u8ADCRead+0x3a>

	SET_BIT(ADCSRA_REG, 4);
    161e:	a6 e2       	ldi	r26, 0x26	; 38
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	e6 e2       	ldi	r30, 0x26	; 38
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	80 61       	ori	r24, 0x10	; 16
    162a:	8c 93       	st	X, r24

	local_u16DigitalRead = ADCL_REG;
    162c:	e4 e2       	ldi	r30, 0x24	; 36
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	88 2f       	mov	r24, r24
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	9a 83       	std	Y+2, r25	; 0x02
    1638:	89 83       	std	Y+1, r24	; 0x01
	local_u16DigitalRead |= ADCH_REG<<8;
    163a:	e5 e2       	ldi	r30, 0x25	; 37
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	88 2f       	mov	r24, r24
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	98 2f       	mov	r25, r24
    1646:	88 27       	eor	r24, r24
    1648:	9c 01       	movw	r18, r24
    164a:	89 81       	ldd	r24, Y+1	; 0x01
    164c:	9a 81       	ldd	r25, Y+2	; 0x02
    164e:	82 2b       	or	r24, r18
    1650:	93 2b       	or	r25, r19
    1652:	9a 83       	std	Y+2, r25	; 0x02
    1654:	89 83       	std	Y+1, r24	; 0x01

	return local_u16DigitalRead;
    1656:	89 81       	ldd	r24, Y+1	; 0x01
    1658:	9a 81       	ldd	r25, Y+2	; 0x02
}
    165a:	0f 90       	pop	r0
    165c:	0f 90       	pop	r0
    165e:	0f 90       	pop	r0
    1660:	cf 91       	pop	r28
    1662:	df 91       	pop	r29
    1664:	08 95       	ret

00001666 <LCD_vidWriteSpecialCharecter>:

#include "LCD_config.h"
#include "LCD_int.h"

void LCD_vidWriteSpecialCharecter(u8 *copy_u8pPattern, u8 copy_u8BlockNo, u8 copy_u8XPos, u8 copy_u8YPos)
{
    1666:	0f 93       	push	r16
    1668:	1f 93       	push	r17
    166a:	df 93       	push	r29
    166c:	cf 93       	push	r28
    166e:	cd b7       	in	r28, 0x3d	; 61
    1670:	de b7       	in	r29, 0x3e	; 62
    1672:	cd 54       	subi	r28, 0x4D	; 77
    1674:	d0 40       	sbci	r29, 0x00	; 0
    1676:	0f b6       	in	r0, 0x3f	; 63
    1678:	f8 94       	cli
    167a:	de bf       	out	0x3e, r29	; 62
    167c:	0f be       	out	0x3f, r0	; 63
    167e:	cd bf       	out	0x3d, r28	; 61
    1680:	fe 01       	movw	r30, r28
    1682:	e7 5b       	subi	r30, 0xB7	; 183
    1684:	ff 4f       	sbci	r31, 0xFF	; 255
    1686:	91 83       	std	Z+1, r25	; 0x01
    1688:	80 83       	st	Z, r24
    168a:	fe 01       	movw	r30, r28
    168c:	e5 5b       	subi	r30, 0xB5	; 181
    168e:	ff 4f       	sbci	r31, 0xFF	; 255
    1690:	60 83       	st	Z, r22
    1692:	fe 01       	movw	r30, r28
    1694:	e4 5b       	subi	r30, 0xB4	; 180
    1696:	ff 4f       	sbci	r31, 0xFF	; 255
    1698:	40 83       	st	Z, r20
    169a:	fe 01       	movw	r30, r28
    169c:	e3 5b       	subi	r30, 0xB3	; 179
    169e:	ff 4f       	sbci	r31, 0xFF	; 255
    16a0:	20 83       	st	Z, r18
	u8 local_u8CGRAMAdress = copy_u8BlockNo * 8, local_u8Counter;
    16a2:	fe 01       	movw	r30, r28
    16a4:	e5 5b       	subi	r30, 0xB5	; 181
    16a6:	ff 4f       	sbci	r31, 0xFF	; 255
    16a8:	80 81       	ld	r24, Z
    16aa:	88 2f       	mov	r24, r24
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	88 0f       	add	r24, r24
    16b0:	99 1f       	adc	r25, r25
    16b2:	88 0f       	add	r24, r24
    16b4:	99 1f       	adc	r25, r25
    16b6:	88 0f       	add	r24, r24
    16b8:	99 1f       	adc	r25, r25
    16ba:	fe 01       	movw	r30, r28
    16bc:	e8 5b       	subi	r30, 0xB8	; 184
    16be:	ff 4f       	sbci	r31, 0xFF	; 255
    16c0:	80 83       	st	Z, r24
    16c2:	fe 01       	movw	r30, r28
    16c4:	ed 5b       	subi	r30, 0xBD	; 189
    16c6:	ff 4f       	sbci	r31, 0xFF	; 255
    16c8:	80 e0       	ldi	r24, 0x00	; 0
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	a0 e8       	ldi	r26, 0x80	; 128
    16ce:	bf e3       	ldi	r27, 0x3F	; 63
    16d0:	80 83       	st	Z, r24
    16d2:	91 83       	std	Z+1, r25	; 0x01
    16d4:	a2 83       	std	Z+2, r26	; 0x02
    16d6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16d8:	8e 01       	movw	r16, r28
    16da:	01 5c       	subi	r16, 0xC1	; 193
    16dc:	1f 4f       	sbci	r17, 0xFF	; 255
    16de:	fe 01       	movw	r30, r28
    16e0:	ed 5b       	subi	r30, 0xBD	; 189
    16e2:	ff 4f       	sbci	r31, 0xFF	; 255
    16e4:	60 81       	ld	r22, Z
    16e6:	71 81       	ldd	r23, Z+1	; 0x01
    16e8:	82 81       	ldd	r24, Z+2	; 0x02
    16ea:	93 81       	ldd	r25, Z+3	; 0x03
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	4a ef       	ldi	r20, 0xFA	; 250
    16f2:	54 e4       	ldi	r21, 0x44	; 68
    16f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16f8:	dc 01       	movw	r26, r24
    16fa:	cb 01       	movw	r24, r22
    16fc:	f8 01       	movw	r30, r16
    16fe:	80 83       	st	Z, r24
    1700:	91 83       	std	Z+1, r25	; 0x01
    1702:	a2 83       	std	Z+2, r26	; 0x02
    1704:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1706:	fe 01       	movw	r30, r28
    1708:	ff 96       	adiw	r30, 0x3f	; 63
    170a:	60 81       	ld	r22, Z
    170c:	71 81       	ldd	r23, Z+1	; 0x01
    170e:	82 81       	ldd	r24, Z+2	; 0x02
    1710:	93 81       	ldd	r25, Z+3	; 0x03
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	40 e8       	ldi	r20, 0x80	; 128
    1718:	5f e3       	ldi	r21, 0x3F	; 63
    171a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    171e:	88 23       	and	r24, r24
    1720:	2c f4       	brge	.+10     	; 0x172c <LCD_vidWriteSpecialCharecter+0xc6>
		__ticks = 1;
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	9e af       	std	Y+62, r25	; 0x3e
    1728:	8d af       	std	Y+61, r24	; 0x3d
    172a:	46 c0       	rjmp	.+140    	; 0x17b8 <LCD_vidWriteSpecialCharecter+0x152>
	else if (__tmp > 65535)
    172c:	fe 01       	movw	r30, r28
    172e:	ff 96       	adiw	r30, 0x3f	; 63
    1730:	60 81       	ld	r22, Z
    1732:	71 81       	ldd	r23, Z+1	; 0x01
    1734:	82 81       	ldd	r24, Z+2	; 0x02
    1736:	93 81       	ldd	r25, Z+3	; 0x03
    1738:	20 e0       	ldi	r18, 0x00	; 0
    173a:	3f ef       	ldi	r19, 0xFF	; 255
    173c:	4f e7       	ldi	r20, 0x7F	; 127
    173e:	57 e4       	ldi	r21, 0x47	; 71
    1740:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1744:	18 16       	cp	r1, r24
    1746:	64 f5       	brge	.+88     	; 0x17a0 <LCD_vidWriteSpecialCharecter+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1748:	fe 01       	movw	r30, r28
    174a:	ed 5b       	subi	r30, 0xBD	; 189
    174c:	ff 4f       	sbci	r31, 0xFF	; 255
    174e:	60 81       	ld	r22, Z
    1750:	71 81       	ldd	r23, Z+1	; 0x01
    1752:	82 81       	ldd	r24, Z+2	; 0x02
    1754:	93 81       	ldd	r25, Z+3	; 0x03
    1756:	20 e0       	ldi	r18, 0x00	; 0
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	40 e2       	ldi	r20, 0x20	; 32
    175c:	51 e4       	ldi	r21, 0x41	; 65
    175e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1762:	dc 01       	movw	r26, r24
    1764:	cb 01       	movw	r24, r22
    1766:	bc 01       	movw	r22, r24
    1768:	cd 01       	movw	r24, r26
    176a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    176e:	dc 01       	movw	r26, r24
    1770:	cb 01       	movw	r24, r22
    1772:	9e af       	std	Y+62, r25	; 0x3e
    1774:	8d af       	std	Y+61, r24	; 0x3d
    1776:	0f c0       	rjmp	.+30     	; 0x1796 <LCD_vidWriteSpecialCharecter+0x130>
    1778:	88 ec       	ldi	r24, 0xC8	; 200
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	9c af       	std	Y+60, r25	; 0x3c
    177e:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1780:	8b ad       	ldd	r24, Y+59	; 0x3b
    1782:	9c ad       	ldd	r25, Y+60	; 0x3c
    1784:	01 97       	sbiw	r24, 0x01	; 1
    1786:	f1 f7       	brne	.-4      	; 0x1784 <LCD_vidWriteSpecialCharecter+0x11e>
    1788:	9c af       	std	Y+60, r25	; 0x3c
    178a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    178c:	8d ad       	ldd	r24, Y+61	; 0x3d
    178e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1790:	01 97       	sbiw	r24, 0x01	; 1
    1792:	9e af       	std	Y+62, r25	; 0x3e
    1794:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1796:	8d ad       	ldd	r24, Y+61	; 0x3d
    1798:	9e ad       	ldd	r25, Y+62	; 0x3e
    179a:	00 97       	sbiw	r24, 0x00	; 0
    179c:	69 f7       	brne	.-38     	; 0x1778 <LCD_vidWriteSpecialCharecter+0x112>
    179e:	16 c0       	rjmp	.+44     	; 0x17cc <LCD_vidWriteSpecialCharecter+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17a0:	fe 01       	movw	r30, r28
    17a2:	ff 96       	adiw	r30, 0x3f	; 63
    17a4:	60 81       	ld	r22, Z
    17a6:	71 81       	ldd	r23, Z+1	; 0x01
    17a8:	82 81       	ldd	r24, Z+2	; 0x02
    17aa:	93 81       	ldd	r25, Z+3	; 0x03
    17ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17b0:	dc 01       	movw	r26, r24
    17b2:	cb 01       	movw	r24, r22
    17b4:	9e af       	std	Y+62, r25	; 0x3e
    17b6:	8d af       	std	Y+61, r24	; 0x3d
    17b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    17ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    17bc:	9a af       	std	Y+58, r25	; 0x3a
    17be:	89 af       	std	Y+57, r24	; 0x39
    17c0:	89 ad       	ldd	r24, Y+57	; 0x39
    17c2:	9a ad       	ldd	r25, Y+58	; 0x3a
    17c4:	01 97       	sbiw	r24, 0x01	; 1
    17c6:	f1 f7       	brne	.-4      	; 0x17c4 <LCD_vidWriteSpecialCharecter+0x15e>
    17c8:	9a af       	std	Y+58, r25	; 0x3a
    17ca:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1);
	LCD_u8sendCommand(local_u8CGRAMAdress + 64);
    17cc:	fe 01       	movw	r30, r28
    17ce:	e8 5b       	subi	r30, 0xB8	; 184
    17d0:	ff 4f       	sbci	r31, 0xFF	; 255
    17d2:	80 81       	ld	r24, Z
    17d4:	80 5c       	subi	r24, 0xC0	; 192
    17d6:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <LCD_u8sendCommand>
    17da:	80 e0       	ldi	r24, 0x00	; 0
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	a0 e8       	ldi	r26, 0x80	; 128
    17e0:	bf e3       	ldi	r27, 0x3F	; 63
    17e2:	8d ab       	std	Y+53, r24	; 0x35
    17e4:	9e ab       	std	Y+54, r25	; 0x36
    17e6:	af ab       	std	Y+55, r26	; 0x37
    17e8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ea:	6d a9       	ldd	r22, Y+53	; 0x35
    17ec:	7e a9       	ldd	r23, Y+54	; 0x36
    17ee:	8f a9       	ldd	r24, Y+55	; 0x37
    17f0:	98 ad       	ldd	r25, Y+56	; 0x38
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	4a ef       	ldi	r20, 0xFA	; 250
    17f8:	54 e4       	ldi	r21, 0x44	; 68
    17fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17fe:	dc 01       	movw	r26, r24
    1800:	cb 01       	movw	r24, r22
    1802:	89 ab       	std	Y+49, r24	; 0x31
    1804:	9a ab       	std	Y+50, r25	; 0x32
    1806:	ab ab       	std	Y+51, r26	; 0x33
    1808:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    180a:	69 a9       	ldd	r22, Y+49	; 0x31
    180c:	7a a9       	ldd	r23, Y+50	; 0x32
    180e:	8b a9       	ldd	r24, Y+51	; 0x33
    1810:	9c a9       	ldd	r25, Y+52	; 0x34
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	40 e8       	ldi	r20, 0x80	; 128
    1818:	5f e3       	ldi	r21, 0x3F	; 63
    181a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    181e:	88 23       	and	r24, r24
    1820:	2c f4       	brge	.+10     	; 0x182c <LCD_vidWriteSpecialCharecter+0x1c6>
		__ticks = 1;
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	98 ab       	std	Y+48, r25	; 0x30
    1828:	8f a7       	std	Y+47, r24	; 0x2f
    182a:	3f c0       	rjmp	.+126    	; 0x18aa <LCD_vidWriteSpecialCharecter+0x244>
	else if (__tmp > 65535)
    182c:	69 a9       	ldd	r22, Y+49	; 0x31
    182e:	7a a9       	ldd	r23, Y+50	; 0x32
    1830:	8b a9       	ldd	r24, Y+51	; 0x33
    1832:	9c a9       	ldd	r25, Y+52	; 0x34
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	3f ef       	ldi	r19, 0xFF	; 255
    1838:	4f e7       	ldi	r20, 0x7F	; 127
    183a:	57 e4       	ldi	r21, 0x47	; 71
    183c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1840:	18 16       	cp	r1, r24
    1842:	4c f5       	brge	.+82     	; 0x1896 <LCD_vidWriteSpecialCharecter+0x230>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1844:	6d a9       	ldd	r22, Y+53	; 0x35
    1846:	7e a9       	ldd	r23, Y+54	; 0x36
    1848:	8f a9       	ldd	r24, Y+55	; 0x37
    184a:	98 ad       	ldd	r25, Y+56	; 0x38
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	40 e2       	ldi	r20, 0x20	; 32
    1852:	51 e4       	ldi	r21, 0x41	; 65
    1854:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1858:	dc 01       	movw	r26, r24
    185a:	cb 01       	movw	r24, r22
    185c:	bc 01       	movw	r22, r24
    185e:	cd 01       	movw	r24, r26
    1860:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1864:	dc 01       	movw	r26, r24
    1866:	cb 01       	movw	r24, r22
    1868:	98 ab       	std	Y+48, r25	; 0x30
    186a:	8f a7       	std	Y+47, r24	; 0x2f
    186c:	0f c0       	rjmp	.+30     	; 0x188c <LCD_vidWriteSpecialCharecter+0x226>
    186e:	88 ec       	ldi	r24, 0xC8	; 200
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	9e a7       	std	Y+46, r25	; 0x2e
    1874:	8d a7       	std	Y+45, r24	; 0x2d
    1876:	8d a5       	ldd	r24, Y+45	; 0x2d
    1878:	9e a5       	ldd	r25, Y+46	; 0x2e
    187a:	01 97       	sbiw	r24, 0x01	; 1
    187c:	f1 f7       	brne	.-4      	; 0x187a <LCD_vidWriteSpecialCharecter+0x214>
    187e:	9e a7       	std	Y+46, r25	; 0x2e
    1880:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1882:	8f a5       	ldd	r24, Y+47	; 0x2f
    1884:	98 a9       	ldd	r25, Y+48	; 0x30
    1886:	01 97       	sbiw	r24, 0x01	; 1
    1888:	98 ab       	std	Y+48, r25	; 0x30
    188a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    188c:	8f a5       	ldd	r24, Y+47	; 0x2f
    188e:	98 a9       	ldd	r25, Y+48	; 0x30
    1890:	00 97       	sbiw	r24, 0x00	; 0
    1892:	69 f7       	brne	.-38     	; 0x186e <LCD_vidWriteSpecialCharecter+0x208>
    1894:	14 c0       	rjmp	.+40     	; 0x18be <LCD_vidWriteSpecialCharecter+0x258>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1896:	69 a9       	ldd	r22, Y+49	; 0x31
    1898:	7a a9       	ldd	r23, Y+50	; 0x32
    189a:	8b a9       	ldd	r24, Y+51	; 0x33
    189c:	9c a9       	ldd	r25, Y+52	; 0x34
    189e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18a2:	dc 01       	movw	r26, r24
    18a4:	cb 01       	movw	r24, r22
    18a6:	98 ab       	std	Y+48, r25	; 0x30
    18a8:	8f a7       	std	Y+47, r24	; 0x2f
    18aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    18ac:	98 a9       	ldd	r25, Y+48	; 0x30
    18ae:	9c a7       	std	Y+44, r25	; 0x2c
    18b0:	8b a7       	std	Y+43, r24	; 0x2b
    18b2:	8b a5       	ldd	r24, Y+43	; 0x2b
    18b4:	9c a5       	ldd	r25, Y+44	; 0x2c
    18b6:	01 97       	sbiw	r24, 0x01	; 1
    18b8:	f1 f7       	brne	.-4      	; 0x18b6 <LCD_vidWriteSpecialCharecter+0x250>
    18ba:	9c a7       	std	Y+44, r25	; 0x2c
    18bc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	for(local_u8Counter=0; local_u8Counter<8; local_u8Counter++)
    18be:	fe 01       	movw	r30, r28
    18c0:	e9 5b       	subi	r30, 0xB9	; 185
    18c2:	ff 4f       	sbci	r31, 0xFF	; 255
    18c4:	10 82       	st	Z, r1
    18c6:	8c c0       	rjmp	.+280    	; 0x19e0 <LCD_vidWriteSpecialCharecter+0x37a>
	{
		LCD_u8sendData(copy_u8pPattern[local_u8Counter]);
    18c8:	fe 01       	movw	r30, r28
    18ca:	e9 5b       	subi	r30, 0xB9	; 185
    18cc:	ff 4f       	sbci	r31, 0xFF	; 255
    18ce:	80 81       	ld	r24, Z
    18d0:	28 2f       	mov	r18, r24
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	fe 01       	movw	r30, r28
    18d6:	e7 5b       	subi	r30, 0xB7	; 183
    18d8:	ff 4f       	sbci	r31, 0xFF	; 255
    18da:	80 81       	ld	r24, Z
    18dc:	91 81       	ldd	r25, Z+1	; 0x01
    18de:	fc 01       	movw	r30, r24
    18e0:	e2 0f       	add	r30, r18
    18e2:	f3 1f       	adc	r31, r19
    18e4:	80 81       	ld	r24, Z
    18e6:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <LCD_u8sendData>
    18ea:	80 e0       	ldi	r24, 0x00	; 0
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	a0 e8       	ldi	r26, 0x80	; 128
    18f0:	bf e3       	ldi	r27, 0x3F	; 63
    18f2:	8f a3       	std	Y+39, r24	; 0x27
    18f4:	98 a7       	std	Y+40, r25	; 0x28
    18f6:	a9 a7       	std	Y+41, r26	; 0x29
    18f8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18fa:	6f a1       	ldd	r22, Y+39	; 0x27
    18fc:	78 a5       	ldd	r23, Y+40	; 0x28
    18fe:	89 a5       	ldd	r24, Y+41	; 0x29
    1900:	9a a5       	ldd	r25, Y+42	; 0x2a
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	4a ef       	ldi	r20, 0xFA	; 250
    1908:	54 e4       	ldi	r21, 0x44	; 68
    190a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    190e:	dc 01       	movw	r26, r24
    1910:	cb 01       	movw	r24, r22
    1912:	8b a3       	std	Y+35, r24	; 0x23
    1914:	9c a3       	std	Y+36, r25	; 0x24
    1916:	ad a3       	std	Y+37, r26	; 0x25
    1918:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    191a:	6b a1       	ldd	r22, Y+35	; 0x23
    191c:	7c a1       	ldd	r23, Y+36	; 0x24
    191e:	8d a1       	ldd	r24, Y+37	; 0x25
    1920:	9e a1       	ldd	r25, Y+38	; 0x26
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	40 e8       	ldi	r20, 0x80	; 128
    1928:	5f e3       	ldi	r21, 0x3F	; 63
    192a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    192e:	88 23       	and	r24, r24
    1930:	2c f4       	brge	.+10     	; 0x193c <LCD_vidWriteSpecialCharecter+0x2d6>
		__ticks = 1;
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	9a a3       	std	Y+34, r25	; 0x22
    1938:	89 a3       	std	Y+33, r24	; 0x21
    193a:	3f c0       	rjmp	.+126    	; 0x19ba <LCD_vidWriteSpecialCharecter+0x354>
	else if (__tmp > 65535)
    193c:	6b a1       	ldd	r22, Y+35	; 0x23
    193e:	7c a1       	ldd	r23, Y+36	; 0x24
    1940:	8d a1       	ldd	r24, Y+37	; 0x25
    1942:	9e a1       	ldd	r25, Y+38	; 0x26
    1944:	20 e0       	ldi	r18, 0x00	; 0
    1946:	3f ef       	ldi	r19, 0xFF	; 255
    1948:	4f e7       	ldi	r20, 0x7F	; 127
    194a:	57 e4       	ldi	r21, 0x47	; 71
    194c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1950:	18 16       	cp	r1, r24
    1952:	4c f5       	brge	.+82     	; 0x19a6 <LCD_vidWriteSpecialCharecter+0x340>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1954:	6f a1       	ldd	r22, Y+39	; 0x27
    1956:	78 a5       	ldd	r23, Y+40	; 0x28
    1958:	89 a5       	ldd	r24, Y+41	; 0x29
    195a:	9a a5       	ldd	r25, Y+42	; 0x2a
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	40 e2       	ldi	r20, 0x20	; 32
    1962:	51 e4       	ldi	r21, 0x41	; 65
    1964:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1968:	dc 01       	movw	r26, r24
    196a:	cb 01       	movw	r24, r22
    196c:	bc 01       	movw	r22, r24
    196e:	cd 01       	movw	r24, r26
    1970:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1974:	dc 01       	movw	r26, r24
    1976:	cb 01       	movw	r24, r22
    1978:	9a a3       	std	Y+34, r25	; 0x22
    197a:	89 a3       	std	Y+33, r24	; 0x21
    197c:	0f c0       	rjmp	.+30     	; 0x199c <LCD_vidWriteSpecialCharecter+0x336>
    197e:	88 ec       	ldi	r24, 0xC8	; 200
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	98 a3       	std	Y+32, r25	; 0x20
    1984:	8f 8f       	std	Y+31, r24	; 0x1f
    1986:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1988:	98 a1       	ldd	r25, Y+32	; 0x20
    198a:	01 97       	sbiw	r24, 0x01	; 1
    198c:	f1 f7       	brne	.-4      	; 0x198a <LCD_vidWriteSpecialCharecter+0x324>
    198e:	98 a3       	std	Y+32, r25	; 0x20
    1990:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1992:	89 a1       	ldd	r24, Y+33	; 0x21
    1994:	9a a1       	ldd	r25, Y+34	; 0x22
    1996:	01 97       	sbiw	r24, 0x01	; 1
    1998:	9a a3       	std	Y+34, r25	; 0x22
    199a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    199c:	89 a1       	ldd	r24, Y+33	; 0x21
    199e:	9a a1       	ldd	r25, Y+34	; 0x22
    19a0:	00 97       	sbiw	r24, 0x00	; 0
    19a2:	69 f7       	brne	.-38     	; 0x197e <LCD_vidWriteSpecialCharecter+0x318>
    19a4:	14 c0       	rjmp	.+40     	; 0x19ce <LCD_vidWriteSpecialCharecter+0x368>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19a6:	6b a1       	ldd	r22, Y+35	; 0x23
    19a8:	7c a1       	ldd	r23, Y+36	; 0x24
    19aa:	8d a1       	ldd	r24, Y+37	; 0x25
    19ac:	9e a1       	ldd	r25, Y+38	; 0x26
    19ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19b2:	dc 01       	movw	r26, r24
    19b4:	cb 01       	movw	r24, r22
    19b6:	9a a3       	std	Y+34, r25	; 0x22
    19b8:	89 a3       	std	Y+33, r24	; 0x21
    19ba:	89 a1       	ldd	r24, Y+33	; 0x21
    19bc:	9a a1       	ldd	r25, Y+34	; 0x22
    19be:	9e 8f       	std	Y+30, r25	; 0x1e
    19c0:	8d 8f       	std	Y+29, r24	; 0x1d
    19c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19c4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19c6:	01 97       	sbiw	r24, 0x01	; 1
    19c8:	f1 f7       	brne	.-4      	; 0x19c6 <LCD_vidWriteSpecialCharecter+0x360>
    19ca:	9e 8f       	std	Y+30, r25	; 0x1e
    19cc:	8d 8f       	std	Y+29, r24	; 0x1d
	u8 local_u8CGRAMAdress = copy_u8BlockNo * 8, local_u8Counter;

	_delay_ms(1);
	LCD_u8sendCommand(local_u8CGRAMAdress + 64);
	_delay_ms(1);
	for(local_u8Counter=0; local_u8Counter<8; local_u8Counter++)
    19ce:	de 01       	movw	r26, r28
    19d0:	a9 5b       	subi	r26, 0xB9	; 185
    19d2:	bf 4f       	sbci	r27, 0xFF	; 255
    19d4:	fe 01       	movw	r30, r28
    19d6:	e9 5b       	subi	r30, 0xB9	; 185
    19d8:	ff 4f       	sbci	r31, 0xFF	; 255
    19da:	80 81       	ld	r24, Z
    19dc:	8f 5f       	subi	r24, 0xFF	; 255
    19de:	8c 93       	st	X, r24
    19e0:	fe 01       	movw	r30, r28
    19e2:	e9 5b       	subi	r30, 0xB9	; 185
    19e4:	ff 4f       	sbci	r31, 0xFF	; 255
    19e6:	80 81       	ld	r24, Z
    19e8:	88 30       	cpi	r24, 0x08	; 8
    19ea:	08 f4       	brcc	.+2      	; 0x19ee <LCD_vidWriteSpecialCharecter+0x388>
    19ec:	6d cf       	rjmp	.-294    	; 0x18c8 <LCD_vidWriteSpecialCharecter+0x262>
	{
		LCD_u8sendData(copy_u8pPattern[local_u8Counter]);
		_delay_ms(1);
	}

	LCD_vidGoToXY(copy_u8XPos, copy_u8YPos);
    19ee:	fe 01       	movw	r30, r28
    19f0:	e4 5b       	subi	r30, 0xB4	; 180
    19f2:	ff 4f       	sbci	r31, 0xFF	; 255
    19f4:	de 01       	movw	r26, r28
    19f6:	a3 5b       	subi	r26, 0xB3	; 179
    19f8:	bf 4f       	sbci	r27, 0xFF	; 255
    19fa:	80 81       	ld	r24, Z
    19fc:	6c 91       	ld	r22, X
    19fe:	0e 94 1a 11 	call	0x2234	; 0x2234 <LCD_vidGoToXY>
    1a02:	80 e0       	ldi	r24, 0x00	; 0
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	a0 e8       	ldi	r26, 0x80	; 128
    1a08:	bf e3       	ldi	r27, 0x3F	; 63
    1a0a:	89 8f       	std	Y+25, r24	; 0x19
    1a0c:	9a 8f       	std	Y+26, r25	; 0x1a
    1a0e:	ab 8f       	std	Y+27, r26	; 0x1b
    1a10:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a12:	69 8d       	ldd	r22, Y+25	; 0x19
    1a14:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a16:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a18:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a1a:	20 e0       	ldi	r18, 0x00	; 0
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	4a ef       	ldi	r20, 0xFA	; 250
    1a20:	54 e4       	ldi	r21, 0x44	; 68
    1a22:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a26:	dc 01       	movw	r26, r24
    1a28:	cb 01       	movw	r24, r22
    1a2a:	8d 8b       	std	Y+21, r24	; 0x15
    1a2c:	9e 8b       	std	Y+22, r25	; 0x16
    1a2e:	af 8b       	std	Y+23, r26	; 0x17
    1a30:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a32:	6d 89       	ldd	r22, Y+21	; 0x15
    1a34:	7e 89       	ldd	r23, Y+22	; 0x16
    1a36:	8f 89       	ldd	r24, Y+23	; 0x17
    1a38:	98 8d       	ldd	r25, Y+24	; 0x18
    1a3a:	20 e0       	ldi	r18, 0x00	; 0
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	40 e8       	ldi	r20, 0x80	; 128
    1a40:	5f e3       	ldi	r21, 0x3F	; 63
    1a42:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a46:	88 23       	and	r24, r24
    1a48:	2c f4       	brge	.+10     	; 0x1a54 <LCD_vidWriteSpecialCharecter+0x3ee>
		__ticks = 1;
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	9c 8b       	std	Y+20, r25	; 0x14
    1a50:	8b 8b       	std	Y+19, r24	; 0x13
    1a52:	3f c0       	rjmp	.+126    	; 0x1ad2 <LCD_vidWriteSpecialCharecter+0x46c>
	else if (__tmp > 65535)
    1a54:	6d 89       	ldd	r22, Y+21	; 0x15
    1a56:	7e 89       	ldd	r23, Y+22	; 0x16
    1a58:	8f 89       	ldd	r24, Y+23	; 0x17
    1a5a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a5c:	20 e0       	ldi	r18, 0x00	; 0
    1a5e:	3f ef       	ldi	r19, 0xFF	; 255
    1a60:	4f e7       	ldi	r20, 0x7F	; 127
    1a62:	57 e4       	ldi	r21, 0x47	; 71
    1a64:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a68:	18 16       	cp	r1, r24
    1a6a:	4c f5       	brge	.+82     	; 0x1abe <LCD_vidWriteSpecialCharecter+0x458>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a6c:	69 8d       	ldd	r22, Y+25	; 0x19
    1a6e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a70:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a72:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a74:	20 e0       	ldi	r18, 0x00	; 0
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	40 e2       	ldi	r20, 0x20	; 32
    1a7a:	51 e4       	ldi	r21, 0x41	; 65
    1a7c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a80:	dc 01       	movw	r26, r24
    1a82:	cb 01       	movw	r24, r22
    1a84:	bc 01       	movw	r22, r24
    1a86:	cd 01       	movw	r24, r26
    1a88:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	cb 01       	movw	r24, r22
    1a90:	9c 8b       	std	Y+20, r25	; 0x14
    1a92:	8b 8b       	std	Y+19, r24	; 0x13
    1a94:	0f c0       	rjmp	.+30     	; 0x1ab4 <LCD_vidWriteSpecialCharecter+0x44e>
    1a96:	88 ec       	ldi	r24, 0xC8	; 200
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	9a 8b       	std	Y+18, r25	; 0x12
    1a9c:	89 8b       	std	Y+17, r24	; 0x11
    1a9e:	89 89       	ldd	r24, Y+17	; 0x11
    1aa0:	9a 89       	ldd	r25, Y+18	; 0x12
    1aa2:	01 97       	sbiw	r24, 0x01	; 1
    1aa4:	f1 f7       	brne	.-4      	; 0x1aa2 <LCD_vidWriteSpecialCharecter+0x43c>
    1aa6:	9a 8b       	std	Y+18, r25	; 0x12
    1aa8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aaa:	8b 89       	ldd	r24, Y+19	; 0x13
    1aac:	9c 89       	ldd	r25, Y+20	; 0x14
    1aae:	01 97       	sbiw	r24, 0x01	; 1
    1ab0:	9c 8b       	std	Y+20, r25	; 0x14
    1ab2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ab4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ab6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ab8:	00 97       	sbiw	r24, 0x00	; 0
    1aba:	69 f7       	brne	.-38     	; 0x1a96 <LCD_vidWriteSpecialCharecter+0x430>
    1abc:	14 c0       	rjmp	.+40     	; 0x1ae6 <LCD_vidWriteSpecialCharecter+0x480>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1abe:	6d 89       	ldd	r22, Y+21	; 0x15
    1ac0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ac2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ac4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ac6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aca:	dc 01       	movw	r26, r24
    1acc:	cb 01       	movw	r24, r22
    1ace:	9c 8b       	std	Y+20, r25	; 0x14
    1ad0:	8b 8b       	std	Y+19, r24	; 0x13
    1ad2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ad4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ad6:	98 8b       	std	Y+16, r25	; 0x10
    1ad8:	8f 87       	std	Y+15, r24	; 0x0f
    1ada:	8f 85       	ldd	r24, Y+15	; 0x0f
    1adc:	98 89       	ldd	r25, Y+16	; 0x10
    1ade:	01 97       	sbiw	r24, 0x01	; 1
    1ae0:	f1 f7       	brne	.-4      	; 0x1ade <LCD_vidWriteSpecialCharecter+0x478>
    1ae2:	98 8b       	std	Y+16, r25	; 0x10
    1ae4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_u8sendData(copy_u8BlockNo);
    1ae6:	fe 01       	movw	r30, r28
    1ae8:	e5 5b       	subi	r30, 0xB5	; 181
    1aea:	ff 4f       	sbci	r31, 0xFF	; 255
    1aec:	80 81       	ld	r24, Z
    1aee:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <LCD_u8sendData>
    1af2:	80 e0       	ldi	r24, 0x00	; 0
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	a0 e8       	ldi	r26, 0x80	; 128
    1af8:	bf e3       	ldi	r27, 0x3F	; 63
    1afa:	8b 87       	std	Y+11, r24	; 0x0b
    1afc:	9c 87       	std	Y+12, r25	; 0x0c
    1afe:	ad 87       	std	Y+13, r26	; 0x0d
    1b00:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b02:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b04:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b06:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b08:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	4a ef       	ldi	r20, 0xFA	; 250
    1b10:	54 e4       	ldi	r21, 0x44	; 68
    1b12:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b16:	dc 01       	movw	r26, r24
    1b18:	cb 01       	movw	r24, r22
    1b1a:	8f 83       	std	Y+7, r24	; 0x07
    1b1c:	98 87       	std	Y+8, r25	; 0x08
    1b1e:	a9 87       	std	Y+9, r26	; 0x09
    1b20:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b22:	6f 81       	ldd	r22, Y+7	; 0x07
    1b24:	78 85       	ldd	r23, Y+8	; 0x08
    1b26:	89 85       	ldd	r24, Y+9	; 0x09
    1b28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b2a:	20 e0       	ldi	r18, 0x00	; 0
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	40 e8       	ldi	r20, 0x80	; 128
    1b30:	5f e3       	ldi	r21, 0x3F	; 63
    1b32:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b36:	88 23       	and	r24, r24
    1b38:	2c f4       	brge	.+10     	; 0x1b44 <LCD_vidWriteSpecialCharecter+0x4de>
		__ticks = 1;
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	9e 83       	std	Y+6, r25	; 0x06
    1b40:	8d 83       	std	Y+5, r24	; 0x05
    1b42:	3f c0       	rjmp	.+126    	; 0x1bc2 <LCD_vidWriteSpecialCharecter+0x55c>
	else if (__tmp > 65535)
    1b44:	6f 81       	ldd	r22, Y+7	; 0x07
    1b46:	78 85       	ldd	r23, Y+8	; 0x08
    1b48:	89 85       	ldd	r24, Y+9	; 0x09
    1b4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b4c:	20 e0       	ldi	r18, 0x00	; 0
    1b4e:	3f ef       	ldi	r19, 0xFF	; 255
    1b50:	4f e7       	ldi	r20, 0x7F	; 127
    1b52:	57 e4       	ldi	r21, 0x47	; 71
    1b54:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b58:	18 16       	cp	r1, r24
    1b5a:	4c f5       	brge	.+82     	; 0x1bae <LCD_vidWriteSpecialCharecter+0x548>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b60:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b62:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	40 e2       	ldi	r20, 0x20	; 32
    1b6a:	51 e4       	ldi	r21, 0x41	; 65
    1b6c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b70:	dc 01       	movw	r26, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	bc 01       	movw	r22, r24
    1b76:	cd 01       	movw	r24, r26
    1b78:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b7c:	dc 01       	movw	r26, r24
    1b7e:	cb 01       	movw	r24, r22
    1b80:	9e 83       	std	Y+6, r25	; 0x06
    1b82:	8d 83       	std	Y+5, r24	; 0x05
    1b84:	0f c0       	rjmp	.+30     	; 0x1ba4 <LCD_vidWriteSpecialCharecter+0x53e>
    1b86:	88 ec       	ldi	r24, 0xC8	; 200
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	9c 83       	std	Y+4, r25	; 0x04
    1b8c:	8b 83       	std	Y+3, r24	; 0x03
    1b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b90:	9c 81       	ldd	r25, Y+4	; 0x04
    1b92:	01 97       	sbiw	r24, 0x01	; 1
    1b94:	f1 f7       	brne	.-4      	; 0x1b92 <LCD_vidWriteSpecialCharecter+0x52c>
    1b96:	9c 83       	std	Y+4, r25	; 0x04
    1b98:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b9e:	01 97       	sbiw	r24, 0x01	; 1
    1ba0:	9e 83       	std	Y+6, r25	; 0x06
    1ba2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba8:	00 97       	sbiw	r24, 0x00	; 0
    1baa:	69 f7       	brne	.-38     	; 0x1b86 <LCD_vidWriteSpecialCharecter+0x520>
    1bac:	14 c0       	rjmp	.+40     	; 0x1bd6 <LCD_vidWriteSpecialCharecter+0x570>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bae:	6f 81       	ldd	r22, Y+7	; 0x07
    1bb0:	78 85       	ldd	r23, Y+8	; 0x08
    1bb2:	89 85       	ldd	r24, Y+9	; 0x09
    1bb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bb6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bba:	dc 01       	movw	r26, r24
    1bbc:	cb 01       	movw	r24, r22
    1bbe:	9e 83       	std	Y+6, r25	; 0x06
    1bc0:	8d 83       	std	Y+5, r24	; 0x05
    1bc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc6:	9a 83       	std	Y+2, r25	; 0x02
    1bc8:	89 83       	std	Y+1, r24	; 0x01
    1bca:	89 81       	ldd	r24, Y+1	; 0x01
    1bcc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bce:	01 97       	sbiw	r24, 0x01	; 1
    1bd0:	f1 f7       	brne	.-4      	; 0x1bce <LCD_vidWriteSpecialCharecter+0x568>
    1bd2:	9a 83       	std	Y+2, r25	; 0x02
    1bd4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1bd6:	c3 5b       	subi	r28, 0xB3	; 179
    1bd8:	df 4f       	sbci	r29, 0xFF	; 255
    1bda:	0f b6       	in	r0, 0x3f	; 63
    1bdc:	f8 94       	cli
    1bde:	de bf       	out	0x3e, r29	; 62
    1be0:	0f be       	out	0x3f, r0	; 63
    1be2:	cd bf       	out	0x3d, r28	; 61
    1be4:	cf 91       	pop	r28
    1be6:	df 91       	pop	r29
    1be8:	1f 91       	pop	r17
    1bea:	0f 91       	pop	r16
    1bec:	08 95       	ret

00001bee <LCD_u8sendData>:


u8 LCD_u8sendData(u8 copy_u8command)
{
    1bee:	df 93       	push	r29
    1bf0:	cf 93       	push	r28
    1bf2:	cd b7       	in	r28, 0x3d	; 61
    1bf4:	de b7       	in	r29, 0x3e	; 62
    1bf6:	2f 97       	sbiw	r28, 0x0f	; 15
    1bf8:	0f b6       	in	r0, 0x3f	; 63
    1bfa:	f8 94       	cli
    1bfc:	de bf       	out	0x3e, r29	; 62
    1bfe:	0f be       	out	0x3f, r0	; 63
    1c00:	cd bf       	out	0x3d, r28	; 61
    1c02:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8setPinVal(LCD_CTRL_PORT, LCD_RS_PIN, HIGH);
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	62 e0       	ldi	r22, 0x02	; 2
    1c08:	41 e0       	ldi	r20, 0x01	; 1
    1c0a:	0e 94 03 09 	call	0x1206	; 0x1206 <DIO_u8setPinVal>

	DIO_u8setPinVal(LCD_CTRL_PORT, LCD_RW_PIN, LOW);
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	61 e0       	ldi	r22, 0x01	; 1
    1c12:	40 e0       	ldi	r20, 0x00	; 0
    1c14:	0e 94 03 09 	call	0x1206	; 0x1206 <DIO_u8setPinVal>

	DIO_u8setPortVal(LCD_DATA_PORT, copy_u8command);
    1c18:	82 e0       	ldi	r24, 0x02	; 2
    1c1a:	6f 85       	ldd	r22, Y+15	; 0x0f
    1c1c:	0e 94 57 07 	call	0xeae	; 0xeae <DIO_u8setPortVal>

	DIO_u8setPinVal(LCD_CTRL_PORT, LCD_E_PIN, HIGH);
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	60 e0       	ldi	r22, 0x00	; 0
    1c24:	41 e0       	ldi	r20, 0x01	; 1
    1c26:	0e 94 03 09 	call	0x1206	; 0x1206 <DIO_u8setPinVal>
    1c2a:	80 e0       	ldi	r24, 0x00	; 0
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	a0 e0       	ldi	r26, 0x00	; 0
    1c30:	b0 e4       	ldi	r27, 0x40	; 64
    1c32:	8b 87       	std	Y+11, r24	; 0x0b
    1c34:	9c 87       	std	Y+12, r25	; 0x0c
    1c36:	ad 87       	std	Y+13, r26	; 0x0d
    1c38:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c40:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c42:	20 e0       	ldi	r18, 0x00	; 0
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	4a ef       	ldi	r20, 0xFA	; 250
    1c48:	54 e4       	ldi	r21, 0x44	; 68
    1c4a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c4e:	dc 01       	movw	r26, r24
    1c50:	cb 01       	movw	r24, r22
    1c52:	8f 83       	std	Y+7, r24	; 0x07
    1c54:	98 87       	std	Y+8, r25	; 0x08
    1c56:	a9 87       	std	Y+9, r26	; 0x09
    1c58:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c5c:	78 85       	ldd	r23, Y+8	; 0x08
    1c5e:	89 85       	ldd	r24, Y+9	; 0x09
    1c60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c62:	20 e0       	ldi	r18, 0x00	; 0
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	40 e8       	ldi	r20, 0x80	; 128
    1c68:	5f e3       	ldi	r21, 0x3F	; 63
    1c6a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c6e:	88 23       	and	r24, r24
    1c70:	2c f4       	brge	.+10     	; 0x1c7c <LCD_u8sendData+0x8e>
		__ticks = 1;
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	9e 83       	std	Y+6, r25	; 0x06
    1c78:	8d 83       	std	Y+5, r24	; 0x05
    1c7a:	3f c0       	rjmp	.+126    	; 0x1cfa <LCD_u8sendData+0x10c>
	else if (__tmp > 65535)
    1c7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c7e:	78 85       	ldd	r23, Y+8	; 0x08
    1c80:	89 85       	ldd	r24, Y+9	; 0x09
    1c82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	3f ef       	ldi	r19, 0xFF	; 255
    1c88:	4f e7       	ldi	r20, 0x7F	; 127
    1c8a:	57 e4       	ldi	r21, 0x47	; 71
    1c8c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c90:	18 16       	cp	r1, r24
    1c92:	4c f5       	brge	.+82     	; 0x1ce6 <LCD_u8sendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c94:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c96:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c98:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	40 e2       	ldi	r20, 0x20	; 32
    1ca2:	51 e4       	ldi	r21, 0x41	; 65
    1ca4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ca8:	dc 01       	movw	r26, r24
    1caa:	cb 01       	movw	r24, r22
    1cac:	bc 01       	movw	r22, r24
    1cae:	cd 01       	movw	r24, r26
    1cb0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	9e 83       	std	Y+6, r25	; 0x06
    1cba:	8d 83       	std	Y+5, r24	; 0x05
    1cbc:	0f c0       	rjmp	.+30     	; 0x1cdc <LCD_u8sendData+0xee>
    1cbe:	88 ec       	ldi	r24, 0xC8	; 200
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	9c 83       	std	Y+4, r25	; 0x04
    1cc4:	8b 83       	std	Y+3, r24	; 0x03
    1cc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cca:	01 97       	sbiw	r24, 0x01	; 1
    1ccc:	f1 f7       	brne	.-4      	; 0x1cca <LCD_u8sendData+0xdc>
    1cce:	9c 83       	std	Y+4, r25	; 0x04
    1cd0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cd2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd4:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd6:	01 97       	sbiw	r24, 0x01	; 1
    1cd8:	9e 83       	std	Y+6, r25	; 0x06
    1cda:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cdc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cde:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce0:	00 97       	sbiw	r24, 0x00	; 0
    1ce2:	69 f7       	brne	.-38     	; 0x1cbe <LCD_u8sendData+0xd0>
    1ce4:	14 c0       	rjmp	.+40     	; 0x1d0e <LCD_u8sendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ce8:	78 85       	ldd	r23, Y+8	; 0x08
    1cea:	89 85       	ldd	r24, Y+9	; 0x09
    1cec:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cf2:	dc 01       	movw	r26, r24
    1cf4:	cb 01       	movw	r24, r22
    1cf6:	9e 83       	std	Y+6, r25	; 0x06
    1cf8:	8d 83       	std	Y+5, r24	; 0x05
    1cfa:	8d 81       	ldd	r24, Y+5	; 0x05
    1cfc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cfe:	9a 83       	std	Y+2, r25	; 0x02
    1d00:	89 83       	std	Y+1, r24	; 0x01
    1d02:	89 81       	ldd	r24, Y+1	; 0x01
    1d04:	9a 81       	ldd	r25, Y+2	; 0x02
    1d06:	01 97       	sbiw	r24, 0x01	; 1
    1d08:	f1 f7       	brne	.-4      	; 0x1d06 <LCD_u8sendData+0x118>
    1d0a:	9a 83       	std	Y+2, r25	; 0x02
    1d0c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8setPinVal(LCD_CTRL_PORT, LCD_E_PIN, LOW);
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	60 e0       	ldi	r22, 0x00	; 0
    1d12:	40 e0       	ldi	r20, 0x00	; 0
    1d14:	0e 94 03 09 	call	0x1206	; 0x1206 <DIO_u8setPinVal>

	return 0;
    1d18:	80 e0       	ldi	r24, 0x00	; 0
}
    1d1a:	2f 96       	adiw	r28, 0x0f	; 15
    1d1c:	0f b6       	in	r0, 0x3f	; 63
    1d1e:	f8 94       	cli
    1d20:	de bf       	out	0x3e, r29	; 62
    1d22:	0f be       	out	0x3f, r0	; 63
    1d24:	cd bf       	out	0x3d, r28	; 61
    1d26:	cf 91       	pop	r28
    1d28:	df 91       	pop	r29
    1d2a:	08 95       	ret

00001d2c <LCD_u8sendCommand>:
u8 LCD_u8sendCommand(u8 copy_u8data)
{
    1d2c:	df 93       	push	r29
    1d2e:	cf 93       	push	r28
    1d30:	cd b7       	in	r28, 0x3d	; 61
    1d32:	de b7       	in	r29, 0x3e	; 62
    1d34:	2f 97       	sbiw	r28, 0x0f	; 15
    1d36:	0f b6       	in	r0, 0x3f	; 63
    1d38:	f8 94       	cli
    1d3a:	de bf       	out	0x3e, r29	; 62
    1d3c:	0f be       	out	0x3f, r0	; 63
    1d3e:	cd bf       	out	0x3d, r28	; 61
    1d40:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8setPinVal(LCD_CTRL_PORT, LCD_RS_PIN, LOW);
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	62 e0       	ldi	r22, 0x02	; 2
    1d46:	40 e0       	ldi	r20, 0x00	; 0
    1d48:	0e 94 03 09 	call	0x1206	; 0x1206 <DIO_u8setPinVal>

	DIO_u8setPinVal(LCD_CTRL_PORT, LCD_RW_PIN, LOW);
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	61 e0       	ldi	r22, 0x01	; 1
    1d50:	40 e0       	ldi	r20, 0x00	; 0
    1d52:	0e 94 03 09 	call	0x1206	; 0x1206 <DIO_u8setPinVal>

	DIO_u8setPortVal(LCD_DATA_PORT, copy_u8data);
    1d56:	82 e0       	ldi	r24, 0x02	; 2
    1d58:	6f 85       	ldd	r22, Y+15	; 0x0f
    1d5a:	0e 94 57 07 	call	0xeae	; 0xeae <DIO_u8setPortVal>

	DIO_u8setPinVal(LCD_CTRL_PORT, LCD_E_PIN, HIGH);
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	60 e0       	ldi	r22, 0x00	; 0
    1d62:	41 e0       	ldi	r20, 0x01	; 1
    1d64:	0e 94 03 09 	call	0x1206	; 0x1206 <DIO_u8setPinVal>
    1d68:	80 e0       	ldi	r24, 0x00	; 0
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	a0 e0       	ldi	r26, 0x00	; 0
    1d6e:	b0 e4       	ldi	r27, 0x40	; 64
    1d70:	8b 87       	std	Y+11, r24	; 0x0b
    1d72:	9c 87       	std	Y+12, r25	; 0x0c
    1d74:	ad 87       	std	Y+13, r26	; 0x0d
    1d76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d78:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	4a ef       	ldi	r20, 0xFA	; 250
    1d86:	54 e4       	ldi	r21, 0x44	; 68
    1d88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	cb 01       	movw	r24, r22
    1d90:	8f 83       	std	Y+7, r24	; 0x07
    1d92:	98 87       	std	Y+8, r25	; 0x08
    1d94:	a9 87       	std	Y+9, r26	; 0x09
    1d96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d98:	6f 81       	ldd	r22, Y+7	; 0x07
    1d9a:	78 85       	ldd	r23, Y+8	; 0x08
    1d9c:	89 85       	ldd	r24, Y+9	; 0x09
    1d9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	40 e8       	ldi	r20, 0x80	; 128
    1da6:	5f e3       	ldi	r21, 0x3F	; 63
    1da8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1dac:	88 23       	and	r24, r24
    1dae:	2c f4       	brge	.+10     	; 0x1dba <LCD_u8sendCommand+0x8e>
		__ticks = 1;
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	9e 83       	std	Y+6, r25	; 0x06
    1db6:	8d 83       	std	Y+5, r24	; 0x05
    1db8:	3f c0       	rjmp	.+126    	; 0x1e38 <LCD_u8sendCommand+0x10c>
	else if (__tmp > 65535)
    1dba:	6f 81       	ldd	r22, Y+7	; 0x07
    1dbc:	78 85       	ldd	r23, Y+8	; 0x08
    1dbe:	89 85       	ldd	r24, Y+9	; 0x09
    1dc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	3f ef       	ldi	r19, 0xFF	; 255
    1dc6:	4f e7       	ldi	r20, 0x7F	; 127
    1dc8:	57 e4       	ldi	r21, 0x47	; 71
    1dca:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1dce:	18 16       	cp	r1, r24
    1dd0:	4c f5       	brge	.+82     	; 0x1e24 <LCD_u8sendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	40 e2       	ldi	r20, 0x20	; 32
    1de0:	51 e4       	ldi	r21, 0x41	; 65
    1de2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	bc 01       	movw	r22, r24
    1dec:	cd 01       	movw	r24, r26
    1dee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1df2:	dc 01       	movw	r26, r24
    1df4:	cb 01       	movw	r24, r22
    1df6:	9e 83       	std	Y+6, r25	; 0x06
    1df8:	8d 83       	std	Y+5, r24	; 0x05
    1dfa:	0f c0       	rjmp	.+30     	; 0x1e1a <LCD_u8sendCommand+0xee>
    1dfc:	88 ec       	ldi	r24, 0xC8	; 200
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	9c 83       	std	Y+4, r25	; 0x04
    1e02:	8b 83       	std	Y+3, r24	; 0x03
    1e04:	8b 81       	ldd	r24, Y+3	; 0x03
    1e06:	9c 81       	ldd	r25, Y+4	; 0x04
    1e08:	01 97       	sbiw	r24, 0x01	; 1
    1e0a:	f1 f7       	brne	.-4      	; 0x1e08 <LCD_u8sendCommand+0xdc>
    1e0c:	9c 83       	std	Y+4, r25	; 0x04
    1e0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e10:	8d 81       	ldd	r24, Y+5	; 0x05
    1e12:	9e 81       	ldd	r25, Y+6	; 0x06
    1e14:	01 97       	sbiw	r24, 0x01	; 1
    1e16:	9e 83       	std	Y+6, r25	; 0x06
    1e18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e1e:	00 97       	sbiw	r24, 0x00	; 0
    1e20:	69 f7       	brne	.-38     	; 0x1dfc <LCD_u8sendCommand+0xd0>
    1e22:	14 c0       	rjmp	.+40     	; 0x1e4c <LCD_u8sendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e24:	6f 81       	ldd	r22, Y+7	; 0x07
    1e26:	78 85       	ldd	r23, Y+8	; 0x08
    1e28:	89 85       	ldd	r24, Y+9	; 0x09
    1e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
    1e34:	9e 83       	std	Y+6, r25	; 0x06
    1e36:	8d 83       	std	Y+5, r24	; 0x05
    1e38:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e3c:	9a 83       	std	Y+2, r25	; 0x02
    1e3e:	89 83       	std	Y+1, r24	; 0x01
    1e40:	89 81       	ldd	r24, Y+1	; 0x01
    1e42:	9a 81       	ldd	r25, Y+2	; 0x02
    1e44:	01 97       	sbiw	r24, 0x01	; 1
    1e46:	f1 f7       	brne	.-4      	; 0x1e44 <LCD_u8sendCommand+0x118>
    1e48:	9a 83       	std	Y+2, r25	; 0x02
    1e4a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8setPinVal(LCD_CTRL_PORT, LCD_E_PIN, LOW);
    1e4c:	81 e0       	ldi	r24, 0x01	; 1
    1e4e:	60 e0       	ldi	r22, 0x00	; 0
    1e50:	40 e0       	ldi	r20, 0x00	; 0
    1e52:	0e 94 03 09 	call	0x1206	; 0x1206 <DIO_u8setPinVal>

	return 0;
    1e56:	80 e0       	ldi	r24, 0x00	; 0
}
    1e58:	2f 96       	adiw	r28, 0x0f	; 15
    1e5a:	0f b6       	in	r0, 0x3f	; 63
    1e5c:	f8 94       	cli
    1e5e:	de bf       	out	0x3e, r29	; 62
    1e60:	0f be       	out	0x3f, r0	; 63
    1e62:	cd bf       	out	0x3d, r28	; 61
    1e64:	cf 91       	pop	r28
    1e66:	df 91       	pop	r29
    1e68:	08 95       	ret

00001e6a <LCD_vidInit>:

void LCD_vidInit(void)
{
    1e6a:	df 93       	push	r29
    1e6c:	cf 93       	push	r28
    1e6e:	cd b7       	in	r28, 0x3d	; 61
    1e70:	de b7       	in	r29, 0x3e	; 62
    1e72:	2e 97       	sbiw	r28, 0x0e	; 14
    1e74:	0f b6       	in	r0, 0x3f	; 63
    1e76:	f8 94       	cli
    1e78:	de bf       	out	0x3e, r29	; 62
    1e7a:	0f be       	out	0x3f, r0	; 63
    1e7c:	cd bf       	out	0x3d, r28	; 61
	DIO_u8setPortDir(LCD_DATA_PORT, FULL_OUTPUT);
    1e7e:	82 e0       	ldi	r24, 0x02	; 2
    1e80:	6f ef       	ldi	r22, 0xFF	; 255
    1e82:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_u8setPortDir>
	DIO_u8setPinDir(LCD_CTRL_PORT, LCD_E_PIN, OUTPUT);
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	60 e0       	ldi	r22, 0x00	; 0
    1e8a:	41 e0       	ldi	r20, 0x01	; 1
    1e8c:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <DIO_u8setPinDir>
	DIO_u8setPinDir(LCD_CTRL_PORT, LCD_RS_PIN, OUTPUT);
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	62 e0       	ldi	r22, 0x02	; 2
    1e94:	41 e0       	ldi	r20, 0x01	; 1
    1e96:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <DIO_u8setPinDir>
	DIO_u8setPinDir(LCD_CTRL_PORT, LCD_RW_PIN, OUTPUT);
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	61 e0       	ldi	r22, 0x01	; 1
    1e9e:	41 e0       	ldi	r20, 0x01	; 1
    1ea0:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <DIO_u8setPinDir>
    1ea4:	80 e0       	ldi	r24, 0x00	; 0
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	a0 e2       	ldi	r26, 0x20	; 32
    1eaa:	b2 e4       	ldi	r27, 0x42	; 66
    1eac:	8b 87       	std	Y+11, r24	; 0x0b
    1eae:	9c 87       	std	Y+12, r25	; 0x0c
    1eb0:	ad 87       	std	Y+13, r26	; 0x0d
    1eb2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eba:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	4a ef       	ldi	r20, 0xFA	; 250
    1ec2:	54 e4       	ldi	r21, 0x44	; 68
    1ec4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ec8:	dc 01       	movw	r26, r24
    1eca:	cb 01       	movw	r24, r22
    1ecc:	8f 83       	std	Y+7, r24	; 0x07
    1ece:	98 87       	std	Y+8, r25	; 0x08
    1ed0:	a9 87       	std	Y+9, r26	; 0x09
    1ed2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ed4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed6:	78 85       	ldd	r23, Y+8	; 0x08
    1ed8:	89 85       	ldd	r24, Y+9	; 0x09
    1eda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1edc:	20 e0       	ldi	r18, 0x00	; 0
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	40 e8       	ldi	r20, 0x80	; 128
    1ee2:	5f e3       	ldi	r21, 0x3F	; 63
    1ee4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ee8:	88 23       	and	r24, r24
    1eea:	2c f4       	brge	.+10     	; 0x1ef6 <LCD_vidInit+0x8c>
		__ticks = 1;
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	9e 83       	std	Y+6, r25	; 0x06
    1ef2:	8d 83       	std	Y+5, r24	; 0x05
    1ef4:	3f c0       	rjmp	.+126    	; 0x1f74 <LCD_vidInit+0x10a>
	else if (__tmp > 65535)
    1ef6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ef8:	78 85       	ldd	r23, Y+8	; 0x08
    1efa:	89 85       	ldd	r24, Y+9	; 0x09
    1efc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	3f ef       	ldi	r19, 0xFF	; 255
    1f02:	4f e7       	ldi	r20, 0x7F	; 127
    1f04:	57 e4       	ldi	r21, 0x47	; 71
    1f06:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f0a:	18 16       	cp	r1, r24
    1f0c:	4c f5       	brge	.+82     	; 0x1f60 <LCD_vidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f10:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f12:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f14:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	40 e2       	ldi	r20, 0x20	; 32
    1f1c:	51 e4       	ldi	r21, 0x41	; 65
    1f1e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f22:	dc 01       	movw	r26, r24
    1f24:	cb 01       	movw	r24, r22
    1f26:	bc 01       	movw	r22, r24
    1f28:	cd 01       	movw	r24, r26
    1f2a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f2e:	dc 01       	movw	r26, r24
    1f30:	cb 01       	movw	r24, r22
    1f32:	9e 83       	std	Y+6, r25	; 0x06
    1f34:	8d 83       	std	Y+5, r24	; 0x05
    1f36:	0f c0       	rjmp	.+30     	; 0x1f56 <LCD_vidInit+0xec>
    1f38:	88 ec       	ldi	r24, 0xC8	; 200
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	9c 83       	std	Y+4, r25	; 0x04
    1f3e:	8b 83       	std	Y+3, r24	; 0x03
    1f40:	8b 81       	ldd	r24, Y+3	; 0x03
    1f42:	9c 81       	ldd	r25, Y+4	; 0x04
    1f44:	01 97       	sbiw	r24, 0x01	; 1
    1f46:	f1 f7       	brne	.-4      	; 0x1f44 <LCD_vidInit+0xda>
    1f48:	9c 83       	std	Y+4, r25	; 0x04
    1f4a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f50:	01 97       	sbiw	r24, 0x01	; 1
    1f52:	9e 83       	std	Y+6, r25	; 0x06
    1f54:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f56:	8d 81       	ldd	r24, Y+5	; 0x05
    1f58:	9e 81       	ldd	r25, Y+6	; 0x06
    1f5a:	00 97       	sbiw	r24, 0x00	; 0
    1f5c:	69 f7       	brne	.-38     	; 0x1f38 <LCD_vidInit+0xce>
    1f5e:	14 c0       	rjmp	.+40     	; 0x1f88 <LCD_vidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f60:	6f 81       	ldd	r22, Y+7	; 0x07
    1f62:	78 85       	ldd	r23, Y+8	; 0x08
    1f64:	89 85       	ldd	r24, Y+9	; 0x09
    1f66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f68:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f6c:	dc 01       	movw	r26, r24
    1f6e:	cb 01       	movw	r24, r22
    1f70:	9e 83       	std	Y+6, r25	; 0x06
    1f72:	8d 83       	std	Y+5, r24	; 0x05
    1f74:	8d 81       	ldd	r24, Y+5	; 0x05
    1f76:	9e 81       	ldd	r25, Y+6	; 0x06
    1f78:	9a 83       	std	Y+2, r25	; 0x02
    1f7a:	89 83       	std	Y+1, r24	; 0x01
    1f7c:	89 81       	ldd	r24, Y+1	; 0x01
    1f7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f80:	01 97       	sbiw	r24, 0x01	; 1
    1f82:	f1 f7       	brne	.-4      	; 0x1f80 <LCD_vidInit+0x116>
    1f84:	9a 83       	std	Y+2, r25	; 0x02
    1f86:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(40);						//Wait more than 30 ms after power on

	LCD_u8sendCommand(0b00111000);		//Function set cmd: 2 lines, 5x8 font size
    1f88:	88 e3       	ldi	r24, 0x38	; 56
    1f8a:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <LCD_u8sendCommand>

	LCD_u8sendCommand(0b00001110);		//Function set cmd: Display enable, disable cursor, disable blinking cursor
    1f8e:	8e e0       	ldi	r24, 0x0E	; 14
    1f90:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <LCD_u8sendCommand>

	LCD_u8sendCommand(1);				//Function set: clear display
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <LCD_u8sendCommand>


}
    1f9a:	2e 96       	adiw	r28, 0x0e	; 14
    1f9c:	0f b6       	in	r0, 0x3f	; 63
    1f9e:	f8 94       	cli
    1fa0:	de bf       	out	0x3e, r29	; 62
    1fa2:	0f be       	out	0x3f, r0	; 63
    1fa4:	cd bf       	out	0x3d, r28	; 61
    1fa6:	cf 91       	pop	r28
    1fa8:	df 91       	pop	r29
    1faa:	08 95       	ret

00001fac <LCD_vidStarterString>:

void LCD_vidStarterString(const u8* copy_pcString)
{
    1fac:	df 93       	push	r29
    1fae:	cf 93       	push	r28
    1fb0:	cd b7       	in	r28, 0x3d	; 61
    1fb2:	de b7       	in	r29, 0x3e	; 62
    1fb4:	6f 97       	sbiw	r28, 0x1f	; 31
    1fb6:	0f b6       	in	r0, 0x3f	; 63
    1fb8:	f8 94       	cli
    1fba:	de bf       	out	0x3e, r29	; 62
    1fbc:	0f be       	out	0x3f, r0	; 63
    1fbe:	cd bf       	out	0x3d, r28	; 61
    1fc0:	9f 8f       	std	Y+31, r25	; 0x1f
    1fc2:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 counter = 0;
    1fc4:	1d 8e       	std	Y+29, r1	; 0x1d
	LCD_vidGoToXY(3, 0);
    1fc6:	83 e0       	ldi	r24, 0x03	; 3
    1fc8:	60 e0       	ldi	r22, 0x00	; 0
    1fca:	0e 94 1a 11 	call	0x2234	; 0x2234 <LCD_vidGoToXY>
    1fce:	80 c0       	rjmp	.+256    	; 0x20d0 <LCD_vidStarterString+0x124>
	while(copy_pcString[counter] != '\0')
	{
		LCD_u8sendData(copy_pcString[counter]);
    1fd0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fd2:	28 2f       	mov	r18, r24
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fd8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1fda:	fc 01       	movw	r30, r24
    1fdc:	e2 0f       	add	r30, r18
    1fde:	f3 1f       	adc	r31, r19
    1fe0:	80 81       	ld	r24, Z
    1fe2:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <LCD_u8sendData>
		counter++;
    1fe6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fe8:	8f 5f       	subi	r24, 0xFF	; 255
    1fea:	8d 8f       	std	Y+29, r24	; 0x1d
    1fec:	80 e0       	ldi	r24, 0x00	; 0
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	a6 e1       	ldi	r26, 0x16	; 22
    1ff2:	b3 e4       	ldi	r27, 0x43	; 67
    1ff4:	89 8f       	std	Y+25, r24	; 0x19
    1ff6:	9a 8f       	std	Y+26, r25	; 0x1a
    1ff8:	ab 8f       	std	Y+27, r26	; 0x1b
    1ffa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ffc:	69 8d       	ldd	r22, Y+25	; 0x19
    1ffe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2000:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2002:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	4a ef       	ldi	r20, 0xFA	; 250
    200a:	54 e4       	ldi	r21, 0x44	; 68
    200c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2010:	dc 01       	movw	r26, r24
    2012:	cb 01       	movw	r24, r22
    2014:	8d 8b       	std	Y+21, r24	; 0x15
    2016:	9e 8b       	std	Y+22, r25	; 0x16
    2018:	af 8b       	std	Y+23, r26	; 0x17
    201a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    201c:	6d 89       	ldd	r22, Y+21	; 0x15
    201e:	7e 89       	ldd	r23, Y+22	; 0x16
    2020:	8f 89       	ldd	r24, Y+23	; 0x17
    2022:	98 8d       	ldd	r25, Y+24	; 0x18
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	40 e8       	ldi	r20, 0x80	; 128
    202a:	5f e3       	ldi	r21, 0x3F	; 63
    202c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2030:	88 23       	and	r24, r24
    2032:	2c f4       	brge	.+10     	; 0x203e <LCD_vidStarterString+0x92>
		__ticks = 1;
    2034:	81 e0       	ldi	r24, 0x01	; 1
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	9c 8b       	std	Y+20, r25	; 0x14
    203a:	8b 8b       	std	Y+19, r24	; 0x13
    203c:	3f c0       	rjmp	.+126    	; 0x20bc <LCD_vidStarterString+0x110>
	else if (__tmp > 65535)
    203e:	6d 89       	ldd	r22, Y+21	; 0x15
    2040:	7e 89       	ldd	r23, Y+22	; 0x16
    2042:	8f 89       	ldd	r24, Y+23	; 0x17
    2044:	98 8d       	ldd	r25, Y+24	; 0x18
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	3f ef       	ldi	r19, 0xFF	; 255
    204a:	4f e7       	ldi	r20, 0x7F	; 127
    204c:	57 e4       	ldi	r21, 0x47	; 71
    204e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2052:	18 16       	cp	r1, r24
    2054:	4c f5       	brge	.+82     	; 0x20a8 <LCD_vidStarterString+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2056:	69 8d       	ldd	r22, Y+25	; 0x19
    2058:	7a 8d       	ldd	r23, Y+26	; 0x1a
    205a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    205c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	40 e2       	ldi	r20, 0x20	; 32
    2064:	51 e4       	ldi	r21, 0x41	; 65
    2066:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    206a:	dc 01       	movw	r26, r24
    206c:	cb 01       	movw	r24, r22
    206e:	bc 01       	movw	r22, r24
    2070:	cd 01       	movw	r24, r26
    2072:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2076:	dc 01       	movw	r26, r24
    2078:	cb 01       	movw	r24, r22
    207a:	9c 8b       	std	Y+20, r25	; 0x14
    207c:	8b 8b       	std	Y+19, r24	; 0x13
    207e:	0f c0       	rjmp	.+30     	; 0x209e <LCD_vidStarterString+0xf2>
    2080:	88 ec       	ldi	r24, 0xC8	; 200
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	9a 8b       	std	Y+18, r25	; 0x12
    2086:	89 8b       	std	Y+17, r24	; 0x11
    2088:	89 89       	ldd	r24, Y+17	; 0x11
    208a:	9a 89       	ldd	r25, Y+18	; 0x12
    208c:	01 97       	sbiw	r24, 0x01	; 1
    208e:	f1 f7       	brne	.-4      	; 0x208c <LCD_vidStarterString+0xe0>
    2090:	9a 8b       	std	Y+18, r25	; 0x12
    2092:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2094:	8b 89       	ldd	r24, Y+19	; 0x13
    2096:	9c 89       	ldd	r25, Y+20	; 0x14
    2098:	01 97       	sbiw	r24, 0x01	; 1
    209a:	9c 8b       	std	Y+20, r25	; 0x14
    209c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    209e:	8b 89       	ldd	r24, Y+19	; 0x13
    20a0:	9c 89       	ldd	r25, Y+20	; 0x14
    20a2:	00 97       	sbiw	r24, 0x00	; 0
    20a4:	69 f7       	brne	.-38     	; 0x2080 <LCD_vidStarterString+0xd4>
    20a6:	14 c0       	rjmp	.+40     	; 0x20d0 <LCD_vidStarterString+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a8:	6d 89       	ldd	r22, Y+21	; 0x15
    20aa:	7e 89       	ldd	r23, Y+22	; 0x16
    20ac:	8f 89       	ldd	r24, Y+23	; 0x17
    20ae:	98 8d       	ldd	r25, Y+24	; 0x18
    20b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20b4:	dc 01       	movw	r26, r24
    20b6:	cb 01       	movw	r24, r22
    20b8:	9c 8b       	std	Y+20, r25	; 0x14
    20ba:	8b 8b       	std	Y+19, r24	; 0x13
    20bc:	8b 89       	ldd	r24, Y+19	; 0x13
    20be:	9c 89       	ldd	r25, Y+20	; 0x14
    20c0:	98 8b       	std	Y+16, r25	; 0x10
    20c2:	8f 87       	std	Y+15, r24	; 0x0f
    20c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    20c6:	98 89       	ldd	r25, Y+16	; 0x10
    20c8:	01 97       	sbiw	r24, 0x01	; 1
    20ca:	f1 f7       	brne	.-4      	; 0x20c8 <LCD_vidStarterString+0x11c>
    20cc:	98 8b       	std	Y+16, r25	; 0x10
    20ce:	8f 87       	std	Y+15, r24	; 0x0f

void LCD_vidStarterString(const u8* copy_pcString)
{
	u8 counter = 0;
	LCD_vidGoToXY(3, 0);
	while(copy_pcString[counter] != '\0')
    20d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20d2:	28 2f       	mov	r18, r24
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20d8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    20da:	fc 01       	movw	r30, r24
    20dc:	e2 0f       	add	r30, r18
    20de:	f3 1f       	adc	r31, r19
    20e0:	80 81       	ld	r24, Z
    20e2:	88 23       	and	r24, r24
    20e4:	09 f0       	breq	.+2      	; 0x20e8 <LCD_vidStarterString+0x13c>
    20e6:	74 cf       	rjmp	.-280    	; 0x1fd0 <LCD_vidStarterString+0x24>
	{
		LCD_u8sendData(copy_pcString[counter]);
		counter++;
		_delay_ms(150);
	}
	LCD_vidShiftRight();
    20e8:	0e 94 19 13 	call	0x2632	; 0x2632 <LCD_vidShiftRight>
    20ec:	80 e0       	ldi	r24, 0x00	; 0
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	a8 ec       	ldi	r26, 0xC8	; 200
    20f2:	b2 e4       	ldi	r27, 0x42	; 66
    20f4:	8b 87       	std	Y+11, r24	; 0x0b
    20f6:	9c 87       	std	Y+12, r25	; 0x0c
    20f8:	ad 87       	std	Y+13, r26	; 0x0d
    20fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    20fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2100:	8d 85       	ldd	r24, Y+13	; 0x0d
    2102:	9e 85       	ldd	r25, Y+14	; 0x0e
    2104:	20 e0       	ldi	r18, 0x00	; 0
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	4a ef       	ldi	r20, 0xFA	; 250
    210a:	54 e4       	ldi	r21, 0x44	; 68
    210c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2110:	dc 01       	movw	r26, r24
    2112:	cb 01       	movw	r24, r22
    2114:	8f 83       	std	Y+7, r24	; 0x07
    2116:	98 87       	std	Y+8, r25	; 0x08
    2118:	a9 87       	std	Y+9, r26	; 0x09
    211a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    211c:	6f 81       	ldd	r22, Y+7	; 0x07
    211e:	78 85       	ldd	r23, Y+8	; 0x08
    2120:	89 85       	ldd	r24, Y+9	; 0x09
    2122:	9a 85       	ldd	r25, Y+10	; 0x0a
    2124:	20 e0       	ldi	r18, 0x00	; 0
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	40 e8       	ldi	r20, 0x80	; 128
    212a:	5f e3       	ldi	r21, 0x3F	; 63
    212c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2130:	88 23       	and	r24, r24
    2132:	2c f4       	brge	.+10     	; 0x213e <LCD_vidStarterString+0x192>
		__ticks = 1;
    2134:	81 e0       	ldi	r24, 0x01	; 1
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	9e 83       	std	Y+6, r25	; 0x06
    213a:	8d 83       	std	Y+5, r24	; 0x05
    213c:	3f c0       	rjmp	.+126    	; 0x21bc <LCD_vidStarterString+0x210>
	else if (__tmp > 65535)
    213e:	6f 81       	ldd	r22, Y+7	; 0x07
    2140:	78 85       	ldd	r23, Y+8	; 0x08
    2142:	89 85       	ldd	r24, Y+9	; 0x09
    2144:	9a 85       	ldd	r25, Y+10	; 0x0a
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	3f ef       	ldi	r19, 0xFF	; 255
    214a:	4f e7       	ldi	r20, 0x7F	; 127
    214c:	57 e4       	ldi	r21, 0x47	; 71
    214e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2152:	18 16       	cp	r1, r24
    2154:	4c f5       	brge	.+82     	; 0x21a8 <LCD_vidStarterString+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2156:	6b 85       	ldd	r22, Y+11	; 0x0b
    2158:	7c 85       	ldd	r23, Y+12	; 0x0c
    215a:	8d 85       	ldd	r24, Y+13	; 0x0d
    215c:	9e 85       	ldd	r25, Y+14	; 0x0e
    215e:	20 e0       	ldi	r18, 0x00	; 0
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	40 e2       	ldi	r20, 0x20	; 32
    2164:	51 e4       	ldi	r21, 0x41	; 65
    2166:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    216a:	dc 01       	movw	r26, r24
    216c:	cb 01       	movw	r24, r22
    216e:	bc 01       	movw	r22, r24
    2170:	cd 01       	movw	r24, r26
    2172:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2176:	dc 01       	movw	r26, r24
    2178:	cb 01       	movw	r24, r22
    217a:	9e 83       	std	Y+6, r25	; 0x06
    217c:	8d 83       	std	Y+5, r24	; 0x05
    217e:	0f c0       	rjmp	.+30     	; 0x219e <LCD_vidStarterString+0x1f2>
    2180:	88 ec       	ldi	r24, 0xC8	; 200
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	9c 83       	std	Y+4, r25	; 0x04
    2186:	8b 83       	std	Y+3, r24	; 0x03
    2188:	8b 81       	ldd	r24, Y+3	; 0x03
    218a:	9c 81       	ldd	r25, Y+4	; 0x04
    218c:	01 97       	sbiw	r24, 0x01	; 1
    218e:	f1 f7       	brne	.-4      	; 0x218c <LCD_vidStarterString+0x1e0>
    2190:	9c 83       	std	Y+4, r25	; 0x04
    2192:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2194:	8d 81       	ldd	r24, Y+5	; 0x05
    2196:	9e 81       	ldd	r25, Y+6	; 0x06
    2198:	01 97       	sbiw	r24, 0x01	; 1
    219a:	9e 83       	std	Y+6, r25	; 0x06
    219c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    219e:	8d 81       	ldd	r24, Y+5	; 0x05
    21a0:	9e 81       	ldd	r25, Y+6	; 0x06
    21a2:	00 97       	sbiw	r24, 0x00	; 0
    21a4:	69 f7       	brne	.-38     	; 0x2180 <LCD_vidStarterString+0x1d4>
    21a6:	14 c0       	rjmp	.+40     	; 0x21d0 <LCD_vidStarterString+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21a8:	6f 81       	ldd	r22, Y+7	; 0x07
    21aa:	78 85       	ldd	r23, Y+8	; 0x08
    21ac:	89 85       	ldd	r24, Y+9	; 0x09
    21ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    21b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21b4:	dc 01       	movw	r26, r24
    21b6:	cb 01       	movw	r24, r22
    21b8:	9e 83       	std	Y+6, r25	; 0x06
    21ba:	8d 83       	std	Y+5, r24	; 0x05
    21bc:	8d 81       	ldd	r24, Y+5	; 0x05
    21be:	9e 81       	ldd	r25, Y+6	; 0x06
    21c0:	9a 83       	std	Y+2, r25	; 0x02
    21c2:	89 83       	std	Y+1, r24	; 0x01
    21c4:	89 81       	ldd	r24, Y+1	; 0x01
    21c6:	9a 81       	ldd	r25, Y+2	; 0x02
    21c8:	01 97       	sbiw	r24, 0x01	; 1
    21ca:	f1 f7       	brne	.-4      	; 0x21c8 <LCD_vidStarterString+0x21c>
    21cc:	9a 83       	std	Y+2, r25	; 0x02
    21ce:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
}
    21d0:	6f 96       	adiw	r28, 0x1f	; 31
    21d2:	0f b6       	in	r0, 0x3f	; 63
    21d4:	f8 94       	cli
    21d6:	de bf       	out	0x3e, r29	; 62
    21d8:	0f be       	out	0x3f, r0	; 63
    21da:	cd bf       	out	0x3d, r28	; 61
    21dc:	cf 91       	pop	r28
    21de:	df 91       	pop	r29
    21e0:	08 95       	ret

000021e2 <LCD_vidSendString>:

void LCD_vidSendString(const u8* copy_pcString)
{
    21e2:	df 93       	push	r29
    21e4:	cf 93       	push	r28
    21e6:	00 d0       	rcall	.+0      	; 0x21e8 <LCD_vidSendString+0x6>
    21e8:	0f 92       	push	r0
    21ea:	cd b7       	in	r28, 0x3d	; 61
    21ec:	de b7       	in	r29, 0x3e	; 62
    21ee:	9b 83       	std	Y+3, r25	; 0x03
    21f0:	8a 83       	std	Y+2, r24	; 0x02
	u8 counter = 0;
    21f2:	19 82       	std	Y+1, r1	; 0x01
    21f4:	0e c0       	rjmp	.+28     	; 0x2212 <LCD_vidSendString+0x30>
	while(copy_pcString[counter] != '\0')
	{
		LCD_u8sendData(copy_pcString[counter]);
    21f6:	89 81       	ldd	r24, Y+1	; 0x01
    21f8:	28 2f       	mov	r18, r24
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	8a 81       	ldd	r24, Y+2	; 0x02
    21fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2200:	fc 01       	movw	r30, r24
    2202:	e2 0f       	add	r30, r18
    2204:	f3 1f       	adc	r31, r19
    2206:	80 81       	ld	r24, Z
    2208:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <LCD_u8sendData>
		counter++;
    220c:	89 81       	ldd	r24, Y+1	; 0x01
    220e:	8f 5f       	subi	r24, 0xFF	; 255
    2210:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_vidSendString(const u8* copy_pcString)
{
	u8 counter = 0;
	while(copy_pcString[counter] != '\0')
    2212:	89 81       	ldd	r24, Y+1	; 0x01
    2214:	28 2f       	mov	r18, r24
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	8a 81       	ldd	r24, Y+2	; 0x02
    221a:	9b 81       	ldd	r25, Y+3	; 0x03
    221c:	fc 01       	movw	r30, r24
    221e:	e2 0f       	add	r30, r18
    2220:	f3 1f       	adc	r31, r19
    2222:	80 81       	ld	r24, Z
    2224:	88 23       	and	r24, r24
    2226:	39 f7       	brne	.-50     	; 0x21f6 <LCD_vidSendString+0x14>
	{
		LCD_u8sendData(copy_pcString[counter]);
		counter++;
	}
}
    2228:	0f 90       	pop	r0
    222a:	0f 90       	pop	r0
    222c:	0f 90       	pop	r0
    222e:	cf 91       	pop	r28
    2230:	df 91       	pop	r29
    2232:	08 95       	ret

00002234 <LCD_vidGoToXY>:

void LCD_vidGoToXY(u8 copy_u8XPos, u8 copy_u8YPos)
{
    2234:	df 93       	push	r29
    2236:	cf 93       	push	r28
    2238:	00 d0       	rcall	.+0      	; 0x223a <LCD_vidGoToXY+0x6>
    223a:	0f 92       	push	r0
    223c:	cd b7       	in	r28, 0x3d	; 61
    223e:	de b7       	in	r29, 0x3e	; 62
    2240:	8a 83       	std	Y+2, r24	; 0x02
    2242:	6b 83       	std	Y+3, r22	; 0x03
	u8 address;

	if(copy_u8YPos == 0){
    2244:	8b 81       	ldd	r24, Y+3	; 0x03
    2246:	88 23       	and	r24, r24
    2248:	19 f4       	brne	.+6      	; 0x2250 <LCD_vidGoToXY+0x1c>
		address = copy_u8XPos;
    224a:	8a 81       	ldd	r24, Y+2	; 0x02
    224c:	89 83       	std	Y+1, r24	; 0x01
    224e:	06 c0       	rjmp	.+12     	; 0x225c <LCD_vidGoToXY+0x28>
	}

	else if(copy_u8YPos == 1){
    2250:	8b 81       	ldd	r24, Y+3	; 0x03
    2252:	81 30       	cpi	r24, 0x01	; 1
    2254:	19 f4       	brne	.+6      	; 0x225c <LCD_vidGoToXY+0x28>
		address = copy_u8XPos + 0x40;
    2256:	8a 81       	ldd	r24, Y+2	; 0x02
    2258:	80 5c       	subi	r24, 0xC0	; 192
    225a:	89 83       	std	Y+1, r24	; 0x01
	}

	LCD_u8sendCommand(128 + address);
    225c:	89 81       	ldd	r24, Y+1	; 0x01
    225e:	80 58       	subi	r24, 0x80	; 128
    2260:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <LCD_u8sendCommand>

}
    2264:	0f 90       	pop	r0
    2266:	0f 90       	pop	r0
    2268:	0f 90       	pop	r0
    226a:	cf 91       	pop	r28
    226c:	df 91       	pop	r29
    226e:	08 95       	ret

00002270 <LCD_vidShiftRightCursor>:

void LCD_vidShiftRightCursor(void)
{
    2270:	df 93       	push	r29
    2272:	cf 93       	push	r28
    2274:	cd b7       	in	r28, 0x3d	; 61
    2276:	de b7       	in	r29, 0x3e	; 62
	LCD_u8sendCommand(0b00000001);
    2278:	81 e0       	ldi	r24, 0x01	; 1
    227a:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <LCD_u8sendCommand>
}
    227e:	cf 91       	pop	r28
    2280:	df 91       	pop	r29
    2282:	08 95       	ret

00002284 <LCD_vidShiftLeftCursor>:

void LCD_vidShiftLeftCursor(void)
{
    2284:	df 93       	push	r29
    2286:	cf 93       	push	r28
    2288:	cd b7       	in	r28, 0x3d	; 61
    228a:	de b7       	in	r29, 0x3e	; 62
	LCD_u8sendCommand(0b00000000);
    228c:	80 e0       	ldi	r24, 0x00	; 0
    228e:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <LCD_u8sendCommand>
}
    2292:	cf 91       	pop	r28
    2294:	df 91       	pop	r29
    2296:	08 95       	ret

00002298 <LCD_vidSendNumberBottomRight>:

void LCD_vidSendNumberBottomRight(s32 copy_u8Number)
{
    2298:	0f 93       	push	r16
    229a:	1f 93       	push	r17
    229c:	df 93       	push	r29
    229e:	cf 93       	push	r28
    22a0:	cd b7       	in	r28, 0x3d	; 61
    22a2:	de b7       	in	r29, 0x3e	; 62
    22a4:	a7 97       	sbiw	r28, 0x27	; 39
    22a6:	0f b6       	in	r0, 0x3f	; 63
    22a8:	f8 94       	cli
    22aa:	de bf       	out	0x3e, r29	; 62
    22ac:	0f be       	out	0x3f, r0	; 63
    22ae:	cd bf       	out	0x3d, r28	; 61
    22b0:	6c a3       	std	Y+36, r22	; 0x24
    22b2:	7d a3       	std	Y+37, r23	; 0x25
    22b4:	8e a3       	std	Y+38, r24	; 0x26
    22b6:	9f a3       	std	Y+39, r25	; 0x27
	s8 local_u8Length = 0;
    22b8:	1b 82       	std	Y+3, r1	; 0x03
	u8 local_u8Nums[32];
	LCD_vidGoToXY(15, 1);
    22ba:	8f e0       	ldi	r24, 0x0F	; 15
    22bc:	61 e0       	ldi	r22, 0x01	; 1
    22be:	0e 94 1a 11 	call	0x2234	; 0x2234 <LCD_vidGoToXY>

	if(copy_u8Number==0)
    22c2:	8c a1       	ldd	r24, Y+36	; 0x24
    22c4:	9d a1       	ldd	r25, Y+37	; 0x25
    22c6:	ae a1       	ldd	r26, Y+38	; 0x26
    22c8:	bf a1       	ldd	r27, Y+39	; 0x27
    22ca:	00 97       	sbiw	r24, 0x00	; 0
    22cc:	a1 05       	cpc	r26, r1
    22ce:	b1 05       	cpc	r27, r1
    22d0:	31 f4       	brne	.+12     	; 0x22de <LCD_vidSendNumberBottomRight+0x46>
	{
		LCD_u8sendData('0');
    22d2:	80 e3       	ldi	r24, 0x30	; 48
    22d4:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <LCD_u8sendData>
		LCD_vidShiftLeftCursor();
    22d8:	0e 94 42 11 	call	0x2284	; 0x2284 <LCD_vidShiftLeftCursor>
    22dc:	c5 c0       	rjmp	.+394    	; 0x2468 <LCD_vidSendNumberBottomRight+0x1d0>
	}

	else if(copy_u8Number<0)
    22de:	8c a1       	ldd	r24, Y+36	; 0x24
    22e0:	9d a1       	ldd	r25, Y+37	; 0x25
    22e2:	ae a1       	ldd	r26, Y+38	; 0x26
    22e4:	bf a1       	ldd	r27, Y+39	; 0x27
    22e6:	bb 23       	and	r27, r27
    22e8:	0c f0       	brlt	.+2      	; 0x22ec <LCD_vidSendNumberBottomRight+0x54>
    22ea:	99 c0       	rjmp	.+306    	; 0x241e <LCD_vidSendNumberBottomRight+0x186>
	{
		copy_u8Number *= (-1);
    22ec:	8c a1       	ldd	r24, Y+36	; 0x24
    22ee:	9d a1       	ldd	r25, Y+37	; 0x25
    22f0:	ae a1       	ldd	r26, Y+38	; 0x26
    22f2:	bf a1       	ldd	r27, Y+39	; 0x27
    22f4:	b0 95       	com	r27
    22f6:	a0 95       	com	r26
    22f8:	90 95       	com	r25
    22fa:	81 95       	neg	r24
    22fc:	9f 4f       	sbci	r25, 0xFF	; 255
    22fe:	af 4f       	sbci	r26, 0xFF	; 255
    2300:	bf 4f       	sbci	r27, 0xFF	; 255
    2302:	8c a3       	std	Y+36, r24	; 0x24
    2304:	9d a3       	std	Y+37, r25	; 0x25
    2306:	ae a3       	std	Y+38, r26	; 0x26
    2308:	bf a3       	std	Y+39, r27	; 0x27
    230a:	2f c0       	rjmp	.+94     	; 0x236a <LCD_vidSendNumberBottomRight+0xd2>

		while(copy_u8Number != 0)
		{
			local_u8Nums[local_u8Length] = copy_u8Number % 10;
    230c:	8b 81       	ldd	r24, Y+3	; 0x03
    230e:	08 2f       	mov	r16, r24
    2310:	11 27       	eor	r17, r17
    2312:	07 fd       	sbrc	r16, 7
    2314:	10 95       	com	r17
    2316:	8c a1       	ldd	r24, Y+36	; 0x24
    2318:	9d a1       	ldd	r25, Y+37	; 0x25
    231a:	ae a1       	ldd	r26, Y+38	; 0x26
    231c:	bf a1       	ldd	r27, Y+39	; 0x27
    231e:	2a e0       	ldi	r18, 0x0A	; 10
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	40 e0       	ldi	r20, 0x00	; 0
    2324:	50 e0       	ldi	r21, 0x00	; 0
    2326:	bc 01       	movw	r22, r24
    2328:	cd 01       	movw	r24, r26
    232a:	0e 94 92 19 	call	0x3324	; 0x3324 <__divmodsi4>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	28 2f       	mov	r18, r24
    2334:	ce 01       	movw	r24, r28
    2336:	04 96       	adiw	r24, 0x04	; 4
    2338:	fc 01       	movw	r30, r24
    233a:	e0 0f       	add	r30, r16
    233c:	f1 1f       	adc	r31, r17
    233e:	20 83       	st	Z, r18
			copy_u8Number /= 10;
    2340:	8c a1       	ldd	r24, Y+36	; 0x24
    2342:	9d a1       	ldd	r25, Y+37	; 0x25
    2344:	ae a1       	ldd	r26, Y+38	; 0x26
    2346:	bf a1       	ldd	r27, Y+39	; 0x27
    2348:	2a e0       	ldi	r18, 0x0A	; 10
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	40 e0       	ldi	r20, 0x00	; 0
    234e:	50 e0       	ldi	r21, 0x00	; 0
    2350:	bc 01       	movw	r22, r24
    2352:	cd 01       	movw	r24, r26
    2354:	0e 94 92 19 	call	0x3324	; 0x3324 <__divmodsi4>
    2358:	da 01       	movw	r26, r20
    235a:	c9 01       	movw	r24, r18
    235c:	8c a3       	std	Y+36, r24	; 0x24
    235e:	9d a3       	std	Y+37, r25	; 0x25
    2360:	ae a3       	std	Y+38, r26	; 0x26
    2362:	bf a3       	std	Y+39, r27	; 0x27
			local_u8Length++;
    2364:	8b 81       	ldd	r24, Y+3	; 0x03
    2366:	8f 5f       	subi	r24, 0xFF	; 255
    2368:	8b 83       	std	Y+3, r24	; 0x03

	else if(copy_u8Number<0)
	{
		copy_u8Number *= (-1);

		while(copy_u8Number != 0)
    236a:	8c a1       	ldd	r24, Y+36	; 0x24
    236c:	9d a1       	ldd	r25, Y+37	; 0x25
    236e:	ae a1       	ldd	r26, Y+38	; 0x26
    2370:	bf a1       	ldd	r27, Y+39	; 0x27
    2372:	00 97       	sbiw	r24, 0x00	; 0
    2374:	a1 05       	cpc	r26, r1
    2376:	b1 05       	cpc	r27, r1
    2378:	49 f6       	brne	.-110    	; 0x230c <LCD_vidSendNumberBottomRight+0x74>
		{
			local_u8Nums[local_u8Length] = copy_u8Number % 10;
			copy_u8Number /= 10;
			local_u8Length++;
		}
		for(u8 counter=0; counter<=local_u8Length; counter++)
    237a:	1a 82       	std	Y+2, r1	; 0x02
    237c:	11 c0       	rjmp	.+34     	; 0x23a0 <LCD_vidSendNumberBottomRight+0x108>
		{
			LCD_u8sendData(local_u8Nums[counter] + '0');
    237e:	8a 81       	ldd	r24, Y+2	; 0x02
    2380:	28 2f       	mov	r18, r24
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	ce 01       	movw	r24, r28
    2386:	04 96       	adiw	r24, 0x04	; 4
    2388:	fc 01       	movw	r30, r24
    238a:	e2 0f       	add	r30, r18
    238c:	f3 1f       	adc	r31, r19
    238e:	80 81       	ld	r24, Z
    2390:	80 5d       	subi	r24, 0xD0	; 208
    2392:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <LCD_u8sendData>
			LCD_vidShiftLeftCursor();
    2396:	0e 94 42 11 	call	0x2284	; 0x2284 <LCD_vidShiftLeftCursor>
		{
			local_u8Nums[local_u8Length] = copy_u8Number % 10;
			copy_u8Number /= 10;
			local_u8Length++;
		}
		for(u8 counter=0; counter<=local_u8Length; counter++)
    239a:	8a 81       	ldd	r24, Y+2	; 0x02
    239c:	8f 5f       	subi	r24, 0xFF	; 255
    239e:	8a 83       	std	Y+2, r24	; 0x02
    23a0:	8a 81       	ldd	r24, Y+2	; 0x02
    23a2:	28 2f       	mov	r18, r24
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	8b 81       	ldd	r24, Y+3	; 0x03
    23a8:	99 27       	eor	r25, r25
    23aa:	87 fd       	sbrc	r24, 7
    23ac:	90 95       	com	r25
    23ae:	82 17       	cp	r24, r18
    23b0:	93 07       	cpc	r25, r19
    23b2:	2c f7       	brge	.-54     	; 0x237e <LCD_vidSendNumberBottomRight+0xe6>
		{
			LCD_u8sendData(local_u8Nums[counter] + '0');
			LCD_vidShiftLeftCursor();
		}
		LCD_u8sendData('-');
    23b4:	8d e2       	ldi	r24, 0x2D	; 45
    23b6:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <LCD_u8sendData>
		LCD_vidShiftLeftCursor();
    23ba:	0e 94 42 11 	call	0x2284	; 0x2284 <LCD_vidShiftLeftCursor>
    23be:	54 c0       	rjmp	.+168    	; 0x2468 <LCD_vidSendNumberBottomRight+0x1d0>

	else
	{
		while(copy_u8Number != 0)
		{
			local_u8Length++;
    23c0:	8b 81       	ldd	r24, Y+3	; 0x03
    23c2:	8f 5f       	subi	r24, 0xFF	; 255
    23c4:	8b 83       	std	Y+3, r24	; 0x03
			local_u8Nums[local_u8Length] = copy_u8Number % 10;
    23c6:	8b 81       	ldd	r24, Y+3	; 0x03
    23c8:	08 2f       	mov	r16, r24
    23ca:	11 27       	eor	r17, r17
    23cc:	07 fd       	sbrc	r16, 7
    23ce:	10 95       	com	r17
    23d0:	8c a1       	ldd	r24, Y+36	; 0x24
    23d2:	9d a1       	ldd	r25, Y+37	; 0x25
    23d4:	ae a1       	ldd	r26, Y+38	; 0x26
    23d6:	bf a1       	ldd	r27, Y+39	; 0x27
    23d8:	2a e0       	ldi	r18, 0x0A	; 10
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	40 e0       	ldi	r20, 0x00	; 0
    23de:	50 e0       	ldi	r21, 0x00	; 0
    23e0:	bc 01       	movw	r22, r24
    23e2:	cd 01       	movw	r24, r26
    23e4:	0e 94 92 19 	call	0x3324	; 0x3324 <__divmodsi4>
    23e8:	dc 01       	movw	r26, r24
    23ea:	cb 01       	movw	r24, r22
    23ec:	28 2f       	mov	r18, r24
    23ee:	ce 01       	movw	r24, r28
    23f0:	04 96       	adiw	r24, 0x04	; 4
    23f2:	fc 01       	movw	r30, r24
    23f4:	e0 0f       	add	r30, r16
    23f6:	f1 1f       	adc	r31, r17
    23f8:	20 83       	st	Z, r18
			copy_u8Number /= 10;
    23fa:	8c a1       	ldd	r24, Y+36	; 0x24
    23fc:	9d a1       	ldd	r25, Y+37	; 0x25
    23fe:	ae a1       	ldd	r26, Y+38	; 0x26
    2400:	bf a1       	ldd	r27, Y+39	; 0x27
    2402:	2a e0       	ldi	r18, 0x0A	; 10
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	40 e0       	ldi	r20, 0x00	; 0
    2408:	50 e0       	ldi	r21, 0x00	; 0
    240a:	bc 01       	movw	r22, r24
    240c:	cd 01       	movw	r24, r26
    240e:	0e 94 92 19 	call	0x3324	; 0x3324 <__divmodsi4>
    2412:	da 01       	movw	r26, r20
    2414:	c9 01       	movw	r24, r18
    2416:	8c a3       	std	Y+36, r24	; 0x24
    2418:	9d a3       	std	Y+37, r25	; 0x25
    241a:	ae a3       	std	Y+38, r26	; 0x26
    241c:	bf a3       	std	Y+39, r27	; 0x27
		LCD_vidShiftLeftCursor();
	}

	else
	{
		while(copy_u8Number != 0)
    241e:	8c a1       	ldd	r24, Y+36	; 0x24
    2420:	9d a1       	ldd	r25, Y+37	; 0x25
    2422:	ae a1       	ldd	r26, Y+38	; 0x26
    2424:	bf a1       	ldd	r27, Y+39	; 0x27
    2426:	00 97       	sbiw	r24, 0x00	; 0
    2428:	a1 05       	cpc	r26, r1
    242a:	b1 05       	cpc	r27, r1
    242c:	49 f6       	brne	.-110    	; 0x23c0 <LCD_vidSendNumberBottomRight+0x128>
		{
			local_u8Length++;
			local_u8Nums[local_u8Length] = copy_u8Number % 10;
			copy_u8Number /= 10;
		}
		for(u8 counter=0; counter<=local_u8Length; counter++)
    242e:	19 82       	std	Y+1, r1	; 0x01
    2430:	11 c0       	rjmp	.+34     	; 0x2454 <LCD_vidSendNumberBottomRight+0x1bc>
		{
			LCD_u8sendData(local_u8Nums[counter] + '0');
    2432:	89 81       	ldd	r24, Y+1	; 0x01
    2434:	28 2f       	mov	r18, r24
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	ce 01       	movw	r24, r28
    243a:	04 96       	adiw	r24, 0x04	; 4
    243c:	fc 01       	movw	r30, r24
    243e:	e2 0f       	add	r30, r18
    2440:	f3 1f       	adc	r31, r19
    2442:	80 81       	ld	r24, Z
    2444:	80 5d       	subi	r24, 0xD0	; 208
    2446:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <LCD_u8sendData>
			LCD_vidShiftLeftCursor();
    244a:	0e 94 42 11 	call	0x2284	; 0x2284 <LCD_vidShiftLeftCursor>
		{
			local_u8Length++;
			local_u8Nums[local_u8Length] = copy_u8Number % 10;
			copy_u8Number /= 10;
		}
		for(u8 counter=0; counter<=local_u8Length; counter++)
    244e:	89 81       	ldd	r24, Y+1	; 0x01
    2450:	8f 5f       	subi	r24, 0xFF	; 255
    2452:	89 83       	std	Y+1, r24	; 0x01
    2454:	89 81       	ldd	r24, Y+1	; 0x01
    2456:	28 2f       	mov	r18, r24
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	8b 81       	ldd	r24, Y+3	; 0x03
    245c:	99 27       	eor	r25, r25
    245e:	87 fd       	sbrc	r24, 7
    2460:	90 95       	com	r25
    2462:	82 17       	cp	r24, r18
    2464:	93 07       	cpc	r25, r19
    2466:	2c f7       	brge	.-54     	; 0x2432 <LCD_vidSendNumberBottomRight+0x19a>
		{
			LCD_u8sendData(local_u8Nums[counter] + '0');
			LCD_vidShiftLeftCursor();
		}
	}
}
    2468:	a7 96       	adiw	r28, 0x27	; 39
    246a:	0f b6       	in	r0, 0x3f	; 63
    246c:	f8 94       	cli
    246e:	de bf       	out	0x3e, r29	; 62
    2470:	0f be       	out	0x3f, r0	; 63
    2472:	cd bf       	out	0x3d, r28	; 61
    2474:	cf 91       	pop	r28
    2476:	df 91       	pop	r29
    2478:	1f 91       	pop	r17
    247a:	0f 91       	pop	r16
    247c:	08 95       	ret

0000247e <LCD_vidSendNumber>:

void LCD_vidSendNumber(s32 copy_u8Number)
{
    247e:	0f 93       	push	r16
    2480:	1f 93       	push	r17
    2482:	df 93       	push	r29
    2484:	cf 93       	push	r28
    2486:	cd b7       	in	r28, 0x3d	; 61
    2488:	de b7       	in	r29, 0x3e	; 62
    248a:	a5 97       	sbiw	r28, 0x25	; 37
    248c:	0f b6       	in	r0, 0x3f	; 63
    248e:	f8 94       	cli
    2490:	de bf       	out	0x3e, r29	; 62
    2492:	0f be       	out	0x3f, r0	; 63
    2494:	cd bf       	out	0x3d, r28	; 61
    2496:	6a a3       	std	Y+34, r22	; 0x22
    2498:	7b a3       	std	Y+35, r23	; 0x23
    249a:	8c a3       	std	Y+36, r24	; 0x24
    249c:	9d a3       	std	Y+37, r25	; 0x25
	s8 local_u8Length = 0;
    249e:	19 82       	std	Y+1, r1	; 0x01
	u8 local_u8Nums[32];

	if(copy_u8Number==0)
    24a0:	8a a1       	ldd	r24, Y+34	; 0x22
    24a2:	9b a1       	ldd	r25, Y+35	; 0x23
    24a4:	ac a1       	ldd	r26, Y+36	; 0x24
    24a6:	bd a1       	ldd	r27, Y+37	; 0x25
    24a8:	00 97       	sbiw	r24, 0x00	; 0
    24aa:	a1 05       	cpc	r26, r1
    24ac:	b1 05       	cpc	r27, r1
    24ae:	21 f4       	brne	.+8      	; 0x24b8 <LCD_vidSendNumber+0x3a>
	{
		LCD_u8sendData('0');
    24b0:	80 e3       	ldi	r24, 0x30	; 48
    24b2:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <LCD_u8sendData>
    24b6:	9b c0       	rjmp	.+310    	; 0x25ee <LCD_vidSendNumber+0x170>
	}

	else if(copy_u8Number<0)
    24b8:	8a a1       	ldd	r24, Y+34	; 0x22
    24ba:	9b a1       	ldd	r25, Y+35	; 0x23
    24bc:	ac a1       	ldd	r26, Y+36	; 0x24
    24be:	bd a1       	ldd	r27, Y+37	; 0x25
    24c0:	bb 23       	and	r27, r27
    24c2:	0c f0       	brlt	.+2      	; 0x24c6 <LCD_vidSendNumber+0x48>
    24c4:	7a c0       	rjmp	.+244    	; 0x25ba <LCD_vidSendNumber+0x13c>
	{
		copy_u8Number *= (-1);
    24c6:	8a a1       	ldd	r24, Y+34	; 0x22
    24c8:	9b a1       	ldd	r25, Y+35	; 0x23
    24ca:	ac a1       	ldd	r26, Y+36	; 0x24
    24cc:	bd a1       	ldd	r27, Y+37	; 0x25
    24ce:	b0 95       	com	r27
    24d0:	a0 95       	com	r26
    24d2:	90 95       	com	r25
    24d4:	81 95       	neg	r24
    24d6:	9f 4f       	sbci	r25, 0xFF	; 255
    24d8:	af 4f       	sbci	r26, 0xFF	; 255
    24da:	bf 4f       	sbci	r27, 0xFF	; 255
    24dc:	8a a3       	std	Y+34, r24	; 0x22
    24de:	9b a3       	std	Y+35, r25	; 0x23
    24e0:	ac a3       	std	Y+36, r26	; 0x24
    24e2:	bd a3       	std	Y+37, r27	; 0x25
		LCD_u8sendData('-');
    24e4:	8d e2       	ldi	r24, 0x2D	; 45
    24e6:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <LCD_u8sendData>
    24ea:	2f c0       	rjmp	.+94     	; 0x254a <LCD_vidSendNumber+0xcc>

		while(copy_u8Number != 0)
		{
			local_u8Nums[local_u8Length] = copy_u8Number % 10;
    24ec:	89 81       	ldd	r24, Y+1	; 0x01
    24ee:	08 2f       	mov	r16, r24
    24f0:	11 27       	eor	r17, r17
    24f2:	07 fd       	sbrc	r16, 7
    24f4:	10 95       	com	r17
    24f6:	8a a1       	ldd	r24, Y+34	; 0x22
    24f8:	9b a1       	ldd	r25, Y+35	; 0x23
    24fa:	ac a1       	ldd	r26, Y+36	; 0x24
    24fc:	bd a1       	ldd	r27, Y+37	; 0x25
    24fe:	2a e0       	ldi	r18, 0x0A	; 10
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	40 e0       	ldi	r20, 0x00	; 0
    2504:	50 e0       	ldi	r21, 0x00	; 0
    2506:	bc 01       	movw	r22, r24
    2508:	cd 01       	movw	r24, r26
    250a:	0e 94 92 19 	call	0x3324	; 0x3324 <__divmodsi4>
    250e:	dc 01       	movw	r26, r24
    2510:	cb 01       	movw	r24, r22
    2512:	28 2f       	mov	r18, r24
    2514:	ce 01       	movw	r24, r28
    2516:	02 96       	adiw	r24, 0x02	; 2
    2518:	fc 01       	movw	r30, r24
    251a:	e0 0f       	add	r30, r16
    251c:	f1 1f       	adc	r31, r17
    251e:	20 83       	st	Z, r18
			copy_u8Number /= 10;
    2520:	8a a1       	ldd	r24, Y+34	; 0x22
    2522:	9b a1       	ldd	r25, Y+35	; 0x23
    2524:	ac a1       	ldd	r26, Y+36	; 0x24
    2526:	bd a1       	ldd	r27, Y+37	; 0x25
    2528:	2a e0       	ldi	r18, 0x0A	; 10
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	40 e0       	ldi	r20, 0x00	; 0
    252e:	50 e0       	ldi	r21, 0x00	; 0
    2530:	bc 01       	movw	r22, r24
    2532:	cd 01       	movw	r24, r26
    2534:	0e 94 92 19 	call	0x3324	; 0x3324 <__divmodsi4>
    2538:	da 01       	movw	r26, r20
    253a:	c9 01       	movw	r24, r18
    253c:	8a a3       	std	Y+34, r24	; 0x22
    253e:	9b a3       	std	Y+35, r25	; 0x23
    2540:	ac a3       	std	Y+36, r26	; 0x24
    2542:	bd a3       	std	Y+37, r27	; 0x25
			local_u8Length++;
    2544:	89 81       	ldd	r24, Y+1	; 0x01
    2546:	8f 5f       	subi	r24, 0xFF	; 255
    2548:	89 83       	std	Y+1, r24	; 0x01
	else if(copy_u8Number<0)
	{
		copy_u8Number *= (-1);
		LCD_u8sendData('-');

		while(copy_u8Number != 0)
    254a:	8a a1       	ldd	r24, Y+34	; 0x22
    254c:	9b a1       	ldd	r25, Y+35	; 0x23
    254e:	ac a1       	ldd	r26, Y+36	; 0x24
    2550:	bd a1       	ldd	r27, Y+37	; 0x25
    2552:	00 97       	sbiw	r24, 0x00	; 0
    2554:	a1 05       	cpc	r26, r1
    2556:	b1 05       	cpc	r27, r1
    2558:	49 f6       	brne	.-110    	; 0x24ec <LCD_vidSendNumber+0x6e>
    255a:	49 c0       	rjmp	.+146    	; 0x25ee <LCD_vidSendNumber+0x170>

	else
	{
		while(copy_u8Number != 0)
		{
			local_u8Length++;
    255c:	89 81       	ldd	r24, Y+1	; 0x01
    255e:	8f 5f       	subi	r24, 0xFF	; 255
    2560:	89 83       	std	Y+1, r24	; 0x01
			local_u8Nums[local_u8Length] = copy_u8Number % 10;
    2562:	89 81       	ldd	r24, Y+1	; 0x01
    2564:	08 2f       	mov	r16, r24
    2566:	11 27       	eor	r17, r17
    2568:	07 fd       	sbrc	r16, 7
    256a:	10 95       	com	r17
    256c:	8a a1       	ldd	r24, Y+34	; 0x22
    256e:	9b a1       	ldd	r25, Y+35	; 0x23
    2570:	ac a1       	ldd	r26, Y+36	; 0x24
    2572:	bd a1       	ldd	r27, Y+37	; 0x25
    2574:	2a e0       	ldi	r18, 0x0A	; 10
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	40 e0       	ldi	r20, 0x00	; 0
    257a:	50 e0       	ldi	r21, 0x00	; 0
    257c:	bc 01       	movw	r22, r24
    257e:	cd 01       	movw	r24, r26
    2580:	0e 94 92 19 	call	0x3324	; 0x3324 <__divmodsi4>
    2584:	dc 01       	movw	r26, r24
    2586:	cb 01       	movw	r24, r22
    2588:	28 2f       	mov	r18, r24
    258a:	ce 01       	movw	r24, r28
    258c:	02 96       	adiw	r24, 0x02	; 2
    258e:	fc 01       	movw	r30, r24
    2590:	e0 0f       	add	r30, r16
    2592:	f1 1f       	adc	r31, r17
    2594:	20 83       	st	Z, r18
			copy_u8Number /= 10;
    2596:	8a a1       	ldd	r24, Y+34	; 0x22
    2598:	9b a1       	ldd	r25, Y+35	; 0x23
    259a:	ac a1       	ldd	r26, Y+36	; 0x24
    259c:	bd a1       	ldd	r27, Y+37	; 0x25
    259e:	2a e0       	ldi	r18, 0x0A	; 10
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	40 e0       	ldi	r20, 0x00	; 0
    25a4:	50 e0       	ldi	r21, 0x00	; 0
    25a6:	bc 01       	movw	r22, r24
    25a8:	cd 01       	movw	r24, r26
    25aa:	0e 94 92 19 	call	0x3324	; 0x3324 <__divmodsi4>
    25ae:	da 01       	movw	r26, r20
    25b0:	c9 01       	movw	r24, r18
    25b2:	8a a3       	std	Y+34, r24	; 0x22
    25b4:	9b a3       	std	Y+35, r25	; 0x23
    25b6:	ac a3       	std	Y+36, r26	; 0x24
    25b8:	bd a3       	std	Y+37, r27	; 0x25
		}
	}

	else
	{
		while(copy_u8Number != 0)
    25ba:	8a a1       	ldd	r24, Y+34	; 0x22
    25bc:	9b a1       	ldd	r25, Y+35	; 0x23
    25be:	ac a1       	ldd	r26, Y+36	; 0x24
    25c0:	bd a1       	ldd	r27, Y+37	; 0x25
    25c2:	00 97       	sbiw	r24, 0x00	; 0
    25c4:	a1 05       	cpc	r26, r1
    25c6:	b1 05       	cpc	r27, r1
    25c8:	49 f6       	brne	.-110    	; 0x255c <LCD_vidSendNumber+0xde>
    25ca:	11 c0       	rjmp	.+34     	; 0x25ee <LCD_vidSendNumber+0x170>
		}
	}

	for(; local_u8Length>0; local_u8Length--)
	{
		LCD_u8sendData(local_u8Nums[local_u8Length] + '0');
    25cc:	89 81       	ldd	r24, Y+1	; 0x01
    25ce:	28 2f       	mov	r18, r24
    25d0:	33 27       	eor	r19, r19
    25d2:	27 fd       	sbrc	r18, 7
    25d4:	30 95       	com	r19
    25d6:	ce 01       	movw	r24, r28
    25d8:	02 96       	adiw	r24, 0x02	; 2
    25da:	fc 01       	movw	r30, r24
    25dc:	e2 0f       	add	r30, r18
    25de:	f3 1f       	adc	r31, r19
    25e0:	80 81       	ld	r24, Z
    25e2:	80 5d       	subi	r24, 0xD0	; 208
    25e4:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <LCD_u8sendData>
			local_u8Nums[local_u8Length] = copy_u8Number % 10;
			copy_u8Number /= 10;
		}
	}

	for(; local_u8Length>0; local_u8Length--)
    25e8:	89 81       	ldd	r24, Y+1	; 0x01
    25ea:	81 50       	subi	r24, 0x01	; 1
    25ec:	89 83       	std	Y+1, r24	; 0x01
    25ee:	89 81       	ldd	r24, Y+1	; 0x01
    25f0:	18 16       	cp	r1, r24
    25f2:	64 f3       	brlt	.-40     	; 0x25cc <LCD_vidSendNumber+0x14e>
	{
		LCD_u8sendData(local_u8Nums[local_u8Length] + '0');
	}

}
    25f4:	a5 96       	adiw	r28, 0x25	; 37
    25f6:	0f b6       	in	r0, 0x3f	; 63
    25f8:	f8 94       	cli
    25fa:	de bf       	out	0x3e, r29	; 62
    25fc:	0f be       	out	0x3f, r0	; 63
    25fe:	cd bf       	out	0x3d, r28	; 61
    2600:	cf 91       	pop	r28
    2602:	df 91       	pop	r29
    2604:	1f 91       	pop	r17
    2606:	0f 91       	pop	r16
    2608:	08 95       	ret

0000260a <LCD_vidClearDisplay>:

void LCD_vidClearDisplay(void)
{
    260a:	df 93       	push	r29
    260c:	cf 93       	push	r28
    260e:	cd b7       	in	r28, 0x3d	; 61
    2610:	de b7       	in	r29, 0x3e	; 62
	LCD_u8sendCommand(0b00000001);
    2612:	81 e0       	ldi	r24, 0x01	; 1
    2614:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <LCD_u8sendCommand>
}
    2618:	cf 91       	pop	r28
    261a:	df 91       	pop	r29
    261c:	08 95       	ret

0000261e <LCD_vidReturnHome>:

void LCD_vidReturnHome(void)
{
    261e:	df 93       	push	r29
    2620:	cf 93       	push	r28
    2622:	cd b7       	in	r28, 0x3d	; 61
    2624:	de b7       	in	r29, 0x3e	; 62
	LCD_u8sendCommand(0b00000010);
    2626:	82 e0       	ldi	r24, 0x02	; 2
    2628:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <LCD_u8sendCommand>
}
    262c:	cf 91       	pop	r28
    262e:	df 91       	pop	r29
    2630:	08 95       	ret

00002632 <LCD_vidShiftRight>:

void LCD_vidShiftRight(void)
{
    2632:	df 93       	push	r29
    2634:	cf 93       	push	r28
    2636:	cd b7       	in	r28, 0x3d	; 61
    2638:	de b7       	in	r29, 0x3e	; 62
	LCD_u8sendCommand(0b00011100);
    263a:	8c e1       	ldi	r24, 0x1C	; 28
    263c:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <LCD_u8sendCommand>
}
    2640:	cf 91       	pop	r28
    2642:	df 91       	pop	r29
    2644:	08 95       	ret

00002646 <LCD_vidShiftLeft>:

void LCD_vidShiftLeft(void)
{
    2646:	df 93       	push	r29
    2648:	cf 93       	push	r28
    264a:	cd b7       	in	r28, 0x3d	; 61
    264c:	de b7       	in	r29, 0x3e	; 62
	LCD_u8sendCommand(0b00011000);
    264e:	88 e1       	ldi	r24, 0x18	; 24
    2650:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <LCD_u8sendCommand>

}
    2654:	cf 91       	pop	r28
    2656:	df 91       	pop	r29
    2658:	08 95       	ret

0000265a <LCD_vidSinWaveString>:

void LCD_vidSinWaveString(const u8* copy_pcString)
{
    265a:	df 93       	push	r29
    265c:	cf 93       	push	r28
    265e:	cd b7       	in	r28, 0x3d	; 61
    2660:	de b7       	in	r29, 0x3e	; 62
    2662:	63 97       	sbiw	r28, 0x13	; 19
    2664:	0f b6       	in	r0, 0x3f	; 63
    2666:	f8 94       	cli
    2668:	de bf       	out	0x3e, r29	; 62
    266a:	0f be       	out	0x3f, r0	; 63
    266c:	cd bf       	out	0x3d, r28	; 61
    266e:	9b 8b       	std	Y+19, r25	; 0x13
    2670:	8a 8b       	std	Y+18, r24	; 0x12
	u8 local_u8counter = 0;
    2672:	19 8a       	std	Y+17, r1	; 0x11
	u8 local_u8XPos = 2;
    2674:	82 e0       	ldi	r24, 0x02	; 2
    2676:	88 8b       	std	Y+16, r24	; 0x10
	u8 local_u8Iterate = 0;
    2678:	1f 86       	std	Y+15, r1	; 0x0f
    267a:	8f c0       	rjmp	.+286    	; 0x279a <LCD_vidSinWaveString+0x140>

	while((copy_pcString[local_u8counter] != '\0')&&local_u8Iterate<10)
	{
		if(local_u8counter/2)
    267c:	89 89       	ldd	r24, Y+17	; 0x11
    267e:	82 30       	cpi	r24, 0x02	; 2
    2680:	28 f0       	brcs	.+10     	; 0x268c <LCD_vidSinWaveString+0x32>
		{
			LCD_vidGoToXY(local_u8XPos, 0);
    2682:	88 89       	ldd	r24, Y+16	; 0x10
    2684:	60 e0       	ldi	r22, 0x00	; 0
    2686:	0e 94 1a 11 	call	0x2234	; 0x2234 <LCD_vidGoToXY>
    268a:	04 c0       	rjmp	.+8      	; 0x2694 <LCD_vidSinWaveString+0x3a>
		}

		else
		{
			LCD_vidGoToXY(local_u8XPos, 1);
    268c:	88 89       	ldd	r24, Y+16	; 0x10
    268e:	61 e0       	ldi	r22, 0x01	; 1
    2690:	0e 94 1a 11 	call	0x2234	; 0x2234 <LCD_vidGoToXY>
		}

		LCD_u8sendData(copy_pcString[local_u8counter]);
    2694:	89 89       	ldd	r24, Y+17	; 0x11
    2696:	28 2f       	mov	r18, r24
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	8a 89       	ldd	r24, Y+18	; 0x12
    269c:	9b 89       	ldd	r25, Y+19	; 0x13
    269e:	fc 01       	movw	r30, r24
    26a0:	e2 0f       	add	r30, r18
    26a2:	f3 1f       	adc	r31, r19
    26a4:	80 81       	ld	r24, Z
    26a6:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <LCD_u8sendData>
		local_u8counter++;
    26aa:	89 89       	ldd	r24, Y+17	; 0x11
    26ac:	8f 5f       	subi	r24, 0xFF	; 255
    26ae:	89 8b       	std	Y+17, r24	; 0x11
		local_u8XPos++;
    26b0:	88 89       	ldd	r24, Y+16	; 0x10
    26b2:	8f 5f       	subi	r24, 0xFF	; 255
    26b4:	88 8b       	std	Y+16, r24	; 0x10
    26b6:	80 e0       	ldi	r24, 0x00	; 0
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	a6 e1       	ldi	r26, 0x16	; 22
    26bc:	b3 e4       	ldi	r27, 0x43	; 67
    26be:	8b 87       	std	Y+11, r24	; 0x0b
    26c0:	9c 87       	std	Y+12, r25	; 0x0c
    26c2:	ad 87       	std	Y+13, r26	; 0x0d
    26c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    26c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    26ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    26cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    26ce:	20 e0       	ldi	r18, 0x00	; 0
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	4a ef       	ldi	r20, 0xFA	; 250
    26d4:	54 e4       	ldi	r21, 0x44	; 68
    26d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26da:	dc 01       	movw	r26, r24
    26dc:	cb 01       	movw	r24, r22
    26de:	8f 83       	std	Y+7, r24	; 0x07
    26e0:	98 87       	std	Y+8, r25	; 0x08
    26e2:	a9 87       	std	Y+9, r26	; 0x09
    26e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26e6:	6f 81       	ldd	r22, Y+7	; 0x07
    26e8:	78 85       	ldd	r23, Y+8	; 0x08
    26ea:	89 85       	ldd	r24, Y+9	; 0x09
    26ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ee:	20 e0       	ldi	r18, 0x00	; 0
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	40 e8       	ldi	r20, 0x80	; 128
    26f4:	5f e3       	ldi	r21, 0x3F	; 63
    26f6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    26fa:	88 23       	and	r24, r24
    26fc:	2c f4       	brge	.+10     	; 0x2708 <LCD_vidSinWaveString+0xae>
		__ticks = 1;
    26fe:	81 e0       	ldi	r24, 0x01	; 1
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	9e 83       	std	Y+6, r25	; 0x06
    2704:	8d 83       	std	Y+5, r24	; 0x05
    2706:	3f c0       	rjmp	.+126    	; 0x2786 <LCD_vidSinWaveString+0x12c>
	else if (__tmp > 65535)
    2708:	6f 81       	ldd	r22, Y+7	; 0x07
    270a:	78 85       	ldd	r23, Y+8	; 0x08
    270c:	89 85       	ldd	r24, Y+9	; 0x09
    270e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2710:	20 e0       	ldi	r18, 0x00	; 0
    2712:	3f ef       	ldi	r19, 0xFF	; 255
    2714:	4f e7       	ldi	r20, 0x7F	; 127
    2716:	57 e4       	ldi	r21, 0x47	; 71
    2718:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    271c:	18 16       	cp	r1, r24
    271e:	4c f5       	brge	.+82     	; 0x2772 <LCD_vidSinWaveString+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2720:	6b 85       	ldd	r22, Y+11	; 0x0b
    2722:	7c 85       	ldd	r23, Y+12	; 0x0c
    2724:	8d 85       	ldd	r24, Y+13	; 0x0d
    2726:	9e 85       	ldd	r25, Y+14	; 0x0e
    2728:	20 e0       	ldi	r18, 0x00	; 0
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	40 e2       	ldi	r20, 0x20	; 32
    272e:	51 e4       	ldi	r21, 0x41	; 65
    2730:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2734:	dc 01       	movw	r26, r24
    2736:	cb 01       	movw	r24, r22
    2738:	bc 01       	movw	r22, r24
    273a:	cd 01       	movw	r24, r26
    273c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2740:	dc 01       	movw	r26, r24
    2742:	cb 01       	movw	r24, r22
    2744:	9e 83       	std	Y+6, r25	; 0x06
    2746:	8d 83       	std	Y+5, r24	; 0x05
    2748:	0f c0       	rjmp	.+30     	; 0x2768 <LCD_vidSinWaveString+0x10e>
    274a:	88 ec       	ldi	r24, 0xC8	; 200
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	9c 83       	std	Y+4, r25	; 0x04
    2750:	8b 83       	std	Y+3, r24	; 0x03
    2752:	8b 81       	ldd	r24, Y+3	; 0x03
    2754:	9c 81       	ldd	r25, Y+4	; 0x04
    2756:	01 97       	sbiw	r24, 0x01	; 1
    2758:	f1 f7       	brne	.-4      	; 0x2756 <LCD_vidSinWaveString+0xfc>
    275a:	9c 83       	std	Y+4, r25	; 0x04
    275c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    275e:	8d 81       	ldd	r24, Y+5	; 0x05
    2760:	9e 81       	ldd	r25, Y+6	; 0x06
    2762:	01 97       	sbiw	r24, 0x01	; 1
    2764:	9e 83       	std	Y+6, r25	; 0x06
    2766:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2768:	8d 81       	ldd	r24, Y+5	; 0x05
    276a:	9e 81       	ldd	r25, Y+6	; 0x06
    276c:	00 97       	sbiw	r24, 0x00	; 0
    276e:	69 f7       	brne	.-38     	; 0x274a <LCD_vidSinWaveString+0xf0>
    2770:	14 c0       	rjmp	.+40     	; 0x279a <LCD_vidSinWaveString+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2772:	6f 81       	ldd	r22, Y+7	; 0x07
    2774:	78 85       	ldd	r23, Y+8	; 0x08
    2776:	89 85       	ldd	r24, Y+9	; 0x09
    2778:	9a 85       	ldd	r25, Y+10	; 0x0a
    277a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    277e:	dc 01       	movw	r26, r24
    2780:	cb 01       	movw	r24, r22
    2782:	9e 83       	std	Y+6, r25	; 0x06
    2784:	8d 83       	std	Y+5, r24	; 0x05
    2786:	8d 81       	ldd	r24, Y+5	; 0x05
    2788:	9e 81       	ldd	r25, Y+6	; 0x06
    278a:	9a 83       	std	Y+2, r25	; 0x02
    278c:	89 83       	std	Y+1, r24	; 0x01
    278e:	89 81       	ldd	r24, Y+1	; 0x01
    2790:	9a 81       	ldd	r25, Y+2	; 0x02
    2792:	01 97       	sbiw	r24, 0x01	; 1
    2794:	f1 f7       	brne	.-4      	; 0x2792 <LCD_vidSinWaveString+0x138>
    2796:	9a 83       	std	Y+2, r25	; 0x02
    2798:	89 83       	std	Y+1, r24	; 0x01
{
	u8 local_u8counter = 0;
	u8 local_u8XPos = 2;
	u8 local_u8Iterate = 0;

	while((copy_pcString[local_u8counter] != '\0')&&local_u8Iterate<10)
    279a:	89 89       	ldd	r24, Y+17	; 0x11
    279c:	28 2f       	mov	r18, r24
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	8a 89       	ldd	r24, Y+18	; 0x12
    27a2:	9b 89       	ldd	r25, Y+19	; 0x13
    27a4:	fc 01       	movw	r30, r24
    27a6:	e2 0f       	add	r30, r18
    27a8:	f3 1f       	adc	r31, r19
    27aa:	80 81       	ld	r24, Z
    27ac:	88 23       	and	r24, r24
    27ae:	21 f0       	breq	.+8      	; 0x27b8 <LCD_vidSinWaveString+0x15e>
    27b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    27b2:	8a 30       	cpi	r24, 0x0A	; 10
    27b4:	08 f4       	brcc	.+2      	; 0x27b8 <LCD_vidSinWaveString+0x15e>
    27b6:	62 cf       	rjmp	.-316    	; 0x267c <LCD_vidSinWaveString+0x22>
		LCD_u8sendData(copy_pcString[local_u8counter]);
		local_u8counter++;
		local_u8XPos++;
		_delay_ms(150);
	}
}
    27b8:	63 96       	adiw	r28, 0x13	; 19
    27ba:	0f b6       	in	r0, 0x3f	; 63
    27bc:	f8 94       	cli
    27be:	de bf       	out	0x3e, r29	; 62
    27c0:	0f be       	out	0x3f, r0	; 63
    27c2:	cd bf       	out	0x3d, r28	; 61
    27c4:	cf 91       	pop	r28
    27c6:	df 91       	pop	r29
    27c8:	08 95       	ret

000027ca <LCD_vidGlitchString>:

void LCD_vidGlitchString(const u8* copy_pcString)
{
    27ca:	0f 93       	push	r16
    27cc:	1f 93       	push	r17
    27ce:	df 93       	push	r29
    27d0:	cf 93       	push	r28
    27d2:	cd b7       	in	r28, 0x3d	; 61
    27d4:	de b7       	in	r29, 0x3e	; 62
    27d6:	c6 55       	subi	r28, 0x56	; 86
    27d8:	d0 40       	sbci	r29, 0x00	; 0
    27da:	0f b6       	in	r0, 0x3f	; 63
    27dc:	f8 94       	cli
    27de:	de bf       	out	0x3e, r29	; 62
    27e0:	0f be       	out	0x3f, r0	; 63
    27e2:	cd bf       	out	0x3d, r28	; 61
    27e4:	fe 01       	movw	r30, r28
    27e6:	eb 5a       	subi	r30, 0xAB	; 171
    27e8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ea:	91 83       	std	Z+1, r25	; 0x01
    27ec:	80 83       	st	Z, r24
	LCD_vidGoToXY(3, 0);
    27ee:	83 e0       	ldi	r24, 0x03	; 3
    27f0:	60 e0       	ldi	r22, 0x00	; 0
    27f2:	0e 94 1a 11 	call	0x2234	; 0x2234 <LCD_vidGoToXY>
	LCD_vidSendString(copy_pcString);
    27f6:	fe 01       	movw	r30, r28
    27f8:	eb 5a       	subi	r30, 0xAB	; 171
    27fa:	ff 4f       	sbci	r31, 0xFF	; 255
    27fc:	80 81       	ld	r24, Z
    27fe:	91 81       	ldd	r25, Z+1	; 0x01
    2800:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <LCD_vidSendString>
    2804:	fe 01       	movw	r30, r28
    2806:	ef 5a       	subi	r30, 0xAF	; 175
    2808:	ff 4f       	sbci	r31, 0xFF	; 255
    280a:	80 e0       	ldi	r24, 0x00	; 0
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	a8 e4       	ldi	r26, 0x48	; 72
    2810:	b2 e4       	ldi	r27, 0x42	; 66
    2812:	80 83       	st	Z, r24
    2814:	91 83       	std	Z+1, r25	; 0x01
    2816:	a2 83       	std	Z+2, r26	; 0x02
    2818:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    281a:	8e 01       	movw	r16, r28
    281c:	03 5b       	subi	r16, 0xB3	; 179
    281e:	1f 4f       	sbci	r17, 0xFF	; 255
    2820:	fe 01       	movw	r30, r28
    2822:	ef 5a       	subi	r30, 0xAF	; 175
    2824:	ff 4f       	sbci	r31, 0xFF	; 255
    2826:	60 81       	ld	r22, Z
    2828:	71 81       	ldd	r23, Z+1	; 0x01
    282a:	82 81       	ldd	r24, Z+2	; 0x02
    282c:	93 81       	ldd	r25, Z+3	; 0x03
    282e:	20 e0       	ldi	r18, 0x00	; 0
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	4a ef       	ldi	r20, 0xFA	; 250
    2834:	54 e4       	ldi	r21, 0x44	; 68
    2836:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    283a:	dc 01       	movw	r26, r24
    283c:	cb 01       	movw	r24, r22
    283e:	f8 01       	movw	r30, r16
    2840:	80 83       	st	Z, r24
    2842:	91 83       	std	Z+1, r25	; 0x01
    2844:	a2 83       	std	Z+2, r26	; 0x02
    2846:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2848:	fe 01       	movw	r30, r28
    284a:	e3 5b       	subi	r30, 0xB3	; 179
    284c:	ff 4f       	sbci	r31, 0xFF	; 255
    284e:	60 81       	ld	r22, Z
    2850:	71 81       	ldd	r23, Z+1	; 0x01
    2852:	82 81       	ldd	r24, Z+2	; 0x02
    2854:	93 81       	ldd	r25, Z+3	; 0x03
    2856:	20 e0       	ldi	r18, 0x00	; 0
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	40 e8       	ldi	r20, 0x80	; 128
    285c:	5f e3       	ldi	r21, 0x3F	; 63
    285e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2862:	88 23       	and	r24, r24
    2864:	44 f4       	brge	.+16     	; 0x2876 <LCD_vidGlitchString+0xac>
		__ticks = 1;
    2866:	fe 01       	movw	r30, r28
    2868:	e5 5b       	subi	r30, 0xB5	; 181
    286a:	ff 4f       	sbci	r31, 0xFF	; 255
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	91 83       	std	Z+1, r25	; 0x01
    2872:	80 83       	st	Z, r24
    2874:	64 c0       	rjmp	.+200    	; 0x293e <LCD_vidGlitchString+0x174>
	else if (__tmp > 65535)
    2876:	fe 01       	movw	r30, r28
    2878:	e3 5b       	subi	r30, 0xB3	; 179
    287a:	ff 4f       	sbci	r31, 0xFF	; 255
    287c:	60 81       	ld	r22, Z
    287e:	71 81       	ldd	r23, Z+1	; 0x01
    2880:	82 81       	ldd	r24, Z+2	; 0x02
    2882:	93 81       	ldd	r25, Z+3	; 0x03
    2884:	20 e0       	ldi	r18, 0x00	; 0
    2886:	3f ef       	ldi	r19, 0xFF	; 255
    2888:	4f e7       	ldi	r20, 0x7F	; 127
    288a:	57 e4       	ldi	r21, 0x47	; 71
    288c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2890:	18 16       	cp	r1, r24
    2892:	0c f0       	brlt	.+2      	; 0x2896 <LCD_vidGlitchString+0xcc>
    2894:	43 c0       	rjmp	.+134    	; 0x291c <LCD_vidGlitchString+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2896:	fe 01       	movw	r30, r28
    2898:	ef 5a       	subi	r30, 0xAF	; 175
    289a:	ff 4f       	sbci	r31, 0xFF	; 255
    289c:	60 81       	ld	r22, Z
    289e:	71 81       	ldd	r23, Z+1	; 0x01
    28a0:	82 81       	ldd	r24, Z+2	; 0x02
    28a2:	93 81       	ldd	r25, Z+3	; 0x03
    28a4:	20 e0       	ldi	r18, 0x00	; 0
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	40 e2       	ldi	r20, 0x20	; 32
    28aa:	51 e4       	ldi	r21, 0x41	; 65
    28ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28b0:	dc 01       	movw	r26, r24
    28b2:	cb 01       	movw	r24, r22
    28b4:	8e 01       	movw	r16, r28
    28b6:	05 5b       	subi	r16, 0xB5	; 181
    28b8:	1f 4f       	sbci	r17, 0xFF	; 255
    28ba:	bc 01       	movw	r22, r24
    28bc:	cd 01       	movw	r24, r26
    28be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28c2:	dc 01       	movw	r26, r24
    28c4:	cb 01       	movw	r24, r22
    28c6:	f8 01       	movw	r30, r16
    28c8:	91 83       	std	Z+1, r25	; 0x01
    28ca:	80 83       	st	Z, r24
    28cc:	1f c0       	rjmp	.+62     	; 0x290c <LCD_vidGlitchString+0x142>
    28ce:	fe 01       	movw	r30, r28
    28d0:	e7 5b       	subi	r30, 0xB7	; 183
    28d2:	ff 4f       	sbci	r31, 0xFF	; 255
    28d4:	88 ec       	ldi	r24, 0xC8	; 200
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	91 83       	std	Z+1, r25	; 0x01
    28da:	80 83       	st	Z, r24
    28dc:	fe 01       	movw	r30, r28
    28de:	e7 5b       	subi	r30, 0xB7	; 183
    28e0:	ff 4f       	sbci	r31, 0xFF	; 255
    28e2:	80 81       	ld	r24, Z
    28e4:	91 81       	ldd	r25, Z+1	; 0x01
    28e6:	01 97       	sbiw	r24, 0x01	; 1
    28e8:	f1 f7       	brne	.-4      	; 0x28e6 <LCD_vidGlitchString+0x11c>
    28ea:	fe 01       	movw	r30, r28
    28ec:	e7 5b       	subi	r30, 0xB7	; 183
    28ee:	ff 4f       	sbci	r31, 0xFF	; 255
    28f0:	91 83       	std	Z+1, r25	; 0x01
    28f2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28f4:	de 01       	movw	r26, r28
    28f6:	a5 5b       	subi	r26, 0xB5	; 181
    28f8:	bf 4f       	sbci	r27, 0xFF	; 255
    28fa:	fe 01       	movw	r30, r28
    28fc:	e5 5b       	subi	r30, 0xB5	; 181
    28fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2900:	80 81       	ld	r24, Z
    2902:	91 81       	ldd	r25, Z+1	; 0x01
    2904:	01 97       	sbiw	r24, 0x01	; 1
    2906:	11 96       	adiw	r26, 0x01	; 1
    2908:	9c 93       	st	X, r25
    290a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    290c:	fe 01       	movw	r30, r28
    290e:	e5 5b       	subi	r30, 0xB5	; 181
    2910:	ff 4f       	sbci	r31, 0xFF	; 255
    2912:	80 81       	ld	r24, Z
    2914:	91 81       	ldd	r25, Z+1	; 0x01
    2916:	00 97       	sbiw	r24, 0x00	; 0
    2918:	d1 f6       	brne	.-76     	; 0x28ce <LCD_vidGlitchString+0x104>
    291a:	27 c0       	rjmp	.+78     	; 0x296a <LCD_vidGlitchString+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    291c:	8e 01       	movw	r16, r28
    291e:	05 5b       	subi	r16, 0xB5	; 181
    2920:	1f 4f       	sbci	r17, 0xFF	; 255
    2922:	fe 01       	movw	r30, r28
    2924:	e3 5b       	subi	r30, 0xB3	; 179
    2926:	ff 4f       	sbci	r31, 0xFF	; 255
    2928:	60 81       	ld	r22, Z
    292a:	71 81       	ldd	r23, Z+1	; 0x01
    292c:	82 81       	ldd	r24, Z+2	; 0x02
    292e:	93 81       	ldd	r25, Z+3	; 0x03
    2930:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2934:	dc 01       	movw	r26, r24
    2936:	cb 01       	movw	r24, r22
    2938:	f8 01       	movw	r30, r16
    293a:	91 83       	std	Z+1, r25	; 0x01
    293c:	80 83       	st	Z, r24
    293e:	de 01       	movw	r26, r28
    2940:	a9 5b       	subi	r26, 0xB9	; 185
    2942:	bf 4f       	sbci	r27, 0xFF	; 255
    2944:	fe 01       	movw	r30, r28
    2946:	e5 5b       	subi	r30, 0xB5	; 181
    2948:	ff 4f       	sbci	r31, 0xFF	; 255
    294a:	80 81       	ld	r24, Z
    294c:	91 81       	ldd	r25, Z+1	; 0x01
    294e:	8d 93       	st	X+, r24
    2950:	9c 93       	st	X, r25
    2952:	fe 01       	movw	r30, r28
    2954:	e9 5b       	subi	r30, 0xB9	; 185
    2956:	ff 4f       	sbci	r31, 0xFF	; 255
    2958:	80 81       	ld	r24, Z
    295a:	91 81       	ldd	r25, Z+1	; 0x01
    295c:	01 97       	sbiw	r24, 0x01	; 1
    295e:	f1 f7       	brne	.-4      	; 0x295c <LCD_vidGlitchString+0x192>
    2960:	fe 01       	movw	r30, r28
    2962:	e9 5b       	subi	r30, 0xB9	; 185
    2964:	ff 4f       	sbci	r31, 0xFF	; 255
    2966:	91 83       	std	Z+1, r25	; 0x01
    2968:	80 83       	st	Z, r24
	_delay_ms(50);
	LCD_vidShiftLeft();
    296a:	0e 94 23 13 	call	0x2646	; 0x2646 <LCD_vidShiftLeft>
    296e:	fe 01       	movw	r30, r28
    2970:	ed 5b       	subi	r30, 0xBD	; 189
    2972:	ff 4f       	sbci	r31, 0xFF	; 255
    2974:	80 e0       	ldi	r24, 0x00	; 0
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	a8 e4       	ldi	r26, 0x48	; 72
    297a:	b2 e4       	ldi	r27, 0x42	; 66
    297c:	80 83       	st	Z, r24
    297e:	91 83       	std	Z+1, r25	; 0x01
    2980:	a2 83       	std	Z+2, r26	; 0x02
    2982:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2984:	8e 01       	movw	r16, r28
    2986:	01 5c       	subi	r16, 0xC1	; 193
    2988:	1f 4f       	sbci	r17, 0xFF	; 255
    298a:	fe 01       	movw	r30, r28
    298c:	ed 5b       	subi	r30, 0xBD	; 189
    298e:	ff 4f       	sbci	r31, 0xFF	; 255
    2990:	60 81       	ld	r22, Z
    2992:	71 81       	ldd	r23, Z+1	; 0x01
    2994:	82 81       	ldd	r24, Z+2	; 0x02
    2996:	93 81       	ldd	r25, Z+3	; 0x03
    2998:	20 e0       	ldi	r18, 0x00	; 0
    299a:	30 e0       	ldi	r19, 0x00	; 0
    299c:	4a ef       	ldi	r20, 0xFA	; 250
    299e:	54 e4       	ldi	r21, 0x44	; 68
    29a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29a4:	dc 01       	movw	r26, r24
    29a6:	cb 01       	movw	r24, r22
    29a8:	f8 01       	movw	r30, r16
    29aa:	80 83       	st	Z, r24
    29ac:	91 83       	std	Z+1, r25	; 0x01
    29ae:	a2 83       	std	Z+2, r26	; 0x02
    29b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29b2:	fe 01       	movw	r30, r28
    29b4:	ff 96       	adiw	r30, 0x3f	; 63
    29b6:	60 81       	ld	r22, Z
    29b8:	71 81       	ldd	r23, Z+1	; 0x01
    29ba:	82 81       	ldd	r24, Z+2	; 0x02
    29bc:	93 81       	ldd	r25, Z+3	; 0x03
    29be:	20 e0       	ldi	r18, 0x00	; 0
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	40 e8       	ldi	r20, 0x80	; 128
    29c4:	5f e3       	ldi	r21, 0x3F	; 63
    29c6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    29ca:	88 23       	and	r24, r24
    29cc:	2c f4       	brge	.+10     	; 0x29d8 <LCD_vidGlitchString+0x20e>
		__ticks = 1;
    29ce:	81 e0       	ldi	r24, 0x01	; 1
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	9e af       	std	Y+62, r25	; 0x3e
    29d4:	8d af       	std	Y+61, r24	; 0x3d
    29d6:	46 c0       	rjmp	.+140    	; 0x2a64 <LCD_vidGlitchString+0x29a>
	else if (__tmp > 65535)
    29d8:	fe 01       	movw	r30, r28
    29da:	ff 96       	adiw	r30, 0x3f	; 63
    29dc:	60 81       	ld	r22, Z
    29de:	71 81       	ldd	r23, Z+1	; 0x01
    29e0:	82 81       	ldd	r24, Z+2	; 0x02
    29e2:	93 81       	ldd	r25, Z+3	; 0x03
    29e4:	20 e0       	ldi	r18, 0x00	; 0
    29e6:	3f ef       	ldi	r19, 0xFF	; 255
    29e8:	4f e7       	ldi	r20, 0x7F	; 127
    29ea:	57 e4       	ldi	r21, 0x47	; 71
    29ec:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    29f0:	18 16       	cp	r1, r24
    29f2:	64 f5       	brge	.+88     	; 0x2a4c <LCD_vidGlitchString+0x282>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29f4:	fe 01       	movw	r30, r28
    29f6:	ed 5b       	subi	r30, 0xBD	; 189
    29f8:	ff 4f       	sbci	r31, 0xFF	; 255
    29fa:	60 81       	ld	r22, Z
    29fc:	71 81       	ldd	r23, Z+1	; 0x01
    29fe:	82 81       	ldd	r24, Z+2	; 0x02
    2a00:	93 81       	ldd	r25, Z+3	; 0x03
    2a02:	20 e0       	ldi	r18, 0x00	; 0
    2a04:	30 e0       	ldi	r19, 0x00	; 0
    2a06:	40 e2       	ldi	r20, 0x20	; 32
    2a08:	51 e4       	ldi	r21, 0x41	; 65
    2a0a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a0e:	dc 01       	movw	r26, r24
    2a10:	cb 01       	movw	r24, r22
    2a12:	bc 01       	movw	r22, r24
    2a14:	cd 01       	movw	r24, r26
    2a16:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a1a:	dc 01       	movw	r26, r24
    2a1c:	cb 01       	movw	r24, r22
    2a1e:	9e af       	std	Y+62, r25	; 0x3e
    2a20:	8d af       	std	Y+61, r24	; 0x3d
    2a22:	0f c0       	rjmp	.+30     	; 0x2a42 <LCD_vidGlitchString+0x278>
    2a24:	88 ec       	ldi	r24, 0xC8	; 200
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	9c af       	std	Y+60, r25	; 0x3c
    2a2a:	8b af       	std	Y+59, r24	; 0x3b
    2a2c:	8b ad       	ldd	r24, Y+59	; 0x3b
    2a2e:	9c ad       	ldd	r25, Y+60	; 0x3c
    2a30:	01 97       	sbiw	r24, 0x01	; 1
    2a32:	f1 f7       	brne	.-4      	; 0x2a30 <LCD_vidGlitchString+0x266>
    2a34:	9c af       	std	Y+60, r25	; 0x3c
    2a36:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a38:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a3a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a3c:	01 97       	sbiw	r24, 0x01	; 1
    2a3e:	9e af       	std	Y+62, r25	; 0x3e
    2a40:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a42:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a44:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a46:	00 97       	sbiw	r24, 0x00	; 0
    2a48:	69 f7       	brne	.-38     	; 0x2a24 <LCD_vidGlitchString+0x25a>
    2a4a:	16 c0       	rjmp	.+44     	; 0x2a78 <LCD_vidGlitchString+0x2ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a4c:	fe 01       	movw	r30, r28
    2a4e:	ff 96       	adiw	r30, 0x3f	; 63
    2a50:	60 81       	ld	r22, Z
    2a52:	71 81       	ldd	r23, Z+1	; 0x01
    2a54:	82 81       	ldd	r24, Z+2	; 0x02
    2a56:	93 81       	ldd	r25, Z+3	; 0x03
    2a58:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a5c:	dc 01       	movw	r26, r24
    2a5e:	cb 01       	movw	r24, r22
    2a60:	9e af       	std	Y+62, r25	; 0x3e
    2a62:	8d af       	std	Y+61, r24	; 0x3d
    2a64:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a66:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a68:	9a af       	std	Y+58, r25	; 0x3a
    2a6a:	89 af       	std	Y+57, r24	; 0x39
    2a6c:	89 ad       	ldd	r24, Y+57	; 0x39
    2a6e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a70:	01 97       	sbiw	r24, 0x01	; 1
    2a72:	f1 f7       	brne	.-4      	; 0x2a70 <LCD_vidGlitchString+0x2a6>
    2a74:	9a af       	std	Y+58, r25	; 0x3a
    2a76:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(50);
	LCD_vidShiftRight();
    2a78:	0e 94 19 13 	call	0x2632	; 0x2632 <LCD_vidShiftRight>
    2a7c:	80 e0       	ldi	r24, 0x00	; 0
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	a8 e4       	ldi	r26, 0x48	; 72
    2a82:	b2 e4       	ldi	r27, 0x42	; 66
    2a84:	8d ab       	std	Y+53, r24	; 0x35
    2a86:	9e ab       	std	Y+54, r25	; 0x36
    2a88:	af ab       	std	Y+55, r26	; 0x37
    2a8a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a8c:	6d a9       	ldd	r22, Y+53	; 0x35
    2a8e:	7e a9       	ldd	r23, Y+54	; 0x36
    2a90:	8f a9       	ldd	r24, Y+55	; 0x37
    2a92:	98 ad       	ldd	r25, Y+56	; 0x38
    2a94:	20 e0       	ldi	r18, 0x00	; 0
    2a96:	30 e0       	ldi	r19, 0x00	; 0
    2a98:	4a ef       	ldi	r20, 0xFA	; 250
    2a9a:	54 e4       	ldi	r21, 0x44	; 68
    2a9c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2aa0:	dc 01       	movw	r26, r24
    2aa2:	cb 01       	movw	r24, r22
    2aa4:	89 ab       	std	Y+49, r24	; 0x31
    2aa6:	9a ab       	std	Y+50, r25	; 0x32
    2aa8:	ab ab       	std	Y+51, r26	; 0x33
    2aaa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2aac:	69 a9       	ldd	r22, Y+49	; 0x31
    2aae:	7a a9       	ldd	r23, Y+50	; 0x32
    2ab0:	8b a9       	ldd	r24, Y+51	; 0x33
    2ab2:	9c a9       	ldd	r25, Y+52	; 0x34
    2ab4:	20 e0       	ldi	r18, 0x00	; 0
    2ab6:	30 e0       	ldi	r19, 0x00	; 0
    2ab8:	40 e8       	ldi	r20, 0x80	; 128
    2aba:	5f e3       	ldi	r21, 0x3F	; 63
    2abc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2ac0:	88 23       	and	r24, r24
    2ac2:	2c f4       	brge	.+10     	; 0x2ace <LCD_vidGlitchString+0x304>
		__ticks = 1;
    2ac4:	81 e0       	ldi	r24, 0x01	; 1
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	98 ab       	std	Y+48, r25	; 0x30
    2aca:	8f a7       	std	Y+47, r24	; 0x2f
    2acc:	3f c0       	rjmp	.+126    	; 0x2b4c <LCD_vidGlitchString+0x382>
	else if (__tmp > 65535)
    2ace:	69 a9       	ldd	r22, Y+49	; 0x31
    2ad0:	7a a9       	ldd	r23, Y+50	; 0x32
    2ad2:	8b a9       	ldd	r24, Y+51	; 0x33
    2ad4:	9c a9       	ldd	r25, Y+52	; 0x34
    2ad6:	20 e0       	ldi	r18, 0x00	; 0
    2ad8:	3f ef       	ldi	r19, 0xFF	; 255
    2ada:	4f e7       	ldi	r20, 0x7F	; 127
    2adc:	57 e4       	ldi	r21, 0x47	; 71
    2ade:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2ae2:	18 16       	cp	r1, r24
    2ae4:	4c f5       	brge	.+82     	; 0x2b38 <LCD_vidGlitchString+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ae6:	6d a9       	ldd	r22, Y+53	; 0x35
    2ae8:	7e a9       	ldd	r23, Y+54	; 0x36
    2aea:	8f a9       	ldd	r24, Y+55	; 0x37
    2aec:	98 ad       	ldd	r25, Y+56	; 0x38
    2aee:	20 e0       	ldi	r18, 0x00	; 0
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	40 e2       	ldi	r20, 0x20	; 32
    2af4:	51 e4       	ldi	r21, 0x41	; 65
    2af6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2afa:	dc 01       	movw	r26, r24
    2afc:	cb 01       	movw	r24, r22
    2afe:	bc 01       	movw	r22, r24
    2b00:	cd 01       	movw	r24, r26
    2b02:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b06:	dc 01       	movw	r26, r24
    2b08:	cb 01       	movw	r24, r22
    2b0a:	98 ab       	std	Y+48, r25	; 0x30
    2b0c:	8f a7       	std	Y+47, r24	; 0x2f
    2b0e:	0f c0       	rjmp	.+30     	; 0x2b2e <LCD_vidGlitchString+0x364>
    2b10:	88 ec       	ldi	r24, 0xC8	; 200
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	9e a7       	std	Y+46, r25	; 0x2e
    2b16:	8d a7       	std	Y+45, r24	; 0x2d
    2b18:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b1a:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b1c:	01 97       	sbiw	r24, 0x01	; 1
    2b1e:	f1 f7       	brne	.-4      	; 0x2b1c <LCD_vidGlitchString+0x352>
    2b20:	9e a7       	std	Y+46, r25	; 0x2e
    2b22:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b24:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b26:	98 a9       	ldd	r25, Y+48	; 0x30
    2b28:	01 97       	sbiw	r24, 0x01	; 1
    2b2a:	98 ab       	std	Y+48, r25	; 0x30
    2b2c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b2e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b30:	98 a9       	ldd	r25, Y+48	; 0x30
    2b32:	00 97       	sbiw	r24, 0x00	; 0
    2b34:	69 f7       	brne	.-38     	; 0x2b10 <LCD_vidGlitchString+0x346>
    2b36:	14 c0       	rjmp	.+40     	; 0x2b60 <LCD_vidGlitchString+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b38:	69 a9       	ldd	r22, Y+49	; 0x31
    2b3a:	7a a9       	ldd	r23, Y+50	; 0x32
    2b3c:	8b a9       	ldd	r24, Y+51	; 0x33
    2b3e:	9c a9       	ldd	r25, Y+52	; 0x34
    2b40:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b44:	dc 01       	movw	r26, r24
    2b46:	cb 01       	movw	r24, r22
    2b48:	98 ab       	std	Y+48, r25	; 0x30
    2b4a:	8f a7       	std	Y+47, r24	; 0x2f
    2b4c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b4e:	98 a9       	ldd	r25, Y+48	; 0x30
    2b50:	9c a7       	std	Y+44, r25	; 0x2c
    2b52:	8b a7       	std	Y+43, r24	; 0x2b
    2b54:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b56:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b58:	01 97       	sbiw	r24, 0x01	; 1
    2b5a:	f1 f7       	brne	.-4      	; 0x2b58 <LCD_vidGlitchString+0x38e>
    2b5c:	9c a7       	std	Y+44, r25	; 0x2c
    2b5e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50);
	LCD_vidClearDisplay();
    2b60:	0e 94 05 13 	call	0x260a	; 0x260a <LCD_vidClearDisplay>
	LCD_vidGoToXY(4, 1);
    2b64:	84 e0       	ldi	r24, 0x04	; 4
    2b66:	61 e0       	ldi	r22, 0x01	; 1
    2b68:	0e 94 1a 11 	call	0x2234	; 0x2234 <LCD_vidGoToXY>
	LCD_vidSendString(copy_pcString);
    2b6c:	fe 01       	movw	r30, r28
    2b6e:	eb 5a       	subi	r30, 0xAB	; 171
    2b70:	ff 4f       	sbci	r31, 0xFF	; 255
    2b72:	80 81       	ld	r24, Z
    2b74:	91 81       	ldd	r25, Z+1	; 0x01
    2b76:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <LCD_vidSendString>
    2b7a:	80 e0       	ldi	r24, 0x00	; 0
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	a8 e4       	ldi	r26, 0x48	; 72
    2b80:	b2 e4       	ldi	r27, 0x42	; 66
    2b82:	8f a3       	std	Y+39, r24	; 0x27
    2b84:	98 a7       	std	Y+40, r25	; 0x28
    2b86:	a9 a7       	std	Y+41, r26	; 0x29
    2b88:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b8a:	6f a1       	ldd	r22, Y+39	; 0x27
    2b8c:	78 a5       	ldd	r23, Y+40	; 0x28
    2b8e:	89 a5       	ldd	r24, Y+41	; 0x29
    2b90:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b92:	20 e0       	ldi	r18, 0x00	; 0
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	4a ef       	ldi	r20, 0xFA	; 250
    2b98:	54 e4       	ldi	r21, 0x44	; 68
    2b9a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b9e:	dc 01       	movw	r26, r24
    2ba0:	cb 01       	movw	r24, r22
    2ba2:	8b a3       	std	Y+35, r24	; 0x23
    2ba4:	9c a3       	std	Y+36, r25	; 0x24
    2ba6:	ad a3       	std	Y+37, r26	; 0x25
    2ba8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2baa:	6b a1       	ldd	r22, Y+35	; 0x23
    2bac:	7c a1       	ldd	r23, Y+36	; 0x24
    2bae:	8d a1       	ldd	r24, Y+37	; 0x25
    2bb0:	9e a1       	ldd	r25, Y+38	; 0x26
    2bb2:	20 e0       	ldi	r18, 0x00	; 0
    2bb4:	30 e0       	ldi	r19, 0x00	; 0
    2bb6:	40 e8       	ldi	r20, 0x80	; 128
    2bb8:	5f e3       	ldi	r21, 0x3F	; 63
    2bba:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2bbe:	88 23       	and	r24, r24
    2bc0:	2c f4       	brge	.+10     	; 0x2bcc <LCD_vidGlitchString+0x402>
		__ticks = 1;
    2bc2:	81 e0       	ldi	r24, 0x01	; 1
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	9a a3       	std	Y+34, r25	; 0x22
    2bc8:	89 a3       	std	Y+33, r24	; 0x21
    2bca:	3f c0       	rjmp	.+126    	; 0x2c4a <LCD_vidGlitchString+0x480>
	else if (__tmp > 65535)
    2bcc:	6b a1       	ldd	r22, Y+35	; 0x23
    2bce:	7c a1       	ldd	r23, Y+36	; 0x24
    2bd0:	8d a1       	ldd	r24, Y+37	; 0x25
    2bd2:	9e a1       	ldd	r25, Y+38	; 0x26
    2bd4:	20 e0       	ldi	r18, 0x00	; 0
    2bd6:	3f ef       	ldi	r19, 0xFF	; 255
    2bd8:	4f e7       	ldi	r20, 0x7F	; 127
    2bda:	57 e4       	ldi	r21, 0x47	; 71
    2bdc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2be0:	18 16       	cp	r1, r24
    2be2:	4c f5       	brge	.+82     	; 0x2c36 <LCD_vidGlitchString+0x46c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2be4:	6f a1       	ldd	r22, Y+39	; 0x27
    2be6:	78 a5       	ldd	r23, Y+40	; 0x28
    2be8:	89 a5       	ldd	r24, Y+41	; 0x29
    2bea:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bec:	20 e0       	ldi	r18, 0x00	; 0
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	40 e2       	ldi	r20, 0x20	; 32
    2bf2:	51 e4       	ldi	r21, 0x41	; 65
    2bf4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bf8:	dc 01       	movw	r26, r24
    2bfa:	cb 01       	movw	r24, r22
    2bfc:	bc 01       	movw	r22, r24
    2bfe:	cd 01       	movw	r24, r26
    2c00:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c04:	dc 01       	movw	r26, r24
    2c06:	cb 01       	movw	r24, r22
    2c08:	9a a3       	std	Y+34, r25	; 0x22
    2c0a:	89 a3       	std	Y+33, r24	; 0x21
    2c0c:	0f c0       	rjmp	.+30     	; 0x2c2c <LCD_vidGlitchString+0x462>
    2c0e:	88 ec       	ldi	r24, 0xC8	; 200
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	98 a3       	std	Y+32, r25	; 0x20
    2c14:	8f 8f       	std	Y+31, r24	; 0x1f
    2c16:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c18:	98 a1       	ldd	r25, Y+32	; 0x20
    2c1a:	01 97       	sbiw	r24, 0x01	; 1
    2c1c:	f1 f7       	brne	.-4      	; 0x2c1a <LCD_vidGlitchString+0x450>
    2c1e:	98 a3       	std	Y+32, r25	; 0x20
    2c20:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c22:	89 a1       	ldd	r24, Y+33	; 0x21
    2c24:	9a a1       	ldd	r25, Y+34	; 0x22
    2c26:	01 97       	sbiw	r24, 0x01	; 1
    2c28:	9a a3       	std	Y+34, r25	; 0x22
    2c2a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c2c:	89 a1       	ldd	r24, Y+33	; 0x21
    2c2e:	9a a1       	ldd	r25, Y+34	; 0x22
    2c30:	00 97       	sbiw	r24, 0x00	; 0
    2c32:	69 f7       	brne	.-38     	; 0x2c0e <LCD_vidGlitchString+0x444>
    2c34:	14 c0       	rjmp	.+40     	; 0x2c5e <LCD_vidGlitchString+0x494>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c36:	6b a1       	ldd	r22, Y+35	; 0x23
    2c38:	7c a1       	ldd	r23, Y+36	; 0x24
    2c3a:	8d a1       	ldd	r24, Y+37	; 0x25
    2c3c:	9e a1       	ldd	r25, Y+38	; 0x26
    2c3e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c42:	dc 01       	movw	r26, r24
    2c44:	cb 01       	movw	r24, r22
    2c46:	9a a3       	std	Y+34, r25	; 0x22
    2c48:	89 a3       	std	Y+33, r24	; 0x21
    2c4a:	89 a1       	ldd	r24, Y+33	; 0x21
    2c4c:	9a a1       	ldd	r25, Y+34	; 0x22
    2c4e:	9e 8f       	std	Y+30, r25	; 0x1e
    2c50:	8d 8f       	std	Y+29, r24	; 0x1d
    2c52:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c54:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c56:	01 97       	sbiw	r24, 0x01	; 1
    2c58:	f1 f7       	brne	.-4      	; 0x2c56 <LCD_vidGlitchString+0x48c>
    2c5a:	9e 8f       	std	Y+30, r25	; 0x1e
    2c5c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(50);
	LCD_vidShiftRight();
    2c5e:	0e 94 19 13 	call	0x2632	; 0x2632 <LCD_vidShiftRight>
    2c62:	80 e0       	ldi	r24, 0x00	; 0
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	a8 e4       	ldi	r26, 0x48	; 72
    2c68:	b2 e4       	ldi	r27, 0x42	; 66
    2c6a:	89 8f       	std	Y+25, r24	; 0x19
    2c6c:	9a 8f       	std	Y+26, r25	; 0x1a
    2c6e:	ab 8f       	std	Y+27, r26	; 0x1b
    2c70:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c72:	69 8d       	ldd	r22, Y+25	; 0x19
    2c74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c7a:	20 e0       	ldi	r18, 0x00	; 0
    2c7c:	30 e0       	ldi	r19, 0x00	; 0
    2c7e:	4a ef       	ldi	r20, 0xFA	; 250
    2c80:	54 e4       	ldi	r21, 0x44	; 68
    2c82:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c86:	dc 01       	movw	r26, r24
    2c88:	cb 01       	movw	r24, r22
    2c8a:	8d 8b       	std	Y+21, r24	; 0x15
    2c8c:	9e 8b       	std	Y+22, r25	; 0x16
    2c8e:	af 8b       	std	Y+23, r26	; 0x17
    2c90:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c92:	6d 89       	ldd	r22, Y+21	; 0x15
    2c94:	7e 89       	ldd	r23, Y+22	; 0x16
    2c96:	8f 89       	ldd	r24, Y+23	; 0x17
    2c98:	98 8d       	ldd	r25, Y+24	; 0x18
    2c9a:	20 e0       	ldi	r18, 0x00	; 0
    2c9c:	30 e0       	ldi	r19, 0x00	; 0
    2c9e:	40 e8       	ldi	r20, 0x80	; 128
    2ca0:	5f e3       	ldi	r21, 0x3F	; 63
    2ca2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2ca6:	88 23       	and	r24, r24
    2ca8:	2c f4       	brge	.+10     	; 0x2cb4 <LCD_vidGlitchString+0x4ea>
		__ticks = 1;
    2caa:	81 e0       	ldi	r24, 0x01	; 1
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	9c 8b       	std	Y+20, r25	; 0x14
    2cb0:	8b 8b       	std	Y+19, r24	; 0x13
    2cb2:	3f c0       	rjmp	.+126    	; 0x2d32 <LCD_vidGlitchString+0x568>
	else if (__tmp > 65535)
    2cb4:	6d 89       	ldd	r22, Y+21	; 0x15
    2cb6:	7e 89       	ldd	r23, Y+22	; 0x16
    2cb8:	8f 89       	ldd	r24, Y+23	; 0x17
    2cba:	98 8d       	ldd	r25, Y+24	; 0x18
    2cbc:	20 e0       	ldi	r18, 0x00	; 0
    2cbe:	3f ef       	ldi	r19, 0xFF	; 255
    2cc0:	4f e7       	ldi	r20, 0x7F	; 127
    2cc2:	57 e4       	ldi	r21, 0x47	; 71
    2cc4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2cc8:	18 16       	cp	r1, r24
    2cca:	4c f5       	brge	.+82     	; 0x2d1e <LCD_vidGlitchString+0x554>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ccc:	69 8d       	ldd	r22, Y+25	; 0x19
    2cce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cd0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cd2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cd4:	20 e0       	ldi	r18, 0x00	; 0
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	40 e2       	ldi	r20, 0x20	; 32
    2cda:	51 e4       	ldi	r21, 0x41	; 65
    2cdc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ce0:	dc 01       	movw	r26, r24
    2ce2:	cb 01       	movw	r24, r22
    2ce4:	bc 01       	movw	r22, r24
    2ce6:	cd 01       	movw	r24, r26
    2ce8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cec:	dc 01       	movw	r26, r24
    2cee:	cb 01       	movw	r24, r22
    2cf0:	9c 8b       	std	Y+20, r25	; 0x14
    2cf2:	8b 8b       	std	Y+19, r24	; 0x13
    2cf4:	0f c0       	rjmp	.+30     	; 0x2d14 <LCD_vidGlitchString+0x54a>
    2cf6:	88 ec       	ldi	r24, 0xC8	; 200
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	9a 8b       	std	Y+18, r25	; 0x12
    2cfc:	89 8b       	std	Y+17, r24	; 0x11
    2cfe:	89 89       	ldd	r24, Y+17	; 0x11
    2d00:	9a 89       	ldd	r25, Y+18	; 0x12
    2d02:	01 97       	sbiw	r24, 0x01	; 1
    2d04:	f1 f7       	brne	.-4      	; 0x2d02 <LCD_vidGlitchString+0x538>
    2d06:	9a 8b       	std	Y+18, r25	; 0x12
    2d08:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d0a:	8b 89       	ldd	r24, Y+19	; 0x13
    2d0c:	9c 89       	ldd	r25, Y+20	; 0x14
    2d0e:	01 97       	sbiw	r24, 0x01	; 1
    2d10:	9c 8b       	std	Y+20, r25	; 0x14
    2d12:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d14:	8b 89       	ldd	r24, Y+19	; 0x13
    2d16:	9c 89       	ldd	r25, Y+20	; 0x14
    2d18:	00 97       	sbiw	r24, 0x00	; 0
    2d1a:	69 f7       	brne	.-38     	; 0x2cf6 <LCD_vidGlitchString+0x52c>
    2d1c:	14 c0       	rjmp	.+40     	; 0x2d46 <LCD_vidGlitchString+0x57c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d1e:	6d 89       	ldd	r22, Y+21	; 0x15
    2d20:	7e 89       	ldd	r23, Y+22	; 0x16
    2d22:	8f 89       	ldd	r24, Y+23	; 0x17
    2d24:	98 8d       	ldd	r25, Y+24	; 0x18
    2d26:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d2a:	dc 01       	movw	r26, r24
    2d2c:	cb 01       	movw	r24, r22
    2d2e:	9c 8b       	std	Y+20, r25	; 0x14
    2d30:	8b 8b       	std	Y+19, r24	; 0x13
    2d32:	8b 89       	ldd	r24, Y+19	; 0x13
    2d34:	9c 89       	ldd	r25, Y+20	; 0x14
    2d36:	98 8b       	std	Y+16, r25	; 0x10
    2d38:	8f 87       	std	Y+15, r24	; 0x0f
    2d3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d3c:	98 89       	ldd	r25, Y+16	; 0x10
    2d3e:	01 97       	sbiw	r24, 0x01	; 1
    2d40:	f1 f7       	brne	.-4      	; 0x2d3e <LCD_vidGlitchString+0x574>
    2d42:	98 8b       	std	Y+16, r25	; 0x10
    2d44:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(50);
	LCD_vidClearDisplay();
    2d46:	0e 94 05 13 	call	0x260a	; 0x260a <LCD_vidClearDisplay>
	LCD_vidGoToXY(3, 0);
    2d4a:	83 e0       	ldi	r24, 0x03	; 3
    2d4c:	60 e0       	ldi	r22, 0x00	; 0
    2d4e:	0e 94 1a 11 	call	0x2234	; 0x2234 <LCD_vidGoToXY>
	LCD_vidSendString(copy_pcString);
    2d52:	fe 01       	movw	r30, r28
    2d54:	eb 5a       	subi	r30, 0xAB	; 171
    2d56:	ff 4f       	sbci	r31, 0xFF	; 255
    2d58:	80 81       	ld	r24, Z
    2d5a:	91 81       	ldd	r25, Z+1	; 0x01
    2d5c:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <LCD_vidSendString>
    2d60:	80 e0       	ldi	r24, 0x00	; 0
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	a8 e4       	ldi	r26, 0x48	; 72
    2d66:	b2 e4       	ldi	r27, 0x42	; 66
    2d68:	8b 87       	std	Y+11, r24	; 0x0b
    2d6a:	9c 87       	std	Y+12, r25	; 0x0c
    2d6c:	ad 87       	std	Y+13, r26	; 0x0d
    2d6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d70:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d72:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d74:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d76:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d78:	20 e0       	ldi	r18, 0x00	; 0
    2d7a:	30 e0       	ldi	r19, 0x00	; 0
    2d7c:	4a ef       	ldi	r20, 0xFA	; 250
    2d7e:	54 e4       	ldi	r21, 0x44	; 68
    2d80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d84:	dc 01       	movw	r26, r24
    2d86:	cb 01       	movw	r24, r22
    2d88:	8f 83       	std	Y+7, r24	; 0x07
    2d8a:	98 87       	std	Y+8, r25	; 0x08
    2d8c:	a9 87       	std	Y+9, r26	; 0x09
    2d8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d90:	6f 81       	ldd	r22, Y+7	; 0x07
    2d92:	78 85       	ldd	r23, Y+8	; 0x08
    2d94:	89 85       	ldd	r24, Y+9	; 0x09
    2d96:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d98:	20 e0       	ldi	r18, 0x00	; 0
    2d9a:	30 e0       	ldi	r19, 0x00	; 0
    2d9c:	40 e8       	ldi	r20, 0x80	; 128
    2d9e:	5f e3       	ldi	r21, 0x3F	; 63
    2da0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2da4:	88 23       	and	r24, r24
    2da6:	2c f4       	brge	.+10     	; 0x2db2 <LCD_vidGlitchString+0x5e8>
		__ticks = 1;
    2da8:	81 e0       	ldi	r24, 0x01	; 1
    2daa:	90 e0       	ldi	r25, 0x00	; 0
    2dac:	9e 83       	std	Y+6, r25	; 0x06
    2dae:	8d 83       	std	Y+5, r24	; 0x05
    2db0:	3f c0       	rjmp	.+126    	; 0x2e30 <LCD_vidGlitchString+0x666>
	else if (__tmp > 65535)
    2db2:	6f 81       	ldd	r22, Y+7	; 0x07
    2db4:	78 85       	ldd	r23, Y+8	; 0x08
    2db6:	89 85       	ldd	r24, Y+9	; 0x09
    2db8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dba:	20 e0       	ldi	r18, 0x00	; 0
    2dbc:	3f ef       	ldi	r19, 0xFF	; 255
    2dbe:	4f e7       	ldi	r20, 0x7F	; 127
    2dc0:	57 e4       	ldi	r21, 0x47	; 71
    2dc2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2dc6:	18 16       	cp	r1, r24
    2dc8:	4c f5       	brge	.+82     	; 0x2e1c <LCD_vidGlitchString+0x652>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dca:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dce:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dd2:	20 e0       	ldi	r18, 0x00	; 0
    2dd4:	30 e0       	ldi	r19, 0x00	; 0
    2dd6:	40 e2       	ldi	r20, 0x20	; 32
    2dd8:	51 e4       	ldi	r21, 0x41	; 65
    2dda:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2dde:	dc 01       	movw	r26, r24
    2de0:	cb 01       	movw	r24, r22
    2de2:	bc 01       	movw	r22, r24
    2de4:	cd 01       	movw	r24, r26
    2de6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2dea:	dc 01       	movw	r26, r24
    2dec:	cb 01       	movw	r24, r22
    2dee:	9e 83       	std	Y+6, r25	; 0x06
    2df0:	8d 83       	std	Y+5, r24	; 0x05
    2df2:	0f c0       	rjmp	.+30     	; 0x2e12 <LCD_vidGlitchString+0x648>
    2df4:	88 ec       	ldi	r24, 0xC8	; 200
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	9c 83       	std	Y+4, r25	; 0x04
    2dfa:	8b 83       	std	Y+3, r24	; 0x03
    2dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dfe:	9c 81       	ldd	r25, Y+4	; 0x04
    2e00:	01 97       	sbiw	r24, 0x01	; 1
    2e02:	f1 f7       	brne	.-4      	; 0x2e00 <LCD_vidGlitchString+0x636>
    2e04:	9c 83       	std	Y+4, r25	; 0x04
    2e06:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e08:	8d 81       	ldd	r24, Y+5	; 0x05
    2e0a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e0c:	01 97       	sbiw	r24, 0x01	; 1
    2e0e:	9e 83       	std	Y+6, r25	; 0x06
    2e10:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e12:	8d 81       	ldd	r24, Y+5	; 0x05
    2e14:	9e 81       	ldd	r25, Y+6	; 0x06
    2e16:	00 97       	sbiw	r24, 0x00	; 0
    2e18:	69 f7       	brne	.-38     	; 0x2df4 <LCD_vidGlitchString+0x62a>
    2e1a:	14 c0       	rjmp	.+40     	; 0x2e44 <LCD_vidGlitchString+0x67a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e1c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e1e:	78 85       	ldd	r23, Y+8	; 0x08
    2e20:	89 85       	ldd	r24, Y+9	; 0x09
    2e22:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e24:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e28:	dc 01       	movw	r26, r24
    2e2a:	cb 01       	movw	r24, r22
    2e2c:	9e 83       	std	Y+6, r25	; 0x06
    2e2e:	8d 83       	std	Y+5, r24	; 0x05
    2e30:	8d 81       	ldd	r24, Y+5	; 0x05
    2e32:	9e 81       	ldd	r25, Y+6	; 0x06
    2e34:	9a 83       	std	Y+2, r25	; 0x02
    2e36:	89 83       	std	Y+1, r24	; 0x01
    2e38:	89 81       	ldd	r24, Y+1	; 0x01
    2e3a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e3c:	01 97       	sbiw	r24, 0x01	; 1
    2e3e:	f1 f7       	brne	.-4      	; 0x2e3c <LCD_vidGlitchString+0x672>
    2e40:	9a 83       	std	Y+2, r25	; 0x02
    2e42:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
	LCD_vidShiftRight();
    2e44:	0e 94 19 13 	call	0x2632	; 0x2632 <LCD_vidShiftRight>

}
    2e48:	ca 5a       	subi	r28, 0xAA	; 170
    2e4a:	df 4f       	sbci	r29, 0xFF	; 255
    2e4c:	0f b6       	in	r0, 0x3f	; 63
    2e4e:	f8 94       	cli
    2e50:	de bf       	out	0x3e, r29	; 62
    2e52:	0f be       	out	0x3f, r0	; 63
    2e54:	cd bf       	out	0x3d, r28	; 61
    2e56:	cf 91       	pop	r28
    2e58:	df 91       	pop	r29
    2e5a:	1f 91       	pop	r17
    2e5c:	0f 91       	pop	r16
    2e5e:	08 95       	ret

00002e60 <KeyPad_vidInit>:
 	 	 	 	 	 	 	 	 	 	 	 	 	 	 {1,	 2, 	3, 	'*'},
 	 	 	 	 	 	 	 	 	 	 	 	 	 	 {'c',	 0,	'=', '/'}};


void KeyPad_vidInit(void)
{
    2e60:	df 93       	push	r29
    2e62:	cf 93       	push	r28
    2e64:	cd b7       	in	r28, 0x3d	; 61
    2e66:	de b7       	in	r29, 0x3e	; 62
	DIO_u8setPinDir(KEYPAD_PORT, KEYPAD_ROW_1, INPUT);
    2e68:	83 e0       	ldi	r24, 0x03	; 3
    2e6a:	60 e0       	ldi	r22, 0x00	; 0
    2e6c:	40 e0       	ldi	r20, 0x00	; 0
    2e6e:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <DIO_u8setPinDir>
	DIO_u8setPinDir(KEYPAD_PORT, KEYPAD_ROW_2, INPUT);
    2e72:	83 e0       	ldi	r24, 0x03	; 3
    2e74:	61 e0       	ldi	r22, 0x01	; 1
    2e76:	40 e0       	ldi	r20, 0x00	; 0
    2e78:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <DIO_u8setPinDir>
	DIO_u8setPinDir(KEYPAD_PORT, KEYPAD_ROW_3, INPUT);
    2e7c:	83 e0       	ldi	r24, 0x03	; 3
    2e7e:	62 e0       	ldi	r22, 0x02	; 2
    2e80:	40 e0       	ldi	r20, 0x00	; 0
    2e82:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <DIO_u8setPinDir>
	DIO_u8setPinDir(KEYPAD_PORT, KEYPAD_ROW_4, INPUT);
    2e86:	83 e0       	ldi	r24, 0x03	; 3
    2e88:	63 e0       	ldi	r22, 0x03	; 3
    2e8a:	40 e0       	ldi	r20, 0x00	; 0
    2e8c:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <DIO_u8setPinDir>

	DIO_u8setPinDir(KEYPAD_PORT, KEYPAD_COLUMN_1, OUTPUT);
    2e90:	83 e0       	ldi	r24, 0x03	; 3
    2e92:	64 e0       	ldi	r22, 0x04	; 4
    2e94:	41 e0       	ldi	r20, 0x01	; 1
    2e96:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <DIO_u8setPinDir>
	DIO_u8setPinDir(KEYPAD_PORT, KEYPAD_COLUMN_2, OUTPUT);
    2e9a:	83 e0       	ldi	r24, 0x03	; 3
    2e9c:	65 e0       	ldi	r22, 0x05	; 5
    2e9e:	41 e0       	ldi	r20, 0x01	; 1
    2ea0:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <DIO_u8setPinDir>
	DIO_u8setPinDir(KEYPAD_PORT, KEYPAD_COLUMN_3, OUTPUT);
    2ea4:	83 e0       	ldi	r24, 0x03	; 3
    2ea6:	66 e0       	ldi	r22, 0x06	; 6
    2ea8:	41 e0       	ldi	r20, 0x01	; 1
    2eaa:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <DIO_u8setPinDir>
	DIO_u8setPinDir(KEYPAD_PORT, KEYPAD_COLUMN_4, OUTPUT);
    2eae:	83 e0       	ldi	r24, 0x03	; 3
    2eb0:	67 e0       	ldi	r22, 0x07	; 7
    2eb2:	41 e0       	ldi	r20, 0x01	; 1
    2eb4:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <DIO_u8setPinDir>

	//Enable PULLUP resistors
	DIO_u8setPinVal(KEYPAD_PORT, KEYPAD_ROW_1, HIGH);
    2eb8:	83 e0       	ldi	r24, 0x03	; 3
    2eba:	60 e0       	ldi	r22, 0x00	; 0
    2ebc:	41 e0       	ldi	r20, 0x01	; 1
    2ebe:	0e 94 03 09 	call	0x1206	; 0x1206 <DIO_u8setPinVal>
	DIO_u8setPinVal(KEYPAD_PORT, KEYPAD_ROW_2, HIGH);
    2ec2:	83 e0       	ldi	r24, 0x03	; 3
    2ec4:	61 e0       	ldi	r22, 0x01	; 1
    2ec6:	41 e0       	ldi	r20, 0x01	; 1
    2ec8:	0e 94 03 09 	call	0x1206	; 0x1206 <DIO_u8setPinVal>
	DIO_u8setPinVal(KEYPAD_PORT, KEYPAD_ROW_3, HIGH);
    2ecc:	83 e0       	ldi	r24, 0x03	; 3
    2ece:	62 e0       	ldi	r22, 0x02	; 2
    2ed0:	41 e0       	ldi	r20, 0x01	; 1
    2ed2:	0e 94 03 09 	call	0x1206	; 0x1206 <DIO_u8setPinVal>
	DIO_u8setPinVal(KEYPAD_PORT, KEYPAD_ROW_4, HIGH);
    2ed6:	83 e0       	ldi	r24, 0x03	; 3
    2ed8:	63 e0       	ldi	r22, 0x03	; 3
    2eda:	41 e0       	ldi	r20, 0x01	; 1
    2edc:	0e 94 03 09 	call	0x1206	; 0x1206 <DIO_u8setPinVal>

	DIO_u8setPinVal(KEYPAD_PORT, KEYPAD_COLUMN_1, HIGH);
    2ee0:	83 e0       	ldi	r24, 0x03	; 3
    2ee2:	64 e0       	ldi	r22, 0x04	; 4
    2ee4:	41 e0       	ldi	r20, 0x01	; 1
    2ee6:	0e 94 03 09 	call	0x1206	; 0x1206 <DIO_u8setPinVal>
	DIO_u8setPinVal(KEYPAD_PORT, KEYPAD_COLUMN_2, HIGH);
    2eea:	83 e0       	ldi	r24, 0x03	; 3
    2eec:	65 e0       	ldi	r22, 0x05	; 5
    2eee:	41 e0       	ldi	r20, 0x01	; 1
    2ef0:	0e 94 03 09 	call	0x1206	; 0x1206 <DIO_u8setPinVal>
	DIO_u8setPinVal(KEYPAD_PORT, KEYPAD_COLUMN_3, HIGH);
    2ef4:	83 e0       	ldi	r24, 0x03	; 3
    2ef6:	66 e0       	ldi	r22, 0x06	; 6
    2ef8:	41 e0       	ldi	r20, 0x01	; 1
    2efa:	0e 94 03 09 	call	0x1206	; 0x1206 <DIO_u8setPinVal>
	DIO_u8setPinVal(KEYPAD_PORT, KEYPAD_COLUMN_4, HIGH);
    2efe:	83 e0       	ldi	r24, 0x03	; 3
    2f00:	67 e0       	ldi	r22, 0x07	; 7
    2f02:	41 e0       	ldi	r20, 0x01	; 1
    2f04:	0e 94 03 09 	call	0x1206	; 0x1206 <DIO_u8setPinVal>
}
    2f08:	cf 91       	pop	r28
    2f0a:	df 91       	pop	r29
    2f0c:	08 95       	ret

00002f0e <KeyPad_u8Pressed>:

u8 KeyPad_u8Pressed(void)
{
    2f0e:	df 93       	push	r29
    2f10:	cf 93       	push	r28
    2f12:	cd b7       	in	r28, 0x3d	; 61
    2f14:	de b7       	in	r29, 0x3e	; 62
    2f16:	a0 97       	sbiw	r28, 0x20	; 32
    2f18:	0f b6       	in	r0, 0x3f	; 63
    2f1a:	f8 94       	cli
    2f1c:	de bf       	out	0x3e, r29	; 62
    2f1e:	0f be       	out	0x3f, r0	; 63
    2f20:	cd bf       	out	0x3d, r28	; 61
	u8 local_u8keyPressed = NO_KEY_PRESSED;
    2f22:	8f ef       	ldi	r24, 0xFF	; 255
    2f24:	8f 8f       	std	Y+31, r24	; 0x1f
	u8 local_u8currentColumn;
	u8 local_u8currentRow;
	u8 local_u8currentRowStatus;

	for(local_u8currentColumn = KEYPAD_COLUMN_START; local_u8currentColumn <= KEYPAD_COLUMN_END; local_u8currentColumn++)
    2f26:	84 e0       	ldi	r24, 0x04	; 4
    2f28:	8e 8f       	std	Y+30, r24	; 0x1e
    2f2a:	27 c1       	rjmp	.+590    	; 0x317a <KeyPad_u8Pressed+0x26c>
	{
		DIO_u8setPinVal(KEYPAD_PORT, local_u8currentColumn, LOW);
    2f2c:	83 e0       	ldi	r24, 0x03	; 3
    2f2e:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2f30:	40 e0       	ldi	r20, 0x00	; 0
    2f32:	0e 94 03 09 	call	0x1206	; 0x1206 <DIO_u8setPinVal>

		for(local_u8currentRow = KEYPAD_ROW_START; local_u8currentRow <= KEYPAD_ROW_END; local_u8currentRow++)
    2f36:	1d 8e       	std	Y+29, r1	; 0x1d
    2f38:	14 c1       	rjmp	.+552    	; 0x3162 <KeyPad_u8Pressed+0x254>
		{
			DIO_u8getPinVal(KEYPAD_PORT, local_u8currentRow, &local_u8currentRowStatus);
    2f3a:	9e 01       	movw	r18, r28
    2f3c:	20 5e       	subi	r18, 0xE0	; 224
    2f3e:	3f 4f       	sbci	r19, 0xFF	; 255
    2f40:	83 e0       	ldi	r24, 0x03	; 3
    2f42:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2f44:	a9 01       	movw	r20, r18
    2f46:	0e 94 15 0a 	call	0x142a	; 0x142a <DIO_u8getPinVal>

			if(local_u8currentRowStatus == LOW)
    2f4a:	88 a1       	ldd	r24, Y+32	; 0x20
    2f4c:	88 23       	and	r24, r24
    2f4e:	09 f0       	breq	.+2      	; 0x2f52 <KeyPad_u8Pressed+0x44>
    2f50:	05 c1       	rjmp	.+522    	; 0x315c <KeyPad_u8Pressed+0x24e>
			{
				//local_u8keyPressed = (((local_u8currentRow - KEYPAD_ROW_START) * KEYPAD_COLUMNS) + (local_u8currentColumn - KEYPAD_COLUMN_START));

				local_u8keyPressed = KEYPAD_u8KeyPadMap[local_u8currentRow-KEYPAD_ROW_START][local_u8currentColumn-KEYPAD_COLUMN_START];
    2f52:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f54:	48 2f       	mov	r20, r24
    2f56:	50 e0       	ldi	r21, 0x00	; 0
    2f58:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f5a:	88 2f       	mov	r24, r24
    2f5c:	90 e0       	ldi	r25, 0x00	; 0
    2f5e:	9c 01       	movw	r18, r24
    2f60:	24 50       	subi	r18, 0x04	; 4
    2f62:	30 40       	sbci	r19, 0x00	; 0
    2f64:	ca 01       	movw	r24, r20
    2f66:	88 0f       	add	r24, r24
    2f68:	99 1f       	adc	r25, r25
    2f6a:	88 0f       	add	r24, r24
    2f6c:	99 1f       	adc	r25, r25
    2f6e:	82 0f       	add	r24, r18
    2f70:	93 1f       	adc	r25, r19
    2f72:	fc 01       	movw	r30, r24
    2f74:	e0 59       	subi	r30, 0x90	; 144
    2f76:	fe 4f       	sbci	r31, 0xFE	; 254
    2f78:	80 81       	ld	r24, Z
    2f7a:	8f 8f       	std	Y+31, r24	; 0x1f
    2f7c:	80 e0       	ldi	r24, 0x00	; 0
    2f7e:	90 e0       	ldi	r25, 0x00	; 0
    2f80:	a0 ea       	ldi	r26, 0xA0	; 160
    2f82:	b0 e4       	ldi	r27, 0x40	; 64
    2f84:	89 8f       	std	Y+25, r24	; 0x19
    2f86:	9a 8f       	std	Y+26, r25	; 0x1a
    2f88:	ab 8f       	std	Y+27, r26	; 0x1b
    2f8a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f8c:	69 8d       	ldd	r22, Y+25	; 0x19
    2f8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f94:	20 e0       	ldi	r18, 0x00	; 0
    2f96:	30 e0       	ldi	r19, 0x00	; 0
    2f98:	4a ef       	ldi	r20, 0xFA	; 250
    2f9a:	54 e4       	ldi	r21, 0x44	; 68
    2f9c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2fa0:	dc 01       	movw	r26, r24
    2fa2:	cb 01       	movw	r24, r22
    2fa4:	8d 8b       	std	Y+21, r24	; 0x15
    2fa6:	9e 8b       	std	Y+22, r25	; 0x16
    2fa8:	af 8b       	std	Y+23, r26	; 0x17
    2faa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2fac:	6d 89       	ldd	r22, Y+21	; 0x15
    2fae:	7e 89       	ldd	r23, Y+22	; 0x16
    2fb0:	8f 89       	ldd	r24, Y+23	; 0x17
    2fb2:	98 8d       	ldd	r25, Y+24	; 0x18
    2fb4:	20 e0       	ldi	r18, 0x00	; 0
    2fb6:	30 e0       	ldi	r19, 0x00	; 0
    2fb8:	40 e8       	ldi	r20, 0x80	; 128
    2fba:	5f e3       	ldi	r21, 0x3F	; 63
    2fbc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2fc0:	88 23       	and	r24, r24
    2fc2:	2c f4       	brge	.+10     	; 0x2fce <KeyPad_u8Pressed+0xc0>
		__ticks = 1;
    2fc4:	81 e0       	ldi	r24, 0x01	; 1
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	9c 8b       	std	Y+20, r25	; 0x14
    2fca:	8b 8b       	std	Y+19, r24	; 0x13
    2fcc:	3f c0       	rjmp	.+126    	; 0x304c <KeyPad_u8Pressed+0x13e>
	else if (__tmp > 65535)
    2fce:	6d 89       	ldd	r22, Y+21	; 0x15
    2fd0:	7e 89       	ldd	r23, Y+22	; 0x16
    2fd2:	8f 89       	ldd	r24, Y+23	; 0x17
    2fd4:	98 8d       	ldd	r25, Y+24	; 0x18
    2fd6:	20 e0       	ldi	r18, 0x00	; 0
    2fd8:	3f ef       	ldi	r19, 0xFF	; 255
    2fda:	4f e7       	ldi	r20, 0x7F	; 127
    2fdc:	57 e4       	ldi	r21, 0x47	; 71
    2fde:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2fe2:	18 16       	cp	r1, r24
    2fe4:	4c f5       	brge	.+82     	; 0x3038 <KeyPad_u8Pressed+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fe6:	69 8d       	ldd	r22, Y+25	; 0x19
    2fe8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fee:	20 e0       	ldi	r18, 0x00	; 0
    2ff0:	30 e0       	ldi	r19, 0x00	; 0
    2ff2:	40 e2       	ldi	r20, 0x20	; 32
    2ff4:	51 e4       	ldi	r21, 0x41	; 65
    2ff6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ffa:	dc 01       	movw	r26, r24
    2ffc:	cb 01       	movw	r24, r22
    2ffe:	bc 01       	movw	r22, r24
    3000:	cd 01       	movw	r24, r26
    3002:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3006:	dc 01       	movw	r26, r24
    3008:	cb 01       	movw	r24, r22
    300a:	9c 8b       	std	Y+20, r25	; 0x14
    300c:	8b 8b       	std	Y+19, r24	; 0x13
    300e:	0f c0       	rjmp	.+30     	; 0x302e <KeyPad_u8Pressed+0x120>
    3010:	88 ec       	ldi	r24, 0xC8	; 200
    3012:	90 e0       	ldi	r25, 0x00	; 0
    3014:	9a 8b       	std	Y+18, r25	; 0x12
    3016:	89 8b       	std	Y+17, r24	; 0x11
    3018:	89 89       	ldd	r24, Y+17	; 0x11
    301a:	9a 89       	ldd	r25, Y+18	; 0x12
    301c:	01 97       	sbiw	r24, 0x01	; 1
    301e:	f1 f7       	brne	.-4      	; 0x301c <KeyPad_u8Pressed+0x10e>
    3020:	9a 8b       	std	Y+18, r25	; 0x12
    3022:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3024:	8b 89       	ldd	r24, Y+19	; 0x13
    3026:	9c 89       	ldd	r25, Y+20	; 0x14
    3028:	01 97       	sbiw	r24, 0x01	; 1
    302a:	9c 8b       	std	Y+20, r25	; 0x14
    302c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    302e:	8b 89       	ldd	r24, Y+19	; 0x13
    3030:	9c 89       	ldd	r25, Y+20	; 0x14
    3032:	00 97       	sbiw	r24, 0x00	; 0
    3034:	69 f7       	brne	.-38     	; 0x3010 <KeyPad_u8Pressed+0x102>
    3036:	1d c0       	rjmp	.+58     	; 0x3072 <KeyPad_u8Pressed+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3038:	6d 89       	ldd	r22, Y+21	; 0x15
    303a:	7e 89       	ldd	r23, Y+22	; 0x16
    303c:	8f 89       	ldd	r24, Y+23	; 0x17
    303e:	98 8d       	ldd	r25, Y+24	; 0x18
    3040:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3044:	dc 01       	movw	r26, r24
    3046:	cb 01       	movw	r24, r22
    3048:	9c 8b       	std	Y+20, r25	; 0x14
    304a:	8b 8b       	std	Y+19, r24	; 0x13
    304c:	8b 89       	ldd	r24, Y+19	; 0x13
    304e:	9c 89       	ldd	r25, Y+20	; 0x14
    3050:	98 8b       	std	Y+16, r25	; 0x10
    3052:	8f 87       	std	Y+15, r24	; 0x0f
    3054:	8f 85       	ldd	r24, Y+15	; 0x0f
    3056:	98 89       	ldd	r25, Y+16	; 0x10
    3058:	01 97       	sbiw	r24, 0x01	; 1
    305a:	f1 f7       	brne	.-4      	; 0x3058 <KeyPad_u8Pressed+0x14a>
    305c:	98 8b       	std	Y+16, r25	; 0x10
    305e:	8f 87       	std	Y+15, r24	; 0x0f
    3060:	08 c0       	rjmp	.+16     	; 0x3072 <KeyPad_u8Pressed+0x164>

				_delay_ms(5);
				while(local_u8currentRowStatus == LOW)
				{
					DIO_u8getPinVal(KEYPAD_PORT, local_u8currentRow, &local_u8currentRowStatus);
    3062:	9e 01       	movw	r18, r28
    3064:	20 5e       	subi	r18, 0xE0	; 224
    3066:	3f 4f       	sbci	r19, 0xFF	; 255
    3068:	83 e0       	ldi	r24, 0x03	; 3
    306a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    306c:	a9 01       	movw	r20, r18
    306e:	0e 94 15 0a 	call	0x142a	; 0x142a <DIO_u8getPinVal>
				//local_u8keyPressed = (((local_u8currentRow - KEYPAD_ROW_START) * KEYPAD_COLUMNS) + (local_u8currentColumn - KEYPAD_COLUMN_START));

				local_u8keyPressed = KEYPAD_u8KeyPadMap[local_u8currentRow-KEYPAD_ROW_START][local_u8currentColumn-KEYPAD_COLUMN_START];

				_delay_ms(5);
				while(local_u8currentRowStatus == LOW)
    3072:	88 a1       	ldd	r24, Y+32	; 0x20
    3074:	88 23       	and	r24, r24
    3076:	a9 f3       	breq	.-22     	; 0x3062 <KeyPad_u8Pressed+0x154>
    3078:	80 e0       	ldi	r24, 0x00	; 0
    307a:	90 e0       	ldi	r25, 0x00	; 0
    307c:	a0 ea       	ldi	r26, 0xA0	; 160
    307e:	b0 e4       	ldi	r27, 0x40	; 64
    3080:	8b 87       	std	Y+11, r24	; 0x0b
    3082:	9c 87       	std	Y+12, r25	; 0x0c
    3084:	ad 87       	std	Y+13, r26	; 0x0d
    3086:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3088:	6b 85       	ldd	r22, Y+11	; 0x0b
    308a:	7c 85       	ldd	r23, Y+12	; 0x0c
    308c:	8d 85       	ldd	r24, Y+13	; 0x0d
    308e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3090:	20 e0       	ldi	r18, 0x00	; 0
    3092:	30 e0       	ldi	r19, 0x00	; 0
    3094:	4a ef       	ldi	r20, 0xFA	; 250
    3096:	54 e4       	ldi	r21, 0x44	; 68
    3098:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    309c:	dc 01       	movw	r26, r24
    309e:	cb 01       	movw	r24, r22
    30a0:	8f 83       	std	Y+7, r24	; 0x07
    30a2:	98 87       	std	Y+8, r25	; 0x08
    30a4:	a9 87       	std	Y+9, r26	; 0x09
    30a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30a8:	6f 81       	ldd	r22, Y+7	; 0x07
    30aa:	78 85       	ldd	r23, Y+8	; 0x08
    30ac:	89 85       	ldd	r24, Y+9	; 0x09
    30ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    30b0:	20 e0       	ldi	r18, 0x00	; 0
    30b2:	30 e0       	ldi	r19, 0x00	; 0
    30b4:	40 e8       	ldi	r20, 0x80	; 128
    30b6:	5f e3       	ldi	r21, 0x3F	; 63
    30b8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    30bc:	88 23       	and	r24, r24
    30be:	2c f4       	brge	.+10     	; 0x30ca <KeyPad_u8Pressed+0x1bc>
		__ticks = 1;
    30c0:	81 e0       	ldi	r24, 0x01	; 1
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	9e 83       	std	Y+6, r25	; 0x06
    30c6:	8d 83       	std	Y+5, r24	; 0x05
    30c8:	3f c0       	rjmp	.+126    	; 0x3148 <KeyPad_u8Pressed+0x23a>
	else if (__tmp > 65535)
    30ca:	6f 81       	ldd	r22, Y+7	; 0x07
    30cc:	78 85       	ldd	r23, Y+8	; 0x08
    30ce:	89 85       	ldd	r24, Y+9	; 0x09
    30d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    30d2:	20 e0       	ldi	r18, 0x00	; 0
    30d4:	3f ef       	ldi	r19, 0xFF	; 255
    30d6:	4f e7       	ldi	r20, 0x7F	; 127
    30d8:	57 e4       	ldi	r21, 0x47	; 71
    30da:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    30de:	18 16       	cp	r1, r24
    30e0:	4c f5       	brge	.+82     	; 0x3134 <KeyPad_u8Pressed+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    30e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    30e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    30e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    30ea:	20 e0       	ldi	r18, 0x00	; 0
    30ec:	30 e0       	ldi	r19, 0x00	; 0
    30ee:	40 e2       	ldi	r20, 0x20	; 32
    30f0:	51 e4       	ldi	r21, 0x41	; 65
    30f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    30f6:	dc 01       	movw	r26, r24
    30f8:	cb 01       	movw	r24, r22
    30fa:	bc 01       	movw	r22, r24
    30fc:	cd 01       	movw	r24, r26
    30fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3102:	dc 01       	movw	r26, r24
    3104:	cb 01       	movw	r24, r22
    3106:	9e 83       	std	Y+6, r25	; 0x06
    3108:	8d 83       	std	Y+5, r24	; 0x05
    310a:	0f c0       	rjmp	.+30     	; 0x312a <KeyPad_u8Pressed+0x21c>
    310c:	88 ec       	ldi	r24, 0xC8	; 200
    310e:	90 e0       	ldi	r25, 0x00	; 0
    3110:	9c 83       	std	Y+4, r25	; 0x04
    3112:	8b 83       	std	Y+3, r24	; 0x03
    3114:	8b 81       	ldd	r24, Y+3	; 0x03
    3116:	9c 81       	ldd	r25, Y+4	; 0x04
    3118:	01 97       	sbiw	r24, 0x01	; 1
    311a:	f1 f7       	brne	.-4      	; 0x3118 <KeyPad_u8Pressed+0x20a>
    311c:	9c 83       	std	Y+4, r25	; 0x04
    311e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3120:	8d 81       	ldd	r24, Y+5	; 0x05
    3122:	9e 81       	ldd	r25, Y+6	; 0x06
    3124:	01 97       	sbiw	r24, 0x01	; 1
    3126:	9e 83       	std	Y+6, r25	; 0x06
    3128:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    312a:	8d 81       	ldd	r24, Y+5	; 0x05
    312c:	9e 81       	ldd	r25, Y+6	; 0x06
    312e:	00 97       	sbiw	r24, 0x00	; 0
    3130:	69 f7       	brne	.-38     	; 0x310c <KeyPad_u8Pressed+0x1fe>
    3132:	14 c0       	rjmp	.+40     	; 0x315c <KeyPad_u8Pressed+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3134:	6f 81       	ldd	r22, Y+7	; 0x07
    3136:	78 85       	ldd	r23, Y+8	; 0x08
    3138:	89 85       	ldd	r24, Y+9	; 0x09
    313a:	9a 85       	ldd	r25, Y+10	; 0x0a
    313c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3140:	dc 01       	movw	r26, r24
    3142:	cb 01       	movw	r24, r22
    3144:	9e 83       	std	Y+6, r25	; 0x06
    3146:	8d 83       	std	Y+5, r24	; 0x05
    3148:	8d 81       	ldd	r24, Y+5	; 0x05
    314a:	9e 81       	ldd	r25, Y+6	; 0x06
    314c:	9a 83       	std	Y+2, r25	; 0x02
    314e:	89 83       	std	Y+1, r24	; 0x01
    3150:	89 81       	ldd	r24, Y+1	; 0x01
    3152:	9a 81       	ldd	r25, Y+2	; 0x02
    3154:	01 97       	sbiw	r24, 0x01	; 1
    3156:	f1 f7       	brne	.-4      	; 0x3154 <KeyPad_u8Pressed+0x246>
    3158:	9a 83       	std	Y+2, r25	; 0x02
    315a:	89 83       	std	Y+1, r24	; 0x01

	for(local_u8currentColumn = KEYPAD_COLUMN_START; local_u8currentColumn <= KEYPAD_COLUMN_END; local_u8currentColumn++)
	{
		DIO_u8setPinVal(KEYPAD_PORT, local_u8currentColumn, LOW);

		for(local_u8currentRow = KEYPAD_ROW_START; local_u8currentRow <= KEYPAD_ROW_END; local_u8currentRow++)
    315c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    315e:	8f 5f       	subi	r24, 0xFF	; 255
    3160:	8d 8f       	std	Y+29, r24	; 0x1d
    3162:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3164:	84 30       	cpi	r24, 0x04	; 4
    3166:	08 f4       	brcc	.+2      	; 0x316a <KeyPad_u8Pressed+0x25c>
    3168:	e8 ce       	rjmp	.-560    	; 0x2f3a <KeyPad_u8Pressed+0x2c>
				}
				_delay_ms(5);
			}
		}

		DIO_u8setPinVal(KEYPAD_PORT, local_u8currentColumn, HIGH);
    316a:	83 e0       	ldi	r24, 0x03	; 3
    316c:	6e 8d       	ldd	r22, Y+30	; 0x1e
    316e:	41 e0       	ldi	r20, 0x01	; 1
    3170:	0e 94 03 09 	call	0x1206	; 0x1206 <DIO_u8setPinVal>
	u8 local_u8keyPressed = NO_KEY_PRESSED;
	u8 local_u8currentColumn;
	u8 local_u8currentRow;
	u8 local_u8currentRowStatus;

	for(local_u8currentColumn = KEYPAD_COLUMN_START; local_u8currentColumn <= KEYPAD_COLUMN_END; local_u8currentColumn++)
    3174:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3176:	8f 5f       	subi	r24, 0xFF	; 255
    3178:	8e 8f       	std	Y+30, r24	; 0x1e
    317a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    317c:	88 30       	cpi	r24, 0x08	; 8
    317e:	08 f4       	brcc	.+2      	; 0x3182 <KeyPad_u8Pressed+0x274>
    3180:	d5 ce       	rjmp	.-598    	; 0x2f2c <KeyPad_u8Pressed+0x1e>

		DIO_u8setPinVal(KEYPAD_PORT, local_u8currentColumn, HIGH);
	}


	return local_u8keyPressed;
    3182:	8f 8d       	ldd	r24, Y+31	; 0x1f
}
    3184:	a0 96       	adiw	r28, 0x20	; 32
    3186:	0f b6       	in	r0, 0x3f	; 63
    3188:	f8 94       	cli
    318a:	de bf       	out	0x3e, r29	; 62
    318c:	0f be       	out	0x3f, r0	; 63
    318e:	cd bf       	out	0x3d, r28	; 61
    3190:	cf 91       	pop	r28
    3192:	df 91       	pop	r29
    3194:	08 95       	ret

00003196 <main>:
#include "../MCAL/ADC/ADC_int.h"
#include "../Libs/stdtypes.h"
#include "util/delay.h"

void main (void)
{
    3196:	df 93       	push	r29
    3198:	cf 93       	push	r28
    319a:	cd b7       	in	r28, 0x3d	; 61
    319c:	de b7       	in	r29, 0x3e	; 62
    319e:	68 97       	sbiw	r28, 0x18	; 24
    31a0:	0f b6       	in	r0, 0x3f	; 63
    31a2:	f8 94       	cli
    31a4:	de bf       	out	0x3e, r29	; 62
    31a6:	0f be       	out	0x3f, r0	; 63
    31a8:	cd bf       	out	0x3d, r28	; 61
	u16 digital;
	f32 analog_mv;
	u32 temp;

	LCD_vidInit();
    31aa:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <LCD_vidInit>
	ADC_vidADCInit();
    31ae:	0e 94 a8 0a 	call	0x1550	; 0x1550 <ADC_vidADCInit>

	while(1)
	{
		LCD_vidClearDisplay();
    31b2:	0e 94 05 13 	call	0x260a	; 0x260a <LCD_vidClearDisplay>
		digital = ADC_u8ADCRead(0);
    31b6:	80 e0       	ldi	r24, 0x00	; 0
    31b8:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <ADC_u8ADCRead>
    31bc:	98 8f       	std	Y+24, r25	; 0x18
    31be:	8f 8b       	std	Y+23, r24	; 0x17
		analog_mv = digital * 4.88;
    31c0:	8f 89       	ldd	r24, Y+23	; 0x17
    31c2:	98 8d       	ldd	r25, Y+24	; 0x18
    31c4:	cc 01       	movw	r24, r24
    31c6:	a0 e0       	ldi	r26, 0x00	; 0
    31c8:	b0 e0       	ldi	r27, 0x00	; 0
    31ca:	bc 01       	movw	r22, r24
    31cc:	cd 01       	movw	r24, r26
    31ce:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    31d2:	dc 01       	movw	r26, r24
    31d4:	cb 01       	movw	r24, r22
    31d6:	bc 01       	movw	r22, r24
    31d8:	cd 01       	movw	r24, r26
    31da:	26 ef       	ldi	r18, 0xF6	; 246
    31dc:	38 e2       	ldi	r19, 0x28	; 40
    31de:	4c e9       	ldi	r20, 0x9C	; 156
    31e0:	50 e4       	ldi	r21, 0x40	; 64
    31e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    31e6:	dc 01       	movw	r26, r24
    31e8:	cb 01       	movw	r24, r22
    31ea:	8b 8b       	std	Y+19, r24	; 0x13
    31ec:	9c 8b       	std	Y+20, r25	; 0x14
    31ee:	ad 8b       	std	Y+21, r26	; 0x15
    31f0:	be 8b       	std	Y+22, r27	; 0x16
		temp = analog_mv /10;
    31f2:	6b 89       	ldd	r22, Y+19	; 0x13
    31f4:	7c 89       	ldd	r23, Y+20	; 0x14
    31f6:	8d 89       	ldd	r24, Y+21	; 0x15
    31f8:	9e 89       	ldd	r25, Y+22	; 0x16
    31fa:	20 e0       	ldi	r18, 0x00	; 0
    31fc:	30 e0       	ldi	r19, 0x00	; 0
    31fe:	40 e2       	ldi	r20, 0x20	; 32
    3200:	51 e4       	ldi	r21, 0x41	; 65
    3202:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    3206:	dc 01       	movw	r26, r24
    3208:	cb 01       	movw	r24, r22
    320a:	bc 01       	movw	r22, r24
    320c:	cd 01       	movw	r24, r26
    320e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3212:	dc 01       	movw	r26, r24
    3214:	cb 01       	movw	r24, r22
    3216:	8f 87       	std	Y+15, r24	; 0x0f
    3218:	98 8b       	std	Y+16, r25	; 0x10
    321a:	a9 8b       	std	Y+17, r26	; 0x11
    321c:	ba 8b       	std	Y+18, r27	; 0x12
		LCD_vidSendString("Temp=");
    321e:	80 e6       	ldi	r24, 0x60	; 96
    3220:	90 e0       	ldi	r25, 0x00	; 0
    3222:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <LCD_vidSendString>
		LCD_vidSendNumber(temp);
    3226:	8f 85       	ldd	r24, Y+15	; 0x0f
    3228:	98 89       	ldd	r25, Y+16	; 0x10
    322a:	a9 89       	ldd	r26, Y+17	; 0x11
    322c:	ba 89       	ldd	r27, Y+18	; 0x12
    322e:	bc 01       	movw	r22, r24
    3230:	cd 01       	movw	r24, r26
    3232:	0e 94 3f 12 	call	0x247e	; 0x247e <LCD_vidSendNumber>
		LCD_vidSendString("C");
    3236:	86 e6       	ldi	r24, 0x66	; 102
    3238:	90 e0       	ldi	r25, 0x00	; 0
    323a:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <LCD_vidSendString>
    323e:	80 e0       	ldi	r24, 0x00	; 0
    3240:	90 e0       	ldi	r25, 0x00	; 0
    3242:	a8 e4       	ldi	r26, 0x48	; 72
    3244:	b4 e4       	ldi	r27, 0x44	; 68
    3246:	8b 87       	std	Y+11, r24	; 0x0b
    3248:	9c 87       	std	Y+12, r25	; 0x0c
    324a:	ad 87       	std	Y+13, r26	; 0x0d
    324c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    324e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3250:	7c 85       	ldd	r23, Y+12	; 0x0c
    3252:	8d 85       	ldd	r24, Y+13	; 0x0d
    3254:	9e 85       	ldd	r25, Y+14	; 0x0e
    3256:	20 e0       	ldi	r18, 0x00	; 0
    3258:	30 e0       	ldi	r19, 0x00	; 0
    325a:	4a ef       	ldi	r20, 0xFA	; 250
    325c:	54 e4       	ldi	r21, 0x44	; 68
    325e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3262:	dc 01       	movw	r26, r24
    3264:	cb 01       	movw	r24, r22
    3266:	8f 83       	std	Y+7, r24	; 0x07
    3268:	98 87       	std	Y+8, r25	; 0x08
    326a:	a9 87       	std	Y+9, r26	; 0x09
    326c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    326e:	6f 81       	ldd	r22, Y+7	; 0x07
    3270:	78 85       	ldd	r23, Y+8	; 0x08
    3272:	89 85       	ldd	r24, Y+9	; 0x09
    3274:	9a 85       	ldd	r25, Y+10	; 0x0a
    3276:	20 e0       	ldi	r18, 0x00	; 0
    3278:	30 e0       	ldi	r19, 0x00	; 0
    327a:	40 e8       	ldi	r20, 0x80	; 128
    327c:	5f e3       	ldi	r21, 0x3F	; 63
    327e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3282:	88 23       	and	r24, r24
    3284:	2c f4       	brge	.+10     	; 0x3290 <main+0xfa>
		__ticks = 1;
    3286:	81 e0       	ldi	r24, 0x01	; 1
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	9e 83       	std	Y+6, r25	; 0x06
    328c:	8d 83       	std	Y+5, r24	; 0x05
    328e:	3f c0       	rjmp	.+126    	; 0x330e <main+0x178>
	else if (__tmp > 65535)
    3290:	6f 81       	ldd	r22, Y+7	; 0x07
    3292:	78 85       	ldd	r23, Y+8	; 0x08
    3294:	89 85       	ldd	r24, Y+9	; 0x09
    3296:	9a 85       	ldd	r25, Y+10	; 0x0a
    3298:	20 e0       	ldi	r18, 0x00	; 0
    329a:	3f ef       	ldi	r19, 0xFF	; 255
    329c:	4f e7       	ldi	r20, 0x7F	; 127
    329e:	57 e4       	ldi	r21, 0x47	; 71
    32a0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    32a4:	18 16       	cp	r1, r24
    32a6:	4c f5       	brge	.+82     	; 0x32fa <main+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    32aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    32ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    32ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    32b0:	20 e0       	ldi	r18, 0x00	; 0
    32b2:	30 e0       	ldi	r19, 0x00	; 0
    32b4:	40 e2       	ldi	r20, 0x20	; 32
    32b6:	51 e4       	ldi	r21, 0x41	; 65
    32b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    32bc:	dc 01       	movw	r26, r24
    32be:	cb 01       	movw	r24, r22
    32c0:	bc 01       	movw	r22, r24
    32c2:	cd 01       	movw	r24, r26
    32c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    32c8:	dc 01       	movw	r26, r24
    32ca:	cb 01       	movw	r24, r22
    32cc:	9e 83       	std	Y+6, r25	; 0x06
    32ce:	8d 83       	std	Y+5, r24	; 0x05
    32d0:	0f c0       	rjmp	.+30     	; 0x32f0 <main+0x15a>
    32d2:	88 ec       	ldi	r24, 0xC8	; 200
    32d4:	90 e0       	ldi	r25, 0x00	; 0
    32d6:	9c 83       	std	Y+4, r25	; 0x04
    32d8:	8b 83       	std	Y+3, r24	; 0x03
    32da:	8b 81       	ldd	r24, Y+3	; 0x03
    32dc:	9c 81       	ldd	r25, Y+4	; 0x04
    32de:	01 97       	sbiw	r24, 0x01	; 1
    32e0:	f1 f7       	brne	.-4      	; 0x32de <main+0x148>
    32e2:	9c 83       	std	Y+4, r25	; 0x04
    32e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32e6:	8d 81       	ldd	r24, Y+5	; 0x05
    32e8:	9e 81       	ldd	r25, Y+6	; 0x06
    32ea:	01 97       	sbiw	r24, 0x01	; 1
    32ec:	9e 83       	std	Y+6, r25	; 0x06
    32ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32f0:	8d 81       	ldd	r24, Y+5	; 0x05
    32f2:	9e 81       	ldd	r25, Y+6	; 0x06
    32f4:	00 97       	sbiw	r24, 0x00	; 0
    32f6:	69 f7       	brne	.-38     	; 0x32d2 <main+0x13c>
    32f8:	5c cf       	rjmp	.-328    	; 0x31b2 <main+0x1c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32fa:	6f 81       	ldd	r22, Y+7	; 0x07
    32fc:	78 85       	ldd	r23, Y+8	; 0x08
    32fe:	89 85       	ldd	r24, Y+9	; 0x09
    3300:	9a 85       	ldd	r25, Y+10	; 0x0a
    3302:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3306:	dc 01       	movw	r26, r24
    3308:	cb 01       	movw	r24, r22
    330a:	9e 83       	std	Y+6, r25	; 0x06
    330c:	8d 83       	std	Y+5, r24	; 0x05
    330e:	8d 81       	ldd	r24, Y+5	; 0x05
    3310:	9e 81       	ldd	r25, Y+6	; 0x06
    3312:	9a 83       	std	Y+2, r25	; 0x02
    3314:	89 83       	std	Y+1, r24	; 0x01
    3316:	89 81       	ldd	r24, Y+1	; 0x01
    3318:	9a 81       	ldd	r25, Y+2	; 0x02
    331a:	01 97       	sbiw	r24, 0x01	; 1
    331c:	f1 f7       	brne	.-4      	; 0x331a <main+0x184>
    331e:	9a 83       	std	Y+2, r25	; 0x02
    3320:	89 83       	std	Y+1, r24	; 0x01
    3322:	47 cf       	rjmp	.-370    	; 0x31b2 <main+0x1c>

00003324 <__divmodsi4>:
    3324:	97 fb       	bst	r25, 7
    3326:	09 2e       	mov	r0, r25
    3328:	05 26       	eor	r0, r21
    332a:	0e d0       	rcall	.+28     	; 0x3348 <__divmodsi4_neg1>
    332c:	57 fd       	sbrc	r21, 7
    332e:	04 d0       	rcall	.+8      	; 0x3338 <__divmodsi4_neg2>
    3330:	14 d0       	rcall	.+40     	; 0x335a <__udivmodsi4>
    3332:	0a d0       	rcall	.+20     	; 0x3348 <__divmodsi4_neg1>
    3334:	00 1c       	adc	r0, r0
    3336:	38 f4       	brcc	.+14     	; 0x3346 <__divmodsi4_exit>

00003338 <__divmodsi4_neg2>:
    3338:	50 95       	com	r21
    333a:	40 95       	com	r20
    333c:	30 95       	com	r19
    333e:	21 95       	neg	r18
    3340:	3f 4f       	sbci	r19, 0xFF	; 255
    3342:	4f 4f       	sbci	r20, 0xFF	; 255
    3344:	5f 4f       	sbci	r21, 0xFF	; 255

00003346 <__divmodsi4_exit>:
    3346:	08 95       	ret

00003348 <__divmodsi4_neg1>:
    3348:	f6 f7       	brtc	.-4      	; 0x3346 <__divmodsi4_exit>
    334a:	90 95       	com	r25
    334c:	80 95       	com	r24
    334e:	70 95       	com	r23
    3350:	61 95       	neg	r22
    3352:	7f 4f       	sbci	r23, 0xFF	; 255
    3354:	8f 4f       	sbci	r24, 0xFF	; 255
    3356:	9f 4f       	sbci	r25, 0xFF	; 255
    3358:	08 95       	ret

0000335a <__udivmodsi4>:
    335a:	a1 e2       	ldi	r26, 0x21	; 33
    335c:	1a 2e       	mov	r1, r26
    335e:	aa 1b       	sub	r26, r26
    3360:	bb 1b       	sub	r27, r27
    3362:	fd 01       	movw	r30, r26
    3364:	0d c0       	rjmp	.+26     	; 0x3380 <__udivmodsi4_ep>

00003366 <__udivmodsi4_loop>:
    3366:	aa 1f       	adc	r26, r26
    3368:	bb 1f       	adc	r27, r27
    336a:	ee 1f       	adc	r30, r30
    336c:	ff 1f       	adc	r31, r31
    336e:	a2 17       	cp	r26, r18
    3370:	b3 07       	cpc	r27, r19
    3372:	e4 07       	cpc	r30, r20
    3374:	f5 07       	cpc	r31, r21
    3376:	20 f0       	brcs	.+8      	; 0x3380 <__udivmodsi4_ep>
    3378:	a2 1b       	sub	r26, r18
    337a:	b3 0b       	sbc	r27, r19
    337c:	e4 0b       	sbc	r30, r20
    337e:	f5 0b       	sbc	r31, r21

00003380 <__udivmodsi4_ep>:
    3380:	66 1f       	adc	r22, r22
    3382:	77 1f       	adc	r23, r23
    3384:	88 1f       	adc	r24, r24
    3386:	99 1f       	adc	r25, r25
    3388:	1a 94       	dec	r1
    338a:	69 f7       	brne	.-38     	; 0x3366 <__udivmodsi4_loop>
    338c:	60 95       	com	r22
    338e:	70 95       	com	r23
    3390:	80 95       	com	r24
    3392:	90 95       	com	r25
    3394:	9b 01       	movw	r18, r22
    3396:	ac 01       	movw	r20, r24
    3398:	bd 01       	movw	r22, r26
    339a:	cf 01       	movw	r24, r30
    339c:	08 95       	ret

0000339e <__prologue_saves__>:
    339e:	2f 92       	push	r2
    33a0:	3f 92       	push	r3
    33a2:	4f 92       	push	r4
    33a4:	5f 92       	push	r5
    33a6:	6f 92       	push	r6
    33a8:	7f 92       	push	r7
    33aa:	8f 92       	push	r8
    33ac:	9f 92       	push	r9
    33ae:	af 92       	push	r10
    33b0:	bf 92       	push	r11
    33b2:	cf 92       	push	r12
    33b4:	df 92       	push	r13
    33b6:	ef 92       	push	r14
    33b8:	ff 92       	push	r15
    33ba:	0f 93       	push	r16
    33bc:	1f 93       	push	r17
    33be:	cf 93       	push	r28
    33c0:	df 93       	push	r29
    33c2:	cd b7       	in	r28, 0x3d	; 61
    33c4:	de b7       	in	r29, 0x3e	; 62
    33c6:	ca 1b       	sub	r28, r26
    33c8:	db 0b       	sbc	r29, r27
    33ca:	0f b6       	in	r0, 0x3f	; 63
    33cc:	f8 94       	cli
    33ce:	de bf       	out	0x3e, r29	; 62
    33d0:	0f be       	out	0x3f, r0	; 63
    33d2:	cd bf       	out	0x3d, r28	; 61
    33d4:	09 94       	ijmp

000033d6 <__epilogue_restores__>:
    33d6:	2a 88       	ldd	r2, Y+18	; 0x12
    33d8:	39 88       	ldd	r3, Y+17	; 0x11
    33da:	48 88       	ldd	r4, Y+16	; 0x10
    33dc:	5f 84       	ldd	r5, Y+15	; 0x0f
    33de:	6e 84       	ldd	r6, Y+14	; 0x0e
    33e0:	7d 84       	ldd	r7, Y+13	; 0x0d
    33e2:	8c 84       	ldd	r8, Y+12	; 0x0c
    33e4:	9b 84       	ldd	r9, Y+11	; 0x0b
    33e6:	aa 84       	ldd	r10, Y+10	; 0x0a
    33e8:	b9 84       	ldd	r11, Y+9	; 0x09
    33ea:	c8 84       	ldd	r12, Y+8	; 0x08
    33ec:	df 80       	ldd	r13, Y+7	; 0x07
    33ee:	ee 80       	ldd	r14, Y+6	; 0x06
    33f0:	fd 80       	ldd	r15, Y+5	; 0x05
    33f2:	0c 81       	ldd	r16, Y+4	; 0x04
    33f4:	1b 81       	ldd	r17, Y+3	; 0x03
    33f6:	aa 81       	ldd	r26, Y+2	; 0x02
    33f8:	b9 81       	ldd	r27, Y+1	; 0x01
    33fa:	ce 0f       	add	r28, r30
    33fc:	d1 1d       	adc	r29, r1
    33fe:	0f b6       	in	r0, 0x3f	; 63
    3400:	f8 94       	cli
    3402:	de bf       	out	0x3e, r29	; 62
    3404:	0f be       	out	0x3f, r0	; 63
    3406:	cd bf       	out	0x3d, r28	; 61
    3408:	ed 01       	movw	r28, r26
    340a:	08 95       	ret

0000340c <_exit>:
    340c:	f8 94       	cli

0000340e <__stop_program>:
    340e:	ff cf       	rjmp	.-2      	; 0x340e <__stop_program>
